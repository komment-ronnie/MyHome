/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.services.springdatajpa;

import com.myhome.domain.CommunityHouse;
import com.myhome.domain.HouseMember;
import com.myhome.repositories.CommunityHouseRepository;
import com.myhome.repositories.HouseMemberDocumentRepository;
import com.myhome.repositories.HouseMemberRepository;
import com.myhome.services.HouseService;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

/**
 * is an implementation of the HouseService interface that provides methods for
 * managing houses and their members using JPA. The class has several methods for
 * adding, listing, and deleting house members, as well as retrieving details of a
 * specific house. It also provides methods for listing house members based on user
 * ID.
 */
@RequiredArgsConstructor
@Service
public class HouseSDJpaService implements HouseService {
  private final HouseMemberRepository houseMemberRepository;
  private final HouseMemberDocumentRepository houseMemberDocumentRepository;
  private final CommunityHouseRepository communityHouseRepository;

  /**
   * generates a unique identifier using the `UUID.randomUUID()` method and returns it
   * as a string.
   * 
   * @returns a unique string of characters generated using the `UUID` class.
   */
  private String generateUniqueId() {
    return UUID.randomUUID().toString();
  }

  /**
   * queries the community House repository to retrieve a list of all Community Houses,
   * then returns a `Set` of those houses.
   * 
   * @returns a set of all community houses stored in the database.
   * 
   * 	- `Set<CommunityHouse> communityHouses`: This is a set of `CommunityHouse` objects
   * representing all the houses in the system.
   * 	- Each element in the set is a `CommunityHouse` object, which contains information
   * about a specific house, such as its name, address, and category.
   * 	- The set is empty when no houses exist in the system.
   * 	- The set is populated by calling the `findAll()` method on the `communityHouseRepository`,
   * which retrieves all the houses from the database or data source.
   * 	- The `forEach()` method is used to iterate through the elements of the set and
   * add each house to the `communityHouses` set.
   */
  @Override
  public Set<CommunityHouse> listAllHouses() {
    Set<CommunityHouse> communityHouses = new HashSet<>();
    communityHouseRepository.findAll().forEach(communityHouses::add);
    return communityHouses;
  }

  /**
   * retrieves a list of `CommunityHouse` objects from the repository and returns a set
   * containing all the retrieved objects.
   * 
   * @param pageable page number and the number of houses per page to be retrieved from
   * the database, allowing for efficient retrieval of a subset of the community houses.
   * 
   * 	- `Pageable`: This is an interface in Java that provides methods for navigating
   * and retrieving a page of data from a larger dataset. It has various attributes/properties
   * such as `getPageNumber()`, `getPageSize()`, `getTotalPages()`, and `getTotalElements()`
   * to aid in navigation and data retrieval.
   * 
   * @returns a set of `CommunityHouse` objects.
   * 
   * The output is a `Set` of `CommunityHouse` objects, which means it is an unordered
   * collection of items that can contain duplicates and is guaranteed to be a unique
   * set.
   * 
   * The `Set` is generated by calling the `findAll` method on the `communityHouseRepository`,
   * passing in a `Pageable` object as a parameter. This method returns a stream of
   * `CommunityHouse` objects, which are then added to the `Set`.
   * 
   * The `Pageable` object used in the method call is responsible for paginating the
   * results, meaning it controls the number of items returned in each page of the
   * result set.
   */
  @Override
  public Set<CommunityHouse> listAllHouses(Pageable pageable) {
    Set<CommunityHouse> communityHouses = new HashSet<>();
    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);
    return communityHouses;
  }

  /**
   * updates an existing house's members by generating unique member IDs, linking them
   * to the community house and its members, and saving all changes.
   * 
   * @param houseId id of the house for which new members are being added.
   * 
   * @param houseMembers set of house members that need to be added or saved in the database.
   * 
   * 	- `houseId`: The unique identifier of the house for which the members are being
   * added.
   * 	- `houseMembers`: A set of `HouseMember` objects containing the new members to
   * be added to the community house. Each member has a unique `memberId` attribute
   * generated using the `generateUniqueId()` method, and is associated with the community
   * house through the `setCommunityHouse()` method.
   * 	- `houseMemberRepository`: A repository object used for saving the newly created
   * or updated `HouseMember` objects in the database.
   * 
   * @returns a `Set` of `HouseMember` objects, each with a unique ID and a reference
   * to the corresponding `CommunityHouse`.
   * 
   * The output is a `Set` of `HouseMember` objects, representing the newly added members
   * to the community house.
   * 
   * The `Set` is generated using the `map` method, which applies a given function (in
   * this case, an anonymous inner class that creates and saves new `HouseMember`
   * objects) to each element in the input `Set` of `HouseMember` objects.
   * 
   * The inner class uses the `generateUniqueId()` method to generate unique IDs for
   * each new `HouseMember` object, and sets the `memberId` property accordingly. It
   * also sets the `CommunityHouse` property to the corresponding `CommunityHouse`
   * object, using the `setCommunityHouse()` method.
   * 
   * Finally, the `saveAll()` method of the `house MemberRepository` is called to save
   * all the new `HouseMember` objects, and the `orElse()` method is used to return the
   * `Set` of saved objects if any, or an empty `Set` otherwise.
   */
  @Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {
    Optional<CommunityHouse> communityHouseOptional =
        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);
    return communityHouseOptional.map(communityHouse -> {
      Set<HouseMember> savedMembers = new HashSet<>();
      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));
      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));
      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);

      communityHouse.getHouseMembers().addAll(savedMembers);
      communityHouseRepository.save(communityHouse);
      return savedMembers;
    }).orElse(new HashSet<>());
  }

  /**
   * deletes a member from a community house by finding the house and its members,
   * removing the member from the house's membership list, and saving the changes to
   * the database.
   * 
   * @param houseId ID of the house for which the member is being deleted.
   * 
   * @param memberId ID of the member to be removed from the community house.
   * 
   * @returns a boolean value indicating whether the specified member was removed from
   * the house.
   */
  @Override
  public boolean deleteMemberFromHouse(String houseId, String memberId) {
    Optional<CommunityHouse> communityHouseOptional =
        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);
    return communityHouseOptional.map(communityHouse -> {
      boolean isMemberRemoved = false;
      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {
        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();
        for (HouseMember member : houseMembers) {
          if (member.getMemberId().equals(memberId)) {
            houseMembers.remove(member);
            communityHouse.setHouseMembers(houseMembers);
            communityHouseRepository.save(communityHouse);
            member.setCommunityHouse(null);
            houseMemberRepository.save(member);
            isMemberRemoved = true;
            break;
          }
        }
      }
      return isMemberRemoved;
    }).orElse(false);
  }

  /**
   * retrieves CommunityHouse details by ID. It calls the `findByHouseId` method of the
   * `communityHouseRepository` and returns an Optional object containing the details
   * if found, otherwise returns an empty Optional.
   * 
   * @param houseId identifier of the house for which details are being retrieved.
   * 
   * @returns an optional instance of `CommunityHouse`.
   * 
   * 	- `Optional<CommunityHouse>` is the type of the output, indicating that it may
   * contain a value or be empty.
   * 	- `communityHouseRepository.findByHouseId(houseId)` is the method called to
   * retrieve the house details by ID, which returns an optional object containing the
   * details if found, or an empty optional if not found.
   */
  @Override
  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {
    return communityHouseRepository.findByHouseId(houseId);
  }

  /**
   * retrieves a list of `HouseMember` instances associated with a specified `houseId`.
   * It uses the `houseMemberRepository` to find the members and returns an optional list.
   * 
   * @param houseId identifier of the house for which the list of members is being retrieved.
   * 
   * @param pageable page number and page size for fetching a subset of the `HouseMember`
   * entities from the repository.
   * 
   * 	- `houseId`: The ID of the house for which members are being retrieved.
   * 	- `Pageable`: A class that represents a page of results, providing methods to
   * navigate through the page hierarchy. It contains information about the current
   * page, such as the number of results per page and the total number of results.
   * 
   * @returns a list of `HouseMember` objects retrieved from the repository.
   * 
   * 	- `Optional<List<HouseMember>>`: The output is an optional list of house members
   * associated with the provided house ID.
   * 	- `List<HouseMember>`: If the output is not `null`, it contains a list of house
   * members retrieved from the repository.
   * 	- `String` `houseId`: The ID of the house for which the list of house members is
   * being retrieved.
   * 	- `Pageable` `pageable`: A pageable object used to retrieve a subset of the house
   * members based on the page number and size.
   */
  @Override
  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {
    return Optional.ofNullable(
        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)
    );
  }

  /**
   * retrieves a list of `HouseMember` objects from the database based on the user ID
   * and pageable parameters.
   * 
   * @param userId ID of the user for whom the list of house members is being retrieved.
   * 
   * @param pageable page number and page size for fetching a subset of the HouseMembers
   * for the user Id.
   * 
   * 	- `user_id`: The unique identifier for the user whose houses are to be listed.
   * 	- `pageable`: A pageable object representing the pagination configuration for the
   * list of house members.
   * 
   * @returns a list of `HouseMember` objects for the specified user ID, paginated based
   * on the input pageable.
   * 
   * 	- `Optional<List<HouseMember>>`: This is the type of the returned value, which
   * can be either an empty list if no house members exist for the specified user ID
   * or a non-empty list containing the house members.
   * 	- `listHouseMembersForHousesOfUserId(String userId, Pageable pageable)`: This is
   * the method that returns the list of house members for a given user ID when passed
   * a pageable parameter.
   * 	- `houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId,
   * pageable)`: This is the method called within the `listHouseMembersForHousesOfUserId`
   * method to retrieve the list of house members for a given user ID using the `houseMemberRepository`.
   * 	- `findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)`: This is
   * the method called within the `houseMemberRepository` to retrieve the list of house
   * members for a given user ID and pageable parameter.
   */
  @Override
  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,
      Pageable pageable) {
    return Optional.ofNullable(
        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)
    );
  }
}
