package com.myhome.controllers;

import com.myhome.api.AuthenticationApi;
import com.myhome.domain.AuthenticationData;
import com.myhome.model.LoginRequest;
import com.myhome.services.AuthenticationService;
import javax.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

/**
 * is a Spring REST controller that implements the AuthenticationApi interface. It
 * handles login requests and returns an HTTP entity with user ID and JWT token in
 * the headers based on the authentication data generated by the AuthenticationService.
 */
@RequiredArgsConstructor
@RestController
public class AuthenticationController implements AuthenticationApi {

  private final AuthenticationService authenticationService;

  /**
   * handles the login request by authenticating the user using the `AuthenticationService`,
   * and then returning an `OK` response with custom headers based on the authentication
   * data.
   * 
   * @param loginRequest authentication request containing user credentials to authenticate
   * and verify their identity.
   * 
   * 	- `loginRequest`: A `LoginRequest` object containing user credentials for authentication.
   * 
   * The function returns a `ResponseEntity` with an `OK` status code and custom headers
   * created by calling `createLoginHeaders()`.
   * 
   * @returns a `ResponseEntity` object containing an `Ok` status and headers generated
   * based on the authentication data.
   * 
   * 	- `ResponseEntity`: This is an object that represents a response entity with a
   * status code and headers.
   * 	- `ok()`: This is a method that creates a response entity with a status code of
   * 200 (OK).
   * 	- `headers(createLoginHeaders(authenticationData))`: This method creates a map
   * of headers that are added to the response entity. The `createLoginHeaders` method
   * is called with the `authenticationData` as its argument and returns a map of headers.
   * 	- `build()`: This is a method that builds the response entity by adding the headers
   * to the body of the entity.
   */
  @Override
  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {
    final AuthenticationData authenticationData = authenticationService.login(loginRequest);
    return ResponseEntity.ok()
        .headers(createLoginHeaders(authenticationData))
        .build();
  }

  /**
   * creates HTTP headers for logging in a user, containing the user ID and JWT token
   * obtained from the `AuthenticationData` object.
   * 
   * @param authenticationData user's authentication data, including their user ID and
   * JWT token, which are added to an HTTP headers object as key-value pairs.
   * 
   * 	- `getUserId()`: retrieves the value of the `userId` field in the `authenticationData`.
   * 	- `getJwtToken()`: retrieves the value of the `jwtToken` field in the `authenticationData`.
   * 
   * @returns an HTTP headers object containing the user ID and JWT token for the
   * authenticated user.
   * 
   * 1/ `HttpHeaders`: This is the type of the returned object, which is an instance
   * of the `HttpHeaders` class in Java.
   * 2/ `add()` methods: The function uses two `add()` methods to add user-defined
   * headers to the resulting HTTP headers object. Specifically, it adds a header named
   * "userId" with the value of the `getUserId()` method of the `AuthenticationData`
   * object, and another header named "token" with the value of the `getJwtToken()` method.
   * 3/ `HttpHeaders` class: The returned object is an instance of the `HttpHeaders`
   * class, which provides a way to add and retrieve HTTP headers in a structured manner
   * in Java.
   */
  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {
    final HttpHeaders httpHeaders = new HttpHeaders();
    httpHeaders.add("userId", authenticationData.getUserId());
    httpHeaders.add("token", authenticationData.getJwtToken());
    return httpHeaders;
  }
}
