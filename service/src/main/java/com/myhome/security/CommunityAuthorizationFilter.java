package com.myhome.security;

import com.myhome.domain.User;
import com.myhome.services.CommunityService;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * is used to check if an HTTP request has administrative privileges for a specific
 * community based on the user ID and community ID in the request URL. If the user
 * is not an administrator, it sets the response status to SC_UNAUTHORIZED. If the
 * user is an administrator, it delegates the processing to the parent `doFilterInternal`
 * method of the filter chain.
 */
public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {
    private final CommunityService communityService;
    private final String uuidPattern = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
    private final Pattern addAdminRequestPattern = Pattern.compile("/communities/" + uuidPattern + "/admins");


    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,
                                        CommunityService communityService) {
        super(authenticationManager);
        this.communityService = communityService;
    }

    /**
     * performs authentication and authorization for incoming requests to a Servlet-based
     * web application. It checks if the request URI matches a pattern defined by the
     * `addAdminRequestPattern` field, and if the user is not an administrator, it sets
     * the status code to HTTP 401 (Unauthorized) and stops the chain of filters from
     * processing further.
     * 
     * @param request HTTP request being processed by the filter.
     * 
     * 	- `getRequestURI()`: Returns the requested resource's URL.
     * 	- `isUserCommunityAdmin()`: Checks whether the current user is an administrator
     * for a specific community.
     * 
     * The function then proceeds to perform authentication checks and sets the response
     * status code accordingly.
     * 
     * @param response HttpServletResponse object that is being filtered by the
     * doFilterInternal method.
     * 
     * 	- `HttpServletResponse response`: This is an instance of `HttpServletResponse`,
     * which represents the HTTP response object for the current request. It contains
     * information about the request, such as the status code, headers, and other attributes.
     * 	- `FilterChain chain`: This is a reference to the chain of filters that are applied
     * to the current request. The `doFilterInternal` function is called recursively
     * through this chain until the last filter is reached.
     * 	- `HttpServletRequest request`: This is an instance of `HttpServletRequest`, which
     * represents the HTTP request object for the current request. It contains information
     * about the request, such as the URL, method, and other attributes.
     * 
     * @param chain next filter in the chain that needs to be executed after the current
     * filter is applied.
     * 
     * 	- `HttpServletRequest request`: The current HTTP request being processed by the
     * filter.
     * 	- `HttpServletResponse response`: The current HTTP response being generated by
     * the filter.
     * 	- `FilterChain chain`: A reference to the chain of filters that this filter is
     * part of, which can be used to manipulate or ignore the subsequent filters in the
     * chain.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain chain) throws IOException, ServletException {

        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());

        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        super.doFilterInternal(request, response, chain);
    }

    /**
     * determines whether a user is an administrator of a community based on their user
     * ID and the community ID in the request URL. It retrieves the list of community
     * admins from the database and filters them based on the user ID to return the admin
     * status.
     * 
     * @param request HTTP request that triggered the method execution, providing information
     * about the current user and the community ID.
     * 
     * 1/ `request`: An instance of `HttpServletRequest`, representing an HTTP request.
     * 2/ `request.getRequestURI()`: Returns the URI of the request, without any query parameters.
     * 3/ `request.getParameterValues()`: Returns a map of parameter names to values for
     * the current request.
     * 4/ `SecurityContextHolder.getContext().getAuthentication().getPrincipal()`: Returns
     * the currently authenticated user principal, which is used to determine if the user
     * is an administrator of a community.
     * 5/ `communityService.findCommunityAdminsById(communityId, null)`: Calls the
     * `findCommunityAdminsById` method on the `communityService` class, passing in the
     * `communityId` and `null` as arguments. This method returns an optional list of
     * administrators for the specified community.
     * 6/ `optional`: An instance of `Optional`, which contains a value or is empty.
     * 7/ `optional.isPresent()`: Returns a boolean indicating whether the `optional`
     * instance contains a non-empty value.
     * 8/ `communityAdmins`: An instance of `List<User>`, containing the administrators
     * for the specified community.
     * 9/ `communityAdmins.stream().filter(communityAdmin -> communityAdmin.getUserId().equals(userId))`
     * : Returns a stream of `User` instances, filtered by the user ID.
     * 10/ `communityAdmins.stream().findFirst()`: Returns the first matching `User`
     * instance in the stream, or `null` if no match is found.
     * 
     * Note that some of these properties are not explicitly mentioned in the code snippet
     * provided, but can be inferred from the function's purpose and the methods called
     * within it.
     * 
     * @returns a boolean value indicating whether the current user is an administrator
     * of a community.
     */
    private boolean isUserCommunityAdmin(HttpServletRequest request) {
        String userId = (String) SecurityContextHolder
                .getContext().getAuthentication().getPrincipal();
        String communityId = request
                .getRequestURI().split("/")[2];
        Optional<List<User>> optional = communityService
                .findCommunityAdminsById(communityId, null);

        if (optional.isPresent()) {
            List<User> communityAdmins = optional.get();
            User admin = communityAdmins
                    .stream()
                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))
                    .findFirst()
                    .orElse(null);

            return admin != null;
        }

        return false;
    }
}