package com.myhome.security;

import com.myhome.domain.User;
import com.myhome.services.CommunityService;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * is used to authorize access to certain resources in a web application. It filters
 * incoming requests based on user authentication and community admin roles. The
 * filter checks if the user is an administrator of a specific community by matching
 * the request URI against a pattern, and if the user is not an admin, it returns an
 * unauthorized response.
 */
public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {
    private final CommunityService communityService;
    private final String uuidPattern = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
    private final Pattern addAdminRequestPattern = Pattern.compile("/communities/" + uuidPattern + "/admins");


    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,
                                        CommunityService communityService) {
        super(authenticationManager);
        this.communityService = communityService;
    }

    /**
     * determines if the request is for an admin page and checks if the user is authorized
     * to access it. If not, it sets the status code to HTTP 401 Unauthorized and returns.
     * Otherwise, it delegates to the superclass's `doFilterInternal` method.
     * 
     * @param request HTTP request that is being filtered by the Servlet Filter.
     * 
     * 	- `getRequestURI()` returns the request URI (the portion after the domain name
     * in the URL).
     * 	- `matcher` is an instance of `Matcher`, which represents a pattern to match
     * against the request URI.
     * 	- `find()` method of the matcher returns `true` if the pattern matches, and `false`
     * otherwise.
     * 	- `isUserCommunityAdmin(request)` is a method that checks whether the user has
     * administrative privileges for the community, based on the request parameters. If
     * not authorized, the response status code is set to `HttpServletResponse.SC_UNAUTHORIZED`.
     * 
     * Other properties of `request` include:
     * 
     * 	- `getMethod()` returns the HTTP method (e.g., GET, POST, PUT, DELETE)
     * 	- `getPathInfo()` returns the pathinfo (the portion after the last forward slash
     * in the URL)
     * 	- `getQueryString()` returns the query string (the portion after the question
     * mark in the URL)
     * 	- `getRemoteHost()` returns the remote host name (the IP address or domain name
     * of the client)
     * 	- `getRemotePort()` returns the remote port number (the port number of the client)
     * 	- `getLocalName()` returns the local host name (the hostname of the server)
     * 	- `getLocalPort()` returns the local port number (the port number of the server)
     * 
     * These properties can be used to further process or validate the request.
     * 
     * @param response HTTP response object that is being filtered.
     * 
     * 	- `request`: The incoming HTTP request object, which contains information about
     * the client's request.
     * 	- `response`: The output HTTP response object, which is used to send a response
     * back to the client. It has various attributes such as status code, headers, and body.
     * 	- `chain`: The next filter chain component to be executed, which allows for further
     * filtering or modification of the incoming request.
     * 
     * @param chain FilterChain that contains the current filter and allows it to execute
     * its inner filters.
     * 
     * 	- `HttpServletRequest request`: The incoming HTTP request to be processed.
     * 	- `HttpServletResponse response`: The output HTTP response generated by the filter.
     * 	- `FilterChain chain`: An instance of `FilterChain`, which represents the chain
     * of filters that can be applied to the incoming request.
     * 	- `isUserCommunityAdmin(request)`: A method that checks whether the current user
     * is an administrator of a community, which affects whether the filter should allow
     * or block access to certain resources.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                    FilterChain chain) throws IOException, ServletException {

        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());

        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            return;
        }

        super.doFilterInternal(request, response, chain);
    }

    /**
     * determines if a user is an administrator of a community based on the community ID
     * and the user's principal ID.
     * 
     * @param request HTTP request object containing information about the current request,
     * which is used to extract the community ID from the request URL.
     * 
     * 	- `request`: An instance of the `HttpServletRequest` class, which contains
     * information about the HTTP request received by the server. The request can be
     * deserialized and accessed through various attributes such as `getMethod()`,
     * `getParameter()`, `getHeader()`, `getRemoteAddr()`, and others.
     * 
     * @returns a boolean value indicating whether the current user is a community
     * administrator for the specified community.
     */
    private boolean isUserCommunityAdmin(HttpServletRequest request) {
        String userId = (String) SecurityContextHolder
                .getContext().getAuthentication().getPrincipal();
        String communityId = request
                .getRequestURI().split("/")[2];
        Optional<List<User>> optional = communityService
                .findCommunityAdminsById(communityId, null);

        if (optional.isPresent()) {
            List<User> communityAdmins = optional.get();
            User admin = communityAdmins
                    .stream()
                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))
                    .findFirst()
                    .orElse(null);

            return admin != null;
        }

        return false;
    }
}