{"name":"UserControllerIntegrationTest.java","path":"integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java","content":{"structured":{"description":"An integration test for a user controller in a Spring Boot application. The test creates a new user through the registration path, checks the response status code, and verifies that the created user is stored in the database with matching values as those provided in the request body.","items":[{"id":"170b3566-70dc-fbbc-6d43-38c988e7f906","ancestors":[],"type":"function","description":"tests the successful sign-up of a new user through the API registration path. The test creates a request body with name, email, and password and posts it to the registration URL, verifying that the response status code is HTTP 201 Created and the returned user ID refers to a user stored in the database, with corresponding fields matching the input values.","name":"UserControllerIntegrationTest","code":"@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}","location":{"start":23,"insert":23,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53},{"id":"906fe314-e82f-c68e-4e4e-fdd087abff99","ancestors":["170b3566-70dc-fbbc-6d43-38c988e7f906"],"type":"function","description":"tests the successful creation of a new user through the REST API, verifying the response status code, the created user's details, and the corresponding values in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    \n    // When a request is made\n    ResponseEntity<User> responseEntity = testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n    \n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n    \n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n    \n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n","description":""},"name":"shouldSignUpSuccessful","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2,"comment":null},"item_type":"method","length":31}]}}}