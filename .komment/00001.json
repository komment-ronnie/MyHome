[
  {
    "name": "SchedulePaymentResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/SchedulePaymentResponse.java",
    "content": {
      "structured": {
        "description": "A class `SchedulePaymentResponse` with properties for payment ID, charge amount, payment type, description, recurrence status, due date, admin and member IDs. It utilizes Lombok frameworks `@AllArgsConstructor`, `@NoArgsConstructor`, and `@Data` annotations to generate getters and setters automatically.",
        "items": [
          {
            "id": "c8ff1dd6-4c4e-8ab8-fc45-ff3fda43a7d0",
            "ancestors": [],
            "type": "function",
            "description": "in the Java file is an immutable response class representing a payment schedule with various attributes, including payment ID, charge amount, and due date.\nFields:\n\t- paymentId (String): represents a unique identifier for a scheduled payment.\n\t- charge (BigDecimal): represents a monetary value.\n\t- type (String): represents a string value indicating the type of payment being scheduled, such as \"one-time\" or \"recurring\".\n\t- description (String): represents a brief textual explanation of the payment's purpose or context.\n\t- recurring (boolean): in the SchedulePaymentResponse class indicates whether the payment is recurring or not.\n\t- dueDate (String): represents the date on which a payment is due.\n\t- adminId (String): represents an identifier for the administrator who manages the payment schedule.\n\t- memberId (String): represents a unique identifier for a specific member within the context of the SchedulePaymentResponse class.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a unique identifier for a scheduled payment."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a monetary value."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a string value indicating the type of payment being scheduled, such as \"one-time\" or \"recurring\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a brief textual explanation of the payment's purpose or context."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "in the SchedulePaymentResponse class indicates whether the payment is recurring or not."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents the date on which a payment is due."
              },
              {
                "name": "adminId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents an identifier for the administrator who manages the payment schedule."
              },
              {
                "name": "memberId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SchedulePaymentResponse",
                "description": "represents a unique identifier for a specific member within the context of the SchedulePaymentResponse class."
              }
            ],
            "name": "SchedulePaymentResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class SchedulePaymentResponse {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private String adminId;\n  private String memberId;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "Amenity.java",
    "path": "service/src/main/java/com/myhome/domain/Amenity.java",
    "content": {
      "structured": {
        "description": "An entity called `Amenity` and its associated domain objects, including a `Community`, `CommunityHouse`, and `AmenityBookingItem`. The `Amenity` class has attributes for `amenityId`, `name`, `description`, and `price`, and it defines relationships with `Community` and `CommunityHouse` using Java's `@ManyToOne` annotation. Additionally, it defines a one-to-many relationship with `AmenityBookingItem` using `@OneToMany`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "37088842-5a1b-febf-4647-3d25f288da0f",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity that can be booked by guests at a community or community house, with fields for its unique ID, name, description, price, and relationships to the community and community house.\nFields:\n\t- amenityId (String): represents a unique identifier for an amenity.\n\t- name (String): in the Amenity class represents a string value representing the name of an amenity.\n\t- description (String): in the Amenity class represents a brief summary of the amenity's features or characteristics.\n\t- price (BigDecimal): represents a decimal value that represents the cost of an amenity.\n\t- community (Community): in the Amenity class represents an instance of the Community entity.\n\t- communityHouse (CommunityHouse): represents a reference to a CommunityHouse object within the Amenity entity.\n\t- bookingItems (Set<AmenityBookingItem>): is a set of AmenityBookingItem objects associated with each amenity instance.\n\n",
            "fields": [
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a unique identifier for an amenity."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "in the Amenity class represents a string value representing the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "in the Amenity class represents a brief summary of the amenity's features or characteristics."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a decimal value that represents the cost of an amenity."
              },
              {
                "name": "community",
                "type_name": "Community",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "in the Amenity class represents an instance of the Community entity."
              },
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "value": null,
                "constant": false,
                "class_name": "Amenity",
                "description": "represents a reference to a CommunityHouse object within the Amenity entity."
              },
              {
                "name": "bookingItems",
                "type_name": "Set<AmenityBookingItem>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Amenity",
                "description": "is a set of AmenityBookingItem objects associated with each amenity instance."
              }
            ],
            "name": "Amenity",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Amenity.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Amenity.bookingItems\",\n        attributeNodes = {\n            @NamedAttributeNode(\"bookingItems\"),\n        }\n    )\n})\n\npublic class Amenity extends BaseEntity {\n  @Column(nullable = false, unique = true)\n  private String amenityId;\n  @Column(nullable = false)\n  private String name;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private BigDecimal price;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @ManyToOne\n  private CommunityHouse communityHouse;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"amenity\")\n  private Set<AmenityBookingItem> bookingItems = new HashSet<>();\n}",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 38
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItem.java",
    "path": "service/src/main/java/com/myhome/domain/AmenityBookingItem.java",
    "content": {
      "structured": {
        "description": "A class `AmenityBookingItem` that represents an amenity booking item in a database. The class has attributes for the item's unique identifier, amenity associated with it, booking start and end dates, and user who made the booking. It also defines relationships with other classes using `@ManyToOne` annotation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.AmenityBookingItem Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.AmenityBookingItem</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-30 5.5,-30 5.5,0 173.5,0 173.5,-30\"/>\n<text text-anchor=\"start\" x=\"13.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "f66c3326-f78b-9e9b-4248-de4463360d09",
            "ancestors": [],
            "type": "function",
            "description": "represents a booking item for an amenity, including the amenity ID, booking start and end dates, and the user who made the booking.\nFields:\n\t- amenityBookingItemId (String): represents a unique identifier for each amenity booking item in the database.\n\t- amenity (Amenity): in the AmenityBookingItem class represents an amenity that has been booked for a specific period of time by a particular user.\n\t- bookingStartDate (LocalDateTime): represents the starting date and time of an amenity booking.\n\t- bookingEndDate (LocalDateTime): represents the end time of a booking for an amenity.\n\t- bookingUser (User): represents the user who made the booking for the amenity listed in the AmenityBookingItem entity.\n\n",
            "fields": [
              {
                "name": "amenityBookingItemId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents a unique identifier for each amenity booking item in the database."
              },
              {
                "name": "amenity",
                "type_name": "Amenity",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "in the AmenityBookingItem class represents an amenity that has been booked for a specific period of time by a particular user."
              },
              {
                "name": "bookingStartDate",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the starting date and time of an amenity booking."
              },
              {
                "name": "bookingEndDate",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the end time of a booking for an amenity."
              },
              {
                "name": "bookingUser",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "AmenityBookingItem",
                "description": "represents the user who made the booking for the amenity listed in the AmenityBookingItem entity."
              }
            ],
            "name": "AmenityBookingItem",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@EqualsAndHashCode(callSuper = false, of = {\"amenityBookingItemId\"})\n@Getter\n@Setter\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"AmenityBookingItem.amenity\",\n        attributeNodes = {\n            @NamedAttributeNode(\"amenity\"),\n        }),\n    @NamedEntityGraph(\n        name = \"AmenityBookingItem.bookingUser\",\n        attributeNodes = {\n            @NamedAttributeNode(\"bookingUser\"),\n        })\n})\n\npublic class AmenityBookingItem extends BaseEntity {\n\n  @Column(nullable = false, unique = true)\n  private String amenityBookingItemId;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Amenity amenity;\n  @Column(nullable = false)\n  private LocalDateTime bookingStartDate;\n  @Column\n  private LocalDateTime bookingEndDate;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private User bookingUser;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 33
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationData.java",
    "path": "service/src/main/java/com/myhome/domain/AuthenticationData.java",
    "content": {
      "structured": {
        "description": "A class named `AuthenticationData` that contains two instance fields: `jwtToken` and `userId`. The `lombok.Getter` annotation is used on both fields to expose them as getters, while the `@RequiredArgsConstructor` annotation is used to require the constructor to take all arguments.",
        "items": [
          {
            "id": "f45fdd1e-76f5-a4ae-3442-f4792fbad167",
            "ancestors": [],
            "type": "function",
            "description": "represents a data structure for storing JWT token and user ID for authentication purposes.\nFields:\n\t- jwtToken (String): represents a unique identifier for a user's authentication credentials in the AuthenticationData class.\n\t- userId (String): in AuthenticationData represents a unique identifier for a user.\n\n",
            "fields": [
              {
                "name": "jwtToken",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AuthenticationData",
                "description": "represents a unique identifier for a user's authentication credentials in the AuthenticationData class."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AuthenticationData",
                "description": "in AuthenticationData represents a unique identifier for a user."
              }
            ],
            "name": "AuthenticationData",
            "code": "@Getter\n@RequiredArgsConstructor\npublic class AuthenticationData {\n  private final String jwtToken;\n  private final String userId;\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "service/src/main/java/com/myhome/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base class for all JPA entities, providing an auto-generated ID and implementing equals and hashCode methods. The class also uses Lombok annotations for constructor injection and other utilities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "1f7a0bec-a110-79a5-cc48-0ee8b14267c8",
            "ancestors": [],
            "type": "function",
            "description": "is a JPA entity class with an @Id field annotated with @GeneratedValue(strategy = GenerationType.IDENTITY), providing a unique identifier for entities.\nFields:\n\t- id (Long): in the BaseEntity class represents a unique identifier for each entity instance.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "BaseEntity",
                "description": "in the BaseEntity class represents a unique identifier for each entity instance."
              }
            ],
            "name": "BaseEntity",
            "code": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\n@EqualsAndHashCode(callSuper = false)\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 28,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "Community.java",
    "path": "service/src/main/java/com/myhome/domain/Community.java",
    "content": {
      "structured": {
        "description": "An entity called `Community` that represents a valid user in a service. It has several fields and relationships with other entities, including `User`, `CommunityHouse`, `Amenity`, and `NamedEntityGraph`. The code also defines various getters and setters for these fields, as well as annotations for things like serialization, equals and hashcode, and named entity graphs.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d61e8972-ce30-94a9-dc47-6eb12fdd0cea",
            "ancestors": [],
            "type": "function",
            "description": "in Java represents a valid user in the service with various associations to other entities, including users, houses, and amenities.\nFields:\n\t- admins (Set<User>): of the Community class represents a set of User objects related to the community through their association with the community as admins.\n\t- houses (Set<CommunityHouse>): in the Community class represents a set of houses associated with the community, which can be accessed through the mappedBy attribute \"houses\".\n\t- name (String): in the Community entity represents a unique identifier for a community within a specific district.\n\t- communityId (String): represents an identifier for a specific community within the application's domain.\n\t- district (String): is a string representing a geographical area where the community is located.\n\t- amenities (Set<Amenity>): contains a set of Amenity objects related to the Community entity through the mappedBy attribute in the OneToMany annotation, with orphanRemoval = true indicating that the Set is also used for removing orphans.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<User>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "of the Community class represents a set of User objects related to the community through their association with the community as admins."
              },
              {
                "name": "houses",
                "type_name": "Set<CommunityHouse>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "in the Community class represents a set of houses associated with the community, which can be accessed through the mappedBy attribute \"houses\"."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "in the Community entity represents a unique identifier for a community within a specific district."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "represents an identifier for a specific community within the application's domain."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "is a string representing a geographical area where the community is located."
              },
              {
                "name": "amenities",
                "type_name": "Set<Amenity>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "contains a set of Amenity objects related to the Community entity through the mappedBy attribute in the OneToMany annotation, with orphanRemoval = true indicating that the Set is also used for removing orphans."
              }
            ],
            "name": "Community",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"communityId\", \"name\", \"district\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Community.amenities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"amenities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.admins\",\n        attributeNodes = {\n            @NamedAttributeNode(\"admins\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.houses\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houses\"),\n        }\n    )\n})\npublic class Community extends BaseEntity {\n  @ToString.Exclude\n  @ManyToMany(fetch = FetchType.LAZY)\n  private Set<User> admins = new HashSet<>();\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<CommunityHouse> houses = new HashSet<>();\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String communityId;\n  @Column(nullable = false)\n  private String district;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"community\", orphanRemoval = true)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 35,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 43
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouse.java",
    "path": "service/src/main/java/com/myhome/domain/CommunityHouse.java",
    "content": {
      "structured": {
        "description": "A `CommunityHouse` entity with fields for community, name, houseId, and various relationships with other entities, including `HouseMembers` and `Amenities`. The code also utilizes various annotations, such as `@Entity`, `@AllArgsConstructor`, `@NoArgsConstructor`, `@Getter`, `@Setter`, `@EqualsAndHashCode`, and `@NamedEntityGraphs`, to specify the entity's structure and relationships.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "75197dc5-b284-26a6-0846-d4b038e1209a",
            "ancestors": [],
            "type": "function",
            "description": "represents a house within a community and contains fields for the house ID, name, and community, as well as relationships with HouseMembers and Amenities.\nFields:\n\t- community (Community): represents an association between a CommunityHouse entity and a single Community instance.\n\t- name (String): in the CommunityHouse class represents a unique identifier for a specific community house.\n\t- houseId (String): represents a unique identifier for each CommunityHouse instance in the system.\n\t- houseMembers (Set<HouseMember>): in the CommunityHouse class represents a set of objects that are related to a particular community house through a many-to-one relationship with the HouseMember entity.\n\t- amenities (Set<Amenity>): in the CommunityHouse class contains a set of Amenity objects related to the house.\n\n",
            "fields": [
              {
                "name": "community",
                "type_name": "Community",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "represents an association between a CommunityHouse entity and a single Community instance."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents a unique identifier for a specific community house."
              },
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "represents a unique identifier for each CommunityHouse instance in the system."
              },
              {
                "name": "houseMembers",
                "type_name": "Set<HouseMember>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class represents a set of objects that are related to a particular community house through a many-to-one relationship with the HouseMember entity."
              },
              {
                "name": "amenities",
                "type_name": "Set<Amenity>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "CommunityHouse",
                "description": "in the CommunityHouse class contains a set of Amenity objects related to the house."
              }
            ],
            "name": "CommunityHouse",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@EqualsAndHashCode(of = {\"houseId\", \"name\"}, callSuper = false)\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"CommunityHouse.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"CommunityHouse.houseMembers\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houseMembers\"),\n        }\n    )\n})\npublic class CommunityHouse extends BaseEntity {\n  @With\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @With\n  @Column(nullable = false)\n  private String name;\n  @With\n  @Column(unique = true, nullable = false)\n  private String houseId;\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<HouseMember> houseMembers = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 35
          }
        ]
      }
    }
  },
  {
    "name": "HouseMember.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMember.java",
    "content": {
      "structured": {
        "description": "an entity called `HouseMember` that represents a member of a house. The code uses the `@Entity` annotation to indicate that it is a persistent object, and the `AllArgsConstructor`, `NoArgsConstructor`, `Data`, and `EqualsAndHashCode` annotations to specify how the class should be constructed and compared. The class has three columns: `memberId`, `name`, and `communityHouse`. The `@With` annotation indicates that these columns are required, and the `@Column` annotation specifies their names and data types. The class also has a many-to-one relationship with the `HouseMemberDocument` entity, which is represented by the `@OneToOne` annotation with an `orphanRemoval` parameter set to `true`. Finally, the class has a one-to-one relationship with the `CommunityHouse` entity, represented by the `@ManyToOne` annotation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "5081942e-53f0-be8e-0540-217b5834e1e2",
            "ancestors": [],
            "type": "function",
            "description": "represents an individual member of a house with unique identification and relationships to other entities such as documents, communities, and members.\nFields:\n\t- memberId (String): in the HouseMember class represents a unique identifier for each member of a community house.\n\t- houseMemberDocument (HouseMemberDocument): represents a relationship between a House Member entity and a House Member Document entity, allowing for the association of a member with a specific document.\n\t- name (String): in the HouseMember class represents a string value that identifies an individual member of a community house.\n\t- communityHouse (CommunityHouse): in the HouseMember class represents a reference to an instance of the CommunityHouse class, which is likely to be a related or associated entity in the domain model.\n\n",
            "fields": [
              {
                "name": "memberId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "in the HouseMember class represents a unique identifier for each member of a community house."
              },
              {
                "name": "houseMemberDocument",
                "type_name": "HouseMemberDocument",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "represents a relationship between a House Member entity and a House Member Document entity, allowing for the association of a member with a specific document."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "in the HouseMember class represents a string value that identifies an individual member of a community house."
              },
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "in the HouseMember class represents a reference to an instance of the CommunityHouse class, which is likely to be a related or associated entity in the domain model."
              }
            ],
            "name": "HouseMember",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, exclude = \"communityHouse\")\npublic class HouseMember extends BaseEntity {\n\n  @With\n  @Column(nullable = false, unique = true)\n  private String memberId;\n\n  @OneToOne(orphanRemoval = true)\n  @JoinColumn(name = \"document_id\")\n  private HouseMemberDocument houseMemberDocument;\n\n  @With\n  @Column(nullable = false)\n  private String name;\n\n  @ManyToOne\n  private CommunityHouse communityHouse;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 22
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocument.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMemberDocument.java",
    "content": {
      "structured": {
        "description": "An entity class named `HouseMemberDocument` that extends the `BaseEntity` class. The class has two columns: `documentFilename` and `documentContent`, which is a Lob (Large Object) column. The `documentFilename` column is unique, and the `documentContent` column is a byte array of zero size. The code also uses Lombok libraries for constructors and getters/setters.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "967728fc-7241-39be-674a-1092c2f0b174",
            "ancestors": [],
            "type": "function",
            "description": "is a Java entity class with two fields: documentFilename and documentContent, both of which are persisted to the database using JPA (Java Persistence API).\nFields:\n\t- documentFilename (String): in the HouseMemberDocument class represents a unique name for a file containing document content, which is stored as a binary large object (Lob) in the byte array format.\n\t- documentContent (byte[]): in the HouseMemberDocument class is an array of bytes with a default size of 0, indicating that it may contain any type of data, including images, videos, or documents.\n\n",
            "fields": [
              {
                "name": "documentFilename",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMemberDocument",
                "description": "in the HouseMemberDocument class represents a unique name for a file containing document content, which is stored as a binary large object (Lob) in the byte array format."
              },
              {
                "name": "documentContent",
                "type_name": "byte[]",
                "value": "new byte[0]",
                "constant": false,
                "class_name": "HouseMemberDocument",
                "description": "in the HouseMemberDocument class is an array of bytes with a default size of 0, indicating that it may contain any type of data, including images, videos, or documents."
              }
            ],
            "name": "HouseMemberDocument",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(of = {\"documentFilename\"}, callSuper = false)\npublic class HouseMemberDocument extends BaseEntity {\n\n  @Column(unique = true)\n  private String documentFilename;\n\n  @Lob\n  @Column\n  private byte[] documentContent = new byte[0];\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 14
          }
        ]
      }
    }
  },
  {
    "name": "PasswordActionType.java",
    "path": "service/src/main/java/com/myhome/domain/PasswordActionType.java",
    "content": {
      "structured": {
        "description": "An enumeration type `PasswordActionType` with two values: `FORGOT` and `RESET`.",
        "items": []
      }
    }
  },
  {
    "name": "Payment.java",
    "path": "service/src/main/java/com/myhome/domain/Payment.java",
    "content": {
      "structured": {
        "description": "An entity class `Payment` representing a payment in a service. The class has fields for payment ID, charge amount, payment type, description, recurring status, and due date. It also has relationships with other entities, such as `User` and `HouseMember`, using the `@ManyToOne` annotation. The `Payment` class utilizes Jackson annotations for formatting dates and using lazy fetching.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4bd894dc-22a4-e28e-a442-e00ff0ee311b",
            "ancestors": [],
            "type": "function",
            "description": "represents a payment made by a user to their housing provider for various expenses, including electricity bills, house rent, and water charges.\nFields:\n\t- paymentId (String): represents a unique identifier for each payment transaction in the service.\n\t- charge (BigDecimal): in the Payment entity represents an amount of money to be paid by a user or member of a house, depending on the value assigned to the admin and member fields.\n\t- type (String): in the Payment entity represents a category of payment, such as \"electricity bill\" or \"house rent\".\n\t- description (String): in the Payment class represents a brief narrative or summary of the payment's purpose or context.\n\t- recurring (boolean): in the Payment entity indicates whether a payment is recurring or not, with a value of true for recurring and false for non-recurring payments.\n\t- dueDate (LocalDate): represents the date when the payment is expected to be made.\n\t- admin (User): in the Payment entity represents a user who manages or oversees payments made by the HouseMember associated with the payment.\n\t- member (HouseMember): in the Payment class represents an association between a payment and a member of a house.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents a unique identifier for each payment transaction in the service."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity represents an amount of money to be paid by a user or member of a house, depending on the value assigned to the admin and member fields."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity represents a category of payment, such as \"electricity bill\" or \"house rent\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents a brief narrative or summary of the payment's purpose or context."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity indicates whether a payment is recurring or not, with a value of true for recurring and false for non-recurring payments."
              },
              {
                "name": "dueDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "represents the date when the payment is expected to be made."
              },
              {
                "name": "admin",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment entity represents a user who manages or oversees payments made by the HouseMember associated with the payment."
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "value": null,
                "constant": false,
                "class_name": "Payment",
                "description": "in the Payment class represents an association between a payment and a member of a house."
              }
            ],
            "name": "Payment",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\n@Entity\npublic class Payment extends BaseEntity {\n  @Column(unique = true, nullable = false)\n  private String paymentId;\n  @Column(nullable = false)\n  private BigDecimal charge;\n  @Column(nullable = false)\n  private String type;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private boolean recurring;\n  @JsonFormat(pattern = \"yyyy-MM-dd\")\n  private LocalDate dueDate;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private User admin;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private HouseMember member;\n}",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 30,
                "end": 34
              }
            },
            "item_type": "class",
            "length": 23
          }
        ]
      }
    }
  },
  {
    "name": "SecurityToken.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityToken.java",
    "content": {
      "structured": {
        "description": "A SecurityToken class that represents a security token with various attributes and relationships. The class uses Lombok annotations for convenience and efficiency. The attributes include tokenType, token, creationDate, expiryDate, and isUsed, which are used to track the status of the token. Additionally, the class has a many-to-one relationship with a User object, representing the owner of the security token.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "5ace41c4-f132-35a3-f34e-2b214b32aef7",
            "ancestors": [],
            "type": "function",
            "description": "represents a security token with various attributes and relationships, including token type, token value, creation date, expiry date, and ownership by a user.\nFields:\n\t- tokenType (SecurityTokenType): represents an enumeration of SecurityTokenType enums used to identify the type of security token being represented by the SecurityToken class.\n\t- token (String): in the SecurityToken class is of type SecurityTokenType and represents the classification of the security token.\n\t- creationDate (LocalDate): represents the date when the security token was created.\n\t- expiryDate (LocalDate): represents the date after which the security token is no longer valid.\n\t- isUsed (boolean): in the SecurityToken class represents a boolean flag indicating whether the token has been used.\n\t- tokenOwner (User): represents a user who owns or has access to the security token in question.\n\n",
            "fields": [
              {
                "name": "tokenType",
                "type_name": "SecurityTokenType",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents an enumeration of SecurityTokenType enums used to identify the type of security token being represented by the SecurityToken class."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "in the SecurityToken class is of type SecurityTokenType and represents the classification of the security token."
              },
              {
                "name": "creationDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents the date when the security token was created."
              },
              {
                "name": "expiryDate",
                "type_name": "LocalDate",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents the date after which the security token is no longer valid."
              },
              {
                "name": "isUsed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "in the SecurityToken class represents a boolean flag indicating whether the token has been used."
              },
              {
                "name": "tokenOwner",
                "type_name": "User",
                "value": null,
                "constant": false,
                "class_name": "SecurityToken",
                "description": "represents a user who owns or has access to the security token in question."
              }
            ],
            "name": "SecurityToken",
            "code": "@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = {\"tokenOwner\"})\npublic class SecurityToken extends BaseEntity {\n  @Column(nullable = false)\n  @Enumerated(EnumType.STRING)\n  private SecurityTokenType tokenType;\n  @Column(nullable = false, unique = true)\n  private String token;\n  @Column(nullable = false)\n  private LocalDate creationDate;\n  @Column(nullable = false)\n  private LocalDate expiryDate;\n  private boolean isUsed;\n  @ManyToOne\n  private User tokenOwner;\n}",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenType.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityTokenType.java",
    "content": {
      "structured": {
        "description": "An enumeration class `SecurityTokenType` with two members: `RESET` and `EMAIL_CONFIRM`.",
        "items": []
      }
    }
  },
  {
    "name": "User.java",
    "path": "service/src/main/java/com/myhome/domain/User.java",
    "content": {
      "structured": {
        "description": "An entity called `User` that represents a valid user in a service. The `User` class has attributes such as `name`, `userId`, `email`, and `encryptedPassword`. It also has relationships with other entities, including `Communities` and `SecurityTokens`. The `User` class uses various Java packages, including Lombok, JPA, and Java Persistence API (JPA).",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "1c13aa69-af24-20b2-6142-bfdae0ac1952",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service and has attributes for name, userId, email, email confirmed, encrypted password, communities, and userTokens.\nFields:\n\t- name (String): represents a user's personal name.\n\t- userId (String): in the User class represents a unique identifier for each user in the system.\n\t- email (String): represents an identifier for a user's email address within the service.\n\t- emailConfirmed (boolean): indicates whether an email address associated with the user has been confirmed through a verification process.\n\t- encryptedPassword (String): in the User class stores an encrypted password for the user.\n\t- communities (Set<Community>): of the User class represents a set of Community objects associated with each user.\n\t- userTokens (Set<SecurityToken>): stores a set of SecurityToken objects associated with the User entity through the tokenOwner attribute.\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "represents a user's personal name."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class represents a unique identifier for each user in the system."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "represents an identifier for a user's email address within the service."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": "false",
                "constant": false,
                "class_name": "User",
                "description": "indicates whether an email address associated with the user has been confirmed through a verification process."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "in the User class stores an encrypted password for the user."
              },
              {
                "name": "communities",
                "type_name": "Set<Community>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "of the User class represents a set of Community objects associated with each user."
              },
              {
                "name": "userTokens",
                "type_name": "Set<SecurityToken>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "stores a set of SecurityToken objects associated with the User entity through the tokenOwner attribute."
              }
            ],
            "name": "User",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"userId\", \"email\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"User.communities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"communities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"User.userTokens\",\n        attributeNodes = {\n            @NamedAttributeNode(\"userTokens\"),\n        }\n    )\n})\npublic class User extends BaseEntity {\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String userId;\n  @Column(unique = true, nullable = false)\n  private String email;\n  @Column(nullable = false)\n  private boolean emailConfirmed = false;\n  @Column(nullable = false)\n  private String encryptedPassword;\n  @ManyToMany(mappedBy = \"admins\", fetch = FetchType.LAZY)\n  private Set<Community> communities = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = \"tokenOwner\")\n  private Set<SecurityToken> userTokens = new HashSet<>();\n}",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 39,
                "end": 42
              }
            },
            "item_type": "class",
            "length": 37
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItemRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityBookingItemRepository`, which extends the `JpaRepository` interface and provides additional methods for working with `AmenityBookingItem` objects in a Spring Data JPA environment. The interface defines two methods: `findByAmenityBookingItemId(String amenityBookingItemId)`, which returns an optional `AmenityBookingItem` object given its ID, and `Optional<AmenityBookingItem> findByAmenityBookingItemId(String amenityBookingItemId)`, which returns an optional `AmenityBookingItem` object.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.AmenityBookingItemRepository Pages: 1 -->\n<svg width=\"184pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 184.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.AmenityBookingItemRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"174.5,-30 1.5,-30 1.5,0 174.5,0 174.5,-30\"/>\n<text text-anchor=\"start\" x=\"9.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenityBookingItemRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"176,-96 0,-96 0,-66 176,-66 176,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; AmenityBooking</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Item, String &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88,-55.54C88,-46.96 88,-37.61 88,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.5,-55.8 88,-65.8 91.5,-55.8 84.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0f7760d3-b288-2fb0-394d-76ddac19dc66",
            "ancestors": [],
            "type": "function",
            "description": "extends JpaRepository and provides a method for finding an Optional<AmenityBookingItem> by amenityBookingItemId.",
            "name": "AmenityBookingItemRepository",
            "code": "public interface AmenityBookingItemRepository extends JpaRepository<AmenityBookingItem, String> {\n  Optional<AmenityBookingItem> findByAmenityBookingItemId(String amenityBookingItemId);\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "AmenityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "content": {
      "structured": {
        "description": "An AmenityRepository interface for accessing amenities in a Spring Data JPA environment. The repository offers several methods for locating amenities, including findByAmenityIdWithCommunity and findByAmenityId. These techniques make use of EntityGraph and Query annotations to define graph traversals and database queries.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4102aa70-5442-18a4-8941-59ec61384072",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and retrieving amenities based on their amenity ID, along with an optional community graph.",
            "name": "AmenityRepository",
            "code": "public interface AmenityRepository extends JpaRepository<Amenity, Long> {\n\n  @Query(\"from Amenity amenity where amenity.amenityId = :amenityId\")\n  @EntityGraph(value = \"Amenity.community\")\n  Optional<Amenity> findByAmenityIdWithCommunity(@Param(\"amenityId\") String amenityId);\n\n  Optional<Amenity> findByAmenityId(String amenityId);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityHouseRepository.java",
    "content": {
      "structured": {
        "description": "A repository interface for managing `CommunityHouse` entities in a Spring Data JPA environment. The interface provides various methods for querying and manipulating CommunityHouses, including finding specific CommunityHouses by ID, retrieving CommunityHouses with their members, and deleting CommunityHouses by ID. The code also utilizes the `EntityGraph` annotation to specify graph traversals for CommunityHouse entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "dcd50829-a707-6689-5c47-f7f658be6273",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with CommunityHouse objects, including finding individual CommunityHouses by houseId, and retrieving all CommunityHouses in a community by communityId.",
            "name": "CommunityHouseRepository",
            "code": "@Repository\npublic interface CommunityHouseRepository extends PagingAndSortingRepository<CommunityHouse, Long> {\n\n  Optional<CommunityHouse> findByHouseId(String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.community\")\n  Optional<CommunityHouse> findByHouseIdWithCommunity(@Param(\"houseId\") String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.houseMembers\")\n  Optional<CommunityHouse> findByHouseIdWithHouseMembers(@Param(\"houseId\") String houseId);\n\n  @EntityGraph(value = \"CommunityHouse.community\")\n  List<CommunityHouse> findAllByCommunity_CommunityId(String communityId, Pageable pageable);\n\n  void deleteByHouseId(String houseId);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 18
          }
        ]
      }
    }
  },
  {
    "name": "CommunityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityRepository.java",
    "content": {
      "structured": {
        "description": "A repository interface for managing communities in a Spring Data JPA project. The interface extends the `PagingAndSortingRepository` interface and provides additional methods for querying communities based on their community ID. These methods include finding a specific community by ID, finding all communities with a given ID and associated houses, admins, or amenities, and checking if a community exists with a given ID. The code also utilizes the `EntityGraph` annotation to specify the graph structure for each community entity.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9201528b-b6c2-9eb1-5d4f-4e34e9478acd",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of methods for interacting with Community entities in a Spring Data JPA environment, including finding specific communities by communityId, and querying for communities with houses, admins, or amenities.",
            "name": "CommunityRepository",
            "code": "@Repository\npublic interface CommunityRepository extends PagingAndSortingRepository<Community, Long> {\n\n  Optional<Community> findByCommunityId(String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.houses\")\n  Optional<Community> findByCommunityIdWithHouses(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.admins\")\n  Optional<Community> findByCommunityIdWithAdmins(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.amenities\")\n  Optional<Community> findByCommunityIdWithAmenities(@Param(\"communityId\") String communityId);\n\n  boolean existsByCommunityId(String communityId);\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberDocumentRepository.java",
    "content": {
      "structured": {
        "description": "An interface called `HouseMemberDocumentRepository`, which is a Spring Data JPA repository for handling House Member Documents. The interface extends the `JpaRepository` class and specifies the entity type and ID column for the documents.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberDocumentRepository Pages: 1 -->\n<svg width=\"199pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 199.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberDocumentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"191,-30 0,-30 0,0 191,0 191,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberDocumentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-96 12,-96 12,-66 179,-66 179,-96\"/>\n<text text-anchor=\"start\" x=\"20\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; HouseMember</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document, Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95.5,-55.54C95.5,-46.96 95.5,-37.61 95.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"92,-55.8 95.5,-65.8 99,-55.8 92,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "a8261058-1653-2ab1-ba40-6cf5c2ef099c",
            "ancestors": [],
            "type": "function",
            "description": "defines a JPA repository for managing HouseMemberDocument objects using Spring Data JPA.",
            "name": "HouseMemberDocumentRepository",
            "code": "public interface HouseMemberDocumentRepository extends JpaRepository<HouseMemberDocument, Long> {\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberRepository.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberRepository` for managing HouseMembers in a Spring Data repository. The interface provides methods for retrieving and manipulating HouseMembers, including finding members by ID, listing all members in a pageable manner, and listing admins who are members of a specific community.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberRepository Pages: 1 -->\n<svg width=\"185pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 185.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"162.5,-30 14.5,-30 14.5,0 162.5,0 162.5,-30\"/>\n<text text-anchor=\"start\" x=\"22.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"177,-96 0,-96 0,-66 177,-66 177,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CrudRepository&lt; HouseMember,</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88.5,-55.54C88.5,-46.96 88.5,-37.61 88.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85,-55.8 88.5,-65.8 92,-55.8 85,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "156300e2-ba9c-5e8c-9e47-ce36cd363d7c",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the HouseMember entity in a Spring Data repository context.",
            "name": "HouseMemberRepository",
            "code": "public interface HouseMemberRepository extends CrudRepository<HouseMember, Long> {\n  Optional<HouseMember> findByMemberId(String memberId);\n\n  List<HouseMember> findAllByCommunityHouse_HouseId(String houseId, Pageable pageable);\n\n  List<HouseMember> findAllByCommunityHouse_Community_Admins_UserId(String userId,\n      Pageable pageable);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "PaymentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/PaymentRepository.java",
    "content": {
      "structured": {
        "description": "An interface called PaymentRepository that extends the JpaRepository interface from Spring Data JPA. It provides two methods: findByPaymentId, which returns an optional payment object based on a given payment ID; and deleteByPaymentId, which deletes a payment object based on its ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.PaymentRepository Pages: 1 -->\n<svg width=\"156pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 156.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.PaymentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"148,-30 0,-30 0,0 148,0 148,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-96 3.5,-96 3.5,-66 144.5,-66 144.5,-96\"/>\n<text text-anchor=\"start\" x=\"11.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; Payment,</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M74,-55.54C74,-46.96 74,-37.61 74,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"70.5,-55.8 74,-65.8 77.5,-55.8 70.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0b064086-9397-88b1-6441-a208b3477210",
            "ancestors": [],
            "type": "function",
            "description": "extends JpaRepository and provides two methods for interacting with payments: findByPaymentId and deleteByPaymentId.",
            "name": "PaymentRepository",
            "code": "public interface PaymentRepository extends JpaRepository<Payment, Long> {\n  Optional<Payment> findByPaymentId(String paymentId);\n\n  void deleteByPaymentId(String paymentId);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/SecurityTokenRepository.java",
    "content": {
      "structured": {
        "description": "An interface SecurityTokenRepository, which extends the JpaRepository interface provided by Spring Data JPA. It specifies the domain class SecurityToken and the primary key column id for mapping database tables. The interface defines the standard CRUD (Create, Read, Update, Delete) operations on the SecurityToken entity, such as finding all SecurityTokens, finding a single SecurityToken by id, creating a new SecurityToken, updating an existing SecurityToken, and deleting a SecurityToken.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.SecurityTokenRepository Pages: 1 -->\n<svg width=\"174pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 174.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.SecurityTokenRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"157,-30 9,-30 9,0 157,0 157,-30\"/>\n<text text-anchor=\"start\" x=\"17\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SecurityTokenRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"166,-96 0,-96 0,-66 166,-66 166,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; SecurityToken,</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M83,-55.54C83,-46.96 83,-37.61 83,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"79.5,-55.8 83,-65.8 86.5,-55.8 79.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "70fb7680-806a-819b-2a4b-db0955df63a2",
            "ancestors": [],
            "type": "function",
            "description": "extends JpaRepository and is responsible for managing SecurityTokens in a database using Spring Data JPA.",
            "name": "SecurityTokenRepository",
            "code": "public interface SecurityTokenRepository extends JpaRepository<SecurityToken, Long> {\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "UserRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/UserRepository.java",
    "content": {
      "structured": {
        "description": "An interface called UserRepository, which extends the JpaRepository interface from Spring Data. It provides several methods for interacting with a User entity in a database, including finding a user by email or user ID, finding a user's communities or tokens, and listing all users in a community with pagination. The code uses packages from Spring Data, such as EntityGraph and Query, to define the repository methods and interact with the database.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "1e8de814-1113-99ac-424d-bf5daf0c06f1",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for retrieving and manipulating users in a Spring Data JPA repository context.",
            "name": "UserRepository",
            "code": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n  User findByEmail(String email);\n\n  Optional<User> findByUserId(String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.communities\")\n  Optional<User> findByUserIdWithCommunities(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByUserIdWithTokens(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.email = :email\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByEmailWithTokens(@Param(\"email\") String email);\n\n  List<User> findAllByCommunities_CommunityId(String communityId, Pageable pageable);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "AppUserDetailsService.java",
    "path": "service/src/main/java/com/myhome/security/AppUserDetailsService.java",
    "content": {
      "structured": {
        "description": "An custom implementation of Spring Security's `UserDetailsService`, which loads user details from a database using a `UserRepository` and maps the results to a `UserDto` object using a `UserMapper`. The `loadUserByUsername()` method throws a `UsernameNotFoundException` if the user is not found in the database, while the `getUserDetailsByUsername()` method returns a `UserDto` object representing the user.",
        "items": [
          {
            "id": "7ba8476b-c0be-ca8c-c340-3512479dd0c5",
            "ancestors": [],
            "type": "function",
            "description": "is a custom implementation of Spring Security's UserDetailsService interface. It retrieves user details from a repository and maps them to a UserDto object using a mapper. The loadUserByUsername method loads a user by username and returns a UserDetails object, while the getUserDetailsByUsername method returns a UserDto object for the given username.",
            "name": "AppUserDetailsService",
            "code": "@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 31
          },
          {
            "id": "a61a6866-3d33-7797-d94c-290c08517a8b",
            "ancestors": [
              "7ba8476b-c0be-ca8c-c340-3512479dd0c5"
            ],
            "type": "function",
            "description": "loads a user by their username and returns a `User` object with relevant details.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are being loaded.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "User",
              "description": "a `UserDetails` object representing a user with various attributes and authentication capabilities.\n\n* The first element is an instance of `com.myhome.domain.User`.\n* The `email` field of the user object is the username passed in the function.\n* The `encryptedPassword` field represents the encrypted password for the user.\n* The fifth element, `true`, indicates that the user is activated.\n* The sixth element, `true`, indicates that the user is confirmed.\n* The seventh element, `true`, indicates that the user is locked.\n* The eighth element, `Collections.emptyList()`, represents an empty list of roles associated with the user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class UserDetailsServiceExample {\n  public static void main(String[] args) {\n    AppUserDetailsService userDetailsService = new AppUserDetailsService();\n    String username = \"username\";\n    UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n  }\n}\n",
              "description": ""
            },
            "name": "loadUserByUsername",
            "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "5c151c1e-272b-61bd-4141-35b70b766149",
            "ancestors": [
              "7ba8476b-c0be-ca8c-c340-3512479dd0c5"
            ],
            "type": "function",
            "description": "retrieves a user's details from the repository and maps them to a `UserDto` object using a mapper.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the user details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the details of the user with the specified username.\n\n* The function returns a `UserDto` object representing the user details.\n* The `user` variable is of type `com.myhome.domain.User`, which contains information about the user, such as their email and name.\n* The `userMapper` is responsible for mapping the `User` object to the `UserDto` object, which provides a more convenient and consumable representation of the user data.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n  AppUserDetailsService userDetailsService = new AppUserDetailsService();\n  UserDto userDto = userDetailsService.getUserDetailsByUsername(\"johndoe@email.com\");\n}\n",
              "description": ""
            },
            "name": "getUserDetailsByUsername",
            "code": "public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom authorization filter called CommunityAuthorizationFilter that extends the BasicAuthenticationFilter class from Spring Security. The filter checks if the user is an admin of a specific community based on a UUID pattern in the request URL, and redirects the user to the unauthorized page if they are not. The filter also handles the authentication of the user through the superclass's doFilterInternal method. Additionally, it includes a private method called isUserCommunityAdmin that checks if the user is an admin of a specific community by querying the CommunityService class and retrieving the list of community admins.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed",
            "ancestors": [],
            "type": "function",
            "description": "is used to authorize access to certain resources in a web application. It filters incoming requests based on user authentication and community admin roles. The filter checks if the user is an administrator of a specific community by matching the request URI against a pattern, and if the user is not an admin, it returns an unauthorized response.",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "37fb3231-e5ef-c4b1-b947-cdfd7336290b",
            "ancestors": [
              "7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed"
            ],
            "type": "function",
            "description": "determines if the request is for an admin page and checks if the user is authorized to access it. If not, it sets the status code to HTTP 401 Unauthorized and returns. Otherwise, it delegates to the superclass's `doFilterInternal` method.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that is being filtered by the Servlet Filter.\n\n* `getRequestURI()` returns the request URI (the portion after the domain name in the URL).\n* `matcher` is an instance of `Matcher`, which represents a pattern to match against the request URI.\n* `find()` method of the matcher returns `true` if the pattern matches, and `false` otherwise.\n* `isUserCommunityAdmin(request)` is a method that checks whether the user has administrative privileges for the community, based on the request parameters. If not authorized, the response status code is set to `HttpServletResponse.SC_UNAUTHORIZED`.\n\nOther properties of `request` include:\n\n* `getMethod()` returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n* `getPathInfo()` returns the pathinfo (the portion after the last forward slash in the URL)\n* `getQueryString()` returns the query string (the portion after the question mark in the URL)\n* `getRemoteHost()` returns the remote host name (the IP address or domain name of the client)\n* `getRemotePort()` returns the remote port number (the port number of the client)\n* `getLocalName()` returns the local host name (the hostname of the server)\n* `getLocalPort()` returns the local port number (the port number of the server)\n\nThese properties can be used to further process or validate the request.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that is being filtered.\n\n* `request`: The incoming HTTP request object, which contains information about the client's request.\n* `response`: The output HTTP response object, which is used to send a response back to the client. It has various attributes such as status code, headers, and body.\n* `chain`: The next filter chain component to be executed, which allows for further filtering or modification of the incoming request.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "FilterChain that contains the current filter and allows it to execute its inner filters.\n\n* `HttpServletRequest request`: The incoming HTTP request to be processed.\n* `HttpServletResponse response`: The output HTTP response generated by the filter.\n* `FilterChain chain`: An instance of `FilterChain`, which represents the chain of filters that can be applied to the incoming request.\n* `isUserCommunityAdmin(request)`: A method that checks whether the current user is an administrator of a community, which affects whether the filter should allow or block access to certain resources.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n        // check if the request's URL matches a community add admin request pattern\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            // set response status to unauthorized and return if user is not a community admin\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "7ee0fd5b-60fb-fea7-2a40-8059ef3e3f3f",
            "ancestors": [
              "7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed"
            ],
            "type": "function",
            "description": "determines if a user is an administrator of a community based on the community ID and the user's principal ID.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object containing information about the current request, which is used to extract the community ID from the request URL.\n\n* `request`: An instance of the `HttpServletRequest` class, which contains information about the HTTP request received by the server. The request can be deserialized and accessed through various attributes such as `getMethod()`, `getParameter()`, `getHeader()`, `getRemoteAddr()`, and others.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the current user is a community administrator for the specified community.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void isUserCommunityAdmin_shouldReturnTrue() {\n    // GIVEN\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    String userId = \"someUserId\";\n    String communityId = \"someCommunityId\";\n\n    when(request.getRequestURI()).thenReturn(\"/communities/\" + communityId + \"/admins\");\n    when(request.getParameter(\"userId\")).thenReturn(userId);\n    CommunityService communityService = mock(CommunityService.class);\n    when(communityService.findCommunityAdminsById(communityId, null)).thenReturn(List.of(new User(userId)));\n\n    // WHEN\n    CommunityAuthorizationFilter filter = new CommunityAuthorizationFilter(mock(AuthenticationManager.class), communityService);\n    boolean result = filter.isUserCommunityAdmin(request);\n\n    // THEN\n    assertTrue(result);\n}\n",
              "description": "\nThis test case uses the mocking functionality of JUnit to create a mock HttpServletRequest and CommunityService objects, and then sets up a scenario where isUserCommunityAdmin should return true. The test case first calls when on the request object to set its getRequestURI method to return the expected value, and then calls when on the communityService object to set its findCommunityAdminsById method to return a list containing a User with the same userId as the one in the mock HttpServletRequest. Finally, it creates an instance of CommunityAuthorizationFilter using the mock AuthenticationManager and communityService objects, and calls its isUserCommunityAdmin method on the request object, which should return true."
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "a custom authentication filter called MyHomeAuthorizationFilter, which extends the Spring Security BasicAuthenticationFilter. The filter is initialized with an AuthenticationManager, an Environment object, and an AppJwtEncoderDecoder object. The filter checks for an authorization token in the HTTP request header and decodes it using the AppJwtEncoderDecoder. If a valid token is found, it sets the SecurityContextHolder to store the authentication details and forwards the request to the next filter in the chain. Otherwise, it returns a null authentication token and continues with the next filter.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "199db418-a3c8-9c93-1641-8b14a0ad7117",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of BasicAuthenticationFilter that adds an additional layer of security by requiring a valid JWT token for authentication. The filter decodes the JWT token and checks if the user is authorized to access the requested resource. If the token is invalid or missing, the filter denies access and passes the request to the next filter in the chain.",
            "name": "MyHomeAuthorizationFilter",
            "code": "public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "9c61e3bf-f6f8-a3a0-164e-09bb546b84f5",
            "ancestors": [
              "199db418-a3c8-9c93-1641-8b14a0ad7117"
            ],
            "type": "function",
            "description": "validates incoming HTTP requests by checking for an authorization token header and authenticating users using a stored authentication token. If the token is absent or does not match the expected prefix, the function passes the request to the next filter chain stage without further processing.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed by the filter.\n\n* `authHeaderName`: The name of the HTTP header that contains the authentication token.\n* `authHeaderPrefix`: The prefix that is used to start the authentication token in the HTTP header.\n* `authHeader`: The value of the HTTP header containing the authentication token, or null if no such header is present.\n* `request`: The deserialized input object representing the incoming HTTP request.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HttpServletResponse object that is used to write the filtered content to the client.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `chain`: The next filter in the chain to be executed if the authentication fails.\n* `authentication`: A `UsernamePasswordAuthenticationToken` instance obtained from the HTTP header or other means, representing the authenticated user. This is set in the `SecurityContextHolder` using the `setAuthentication()` method.\n\nThe `response` object has several properties and attributes, including:\n\n* `getWriter()`: Returns a writer for writing response content.\n* `getStatus()`: Returns the HTTP status code of the response.\n* `getHeaders()`: Returns an unmodifiable map of HTTP headers.\n* `getCharacterEncoding()`: Returns the character encoding of the response content.\n* `getContentLength()`: Returns the content length of the response in bytes.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "FilterChain that needs to be executed after the authentication check is performed.\n\n* `request`: A `HttpServletRequest` object representing the incoming HTTP request.\n* `response`: A `HttpServletResponse` object representing the outgoing HTTP response.\n* `FilterChain`: An instance of `FilterChain` that represents the chain of filters to be executed in sequence for this request.\n* `IOException`: Thrown if an I/O error occurs during processing, such as a connection reset or file not found.\n* `ServletException`: Thrown if a servlet-specific error occurs during processing, such as a malformed Servlet configuration file or an unknown Servlet API method.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\nFilterChain chain) throws IOException, ServletException {\n  String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n  String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n  String authHeader = request.getHeader(authHeaderName);\n  if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n    chain.doFilter(request, response);\n    return;\n  }\n\n  UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  chain.doFilter(request, response);\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "f3fd681c-ea60-37a0-e74d-60ac3ff0e0e3",
            "ancestors": [
              "199db418-a3c8-9c93-1641-8b14a0ad7117"
            ],
            "type": "function",
            "description": "retrieves an authentication token from a HTTP request header and decodes it to create a `UsernamePasswordAuthenticationToken`. If the token is null, the function returns null.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being processed and provides the `Authorization` header value that is used to retrieve the authentication token.\n\n* `getHeader`: This method returns the value of the specified HTTP header in the request.\n* `environment.getProperty`: This method retrieves a property from the environment variable.\n* `appJwtEncoderDecoder.decode`: This method decodes the JWT token contained in the `authHeader` and returns the user ID.\n\nTherefore, the input `request` has the following properties:\n\n* `authHeader`: A header containing the JWT token.\n* `environment.getProperty(\"authorization.token.header.name\")`: The name of the HTTP header containing the JWT token.\n* `environment.getProperty(\"authorization.token.header.prefix\")`: The prefix of the JWT token in the HTTP header.\n* `environment.getProperty(\"token.secret\")`: The secret key used to decode the JWT token.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UsernamePasswordAuthenticationToken",
              "description": "a `UsernamePasswordAuthenticationToken` object representing a user authenticated through an authorization token.\n\n* `getAuthentication(HttpServletRequest request)`: This is the method signature indicating that it takes an `HttpServletRequest` object as input and returns an `UsernamePasswordAuthenticationToken` object as output.\n* `String authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"))`: This line retrieves the authentication token from the `Authorization` header of the HTTP request. The `environment.getProperty(\"authorization.token.header.name\")` property provides the name of the header where the token is expected to be placed.\n* `if (authHeader == null) { return null; }`: This line checks if the authentication token is present in the `Authorization` header, and if it's null, the method returns a null value.\n* `String token = authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\")`: This line replaces any prefix that may be present in the authentication token with an empty string using the `environment.getProperty(\"authorization.token.header.prefix\")` property as a guide.\n* `AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"))`: This line decodes the authentication token using the `appJwtEncoderDecoder` class and the `environment.getProperty(\"token.secret\")` property as the secret key.\n* `if (jwt.getUserId() == null) { return null; }`: This line checks if the `userId` property of the decoded JWT is null, and if it is, the method returns a null value.\n* `return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());`: This line creates a new `UsernamePasswordAuthenticationToken` object with the user ID obtained from the decoded JWT, an empty list of credentials, and a null authentication principal.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import javax.servlet.http.HttpServletRequest;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\n// Assume that this method is called from within a controller or any other class that has access to the request object.\npublic void handleUserRequest(HttpServletRequest request) {\n  // Get the authentication token from the header of the request\n  String authHeader = request.getHeader(\"Authorization\");\n  \n  // Use the getAuthentication method to extract the user ID and password from the token\n  UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n  \n  // If the user is not authenticated, return a 401 Unauthorized response\n  if (authentication == null) {\n    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n  }\n  \n  // Get the current user ID from the authentication token and set it in the SecurityContextHolder\n  String userId = authentication.getName();\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  \n  // Proceed with the request handling, assuming that the user is now authenticated\n  // ...\n}\n",
              "description": ""
            },
            "name": "getAuthentication",
            "code": "private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "service/src/main/java/com/myhome/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A web security configuration for a Spring Boot application using Spring Security. It enables WebSecurity and requires the necessary dependencies for authentication and authorization. It also sets up CORS filtering, disables session creation, and adds filters for community and MyHome authorization. The configure() method is used to set up the HTTP security layer, which includes adding filters and configuring the authentication manager builder.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.Community</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"162,-85 23,-85 23,-66 162,-66 162,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6ce5131c-0448-2585-c14d-8f7f2397d94d",
            "ancestors": [],
            "type": "function",
            "description": "is configured to enable web security for the application, allowing only authenticated requests and filtering them based on the community authorization filter. The configure() method sets up the HTTP security, disabling CORS, frame options, and session creation policy. Additionally, it adds a filter after the community filter using the MyHomeAuthorizationFilter class.",
            "name": "WebSecurity",
            "code": "@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n  private final UserDetailsService userDetailsService;\n  private final CommunityService communityService;\n  private final PasswordEncoder passwordEncoder;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }\n\n  private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "844f128f-4dbe-af90-e34b-96b92dd28829",
            "ancestors": [
              "6ce5131c-0448-2585-c14d-8f7f2397d94d"
            ],
            "type": "function",
            "description": "defines security settings for an API, disabling CORS and CSFR, and allowing all methods on specific URLs. It also adds a filter to authenticate and authorize requests, and another filter to handle JWT encoding and decoding.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "security configuration for the application, allowing the code to configure various security features such as CORS, CSFR, session management, and authorization policies for specific URLs and HTTP methods.\n\n* `cors`: Enables CORS (Cross-Origin Resource Sharing) functionality.\n* `csrf`: Disables CSRF (Cross-Site Request Forgery) protection.\n* `frameOptions`: Disables frame options for security reasons.\n* `sessionManagement`: Configures the session creation policy to be stateful.\n* `addFilterAfter`: Adds a filter after the `MyHomeAuthorizationFilter`.\n* `authorizeRequests`: Configures authorization rules for various HTTP methods and URL paths.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MySecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors().and().csrf().disable();\n        http.headers().frameOptions().disable();\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n        http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n        http.authorizeRequests()\n                .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n                .permitAll()\n                .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n                .permitAll()\n                .antMatchers(\"/swagger/**\")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n                        appJwtEncoderDecoder))\n                .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n    }\n}\n",
              "description": ""
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 33
          },
          {
            "id": "655aca47-3e18-b0bd-bd44-a86e9784e0b0",
            "ancestors": [
              "6ce5131c-0448-2585-c14d-8f7f2397d94d"
            ],
            "type": "function",
            "description": "creates a `CommunityAuthorizationFilter` instance by combining the `AuthenticationManager` and `CommunityService` objects, enabling the filter to authenticate and authorize community-related requests.",
            "params": [],
            "returns": {
              "type_name": "Filter",
              "description": "a `Filter` object implementing community authorization functionality through a combination of authentication and service calls.\n\n* The function returns an instance of the `Filter` class.\n* The filter is created by combining two objects: the `AuthenticationManager` and the `CommunityService`.\n* The `AuthenticationManager` is used to authenticate requests, while the `CommunityService` provides functionality related to communities.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate Filter communityFilter;\n...\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    ...\n    .addFilterAfter(communityFilter, MyHomeAuthorizationFilter.class);\n}\n",
              "description": "\nThe example code adds a filter of type \"CommunityAuthorizationFilter\" after the \"MyHomeAuthorizationFilter\" class."
            },
            "name": "getCommunityFilter",
            "code": "private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }",
            "location": {
              "start": 80,
              "insert": 80,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3
          },
          {
            "id": "8d6b2fe9-6e63-118e-6e4e-d7b3363e5942",
            "ancestors": [
              "6ce5131c-0448-2585-c14d-8f7f2397d94d"
            ],
            "type": "function",
            "description": "sets up authentication manager configuration by providing a user details service and password encoder for customizing authentication logic.",
            "params": [
              {
                "name": "auth",
                "type_name": "AuthenticationManagerBuilder",
                "description": "AuthenticationManagerBuilder instance, which is being configured by specifying the user details service and password encoder used for authentication.\n\n* `userDetailsService`: This property is an instance of `UserDetailsService`. It represents the user details service responsible for storing and retrieving user information.\n* `passwordEncoder`: This property is an instance of `PasswordEncoder`. It encodes passwords before saving them to the database or when retrieving them.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}\n",
              "description": ""
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/filters/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "a custom authentication filter called `CommunityAuthorizationFilter` that extends `BasicAuthenticationFilter`. The filter checks if the user is an admin of a community based on a UUID pattern in the request URL, and if not, returns a FORBIDDEN status. If the user is an admin, it allows the request to pass through to the next filter in the chain. The code uses packages such as `org.springframework.security` and `java.util.regex`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.filters.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.filters.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.filters.</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"151.5,-85 12.5,-85 12.5,-66 151.5,-66 151.5,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "ee22a823-864a-8496-924c-7be04f8073c9",
            "ancestors": [],
            "type": "function",
            "description": "is a custom authentication filter that restricts access to community amenities based on user identity and community administration roles. The filter checks if the user is a community admin by querying the community service, and if not, it sets the status code to FORBIDDEN. If the user is a community admin, the filter allows the request to proceed to the next filter in the chain.",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n  private final CommunityService communityService;\n  private static final String UUID_PATTERN =\n      \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =\n      Pattern.compile(\"/communities/\" + UUID_PATTERN + \"/amenities\");\n\n  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n      CommunityService communityService) {\n    super(authenticationManager);\n    this.communityService = communityService;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n\n  private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }\n}",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 40
          },
          {
            "id": "b0f40406-5617-c58c-724f-4a4b198d0bac",
            "ancestors": [
              "ee22a823-864a-8496-924c-7be04f8073c9"
            ],
            "type": "function",
            "description": "filters HTTP requests based on a pattern and checks if the user is an admin of a specific community. If not, it responds with a forbidden status code, otherwise, it passes the request to the next filter in the chain.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that is being processed by the filter.\n\n* `request.getRequestURI()` returns the request URL, which is matched against a pattern to determine if it belongs to an amenity request.\n* `urlMatcher.find()` returns `true` if the pattern matches, and `false` otherwise.\n* `isUserCommunityAdmin(request)` checks whether the current user is an admin for the community, and if not, sets the response status code to `HttpServletResponse.SC_FORBIDDEN`.\n* `super.doFilterInternal(request, response, chain)` calls the parent method to handle the request.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HTTP response object that is being filtered by the current code snippet.\n\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which contains information about the HTTP request and response headers and status code.\n* `FilterChain chain`: This is a chain of filters that can be used to modify or handle the incoming request.\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the incoming HTTP request.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "next filter in the chain that should be executed after the current filter is applied to the request.\n\n* `HttpServletRequest request`: The current HTTP request being processed by the filter.\n* `HttpServletResponse response`: The current HTTP response being generated by the filter.\n* `FilterChain chain`: An instance of the `FilterChain` interface, which represents a sequence of filters that can be applied to the current request.\n\nThe `chain` object has various attributes and methods that can be used to manipulate the flow of the request through the filter chain. For example, the `doFilterInternal` method can call the `doFilter` method of the next filter in the chain, or it can stop the processing of the current request by returning early. The `chain` object also provides a way to access the previous filters in the chain, which can be useful for storing state between filter iterations.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n        response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n}\n",
              "description": "\nIn this example, the method is called as part of a filter chain. The request and response are used to determine if the user has permission to access the requested URL. If they do not have permission, the method sets the status code to SC_FORBIDDEN (403) and returns without calling super.doFilterInternal()."
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "f393abfc-834f-b78e-d643-e852bfa7a65a",
            "ancestors": [
              "ee22a823-864a-8496-924c-7be04f8073c9"
            ],
            "type": "function",
            "description": "determines if a user is an admin of a community by querying the community service and checking if the user's ID exists in the list of admins for that community.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request object containing information about the current user and their session, which is used to determine if the user is a community admin.\n\n* `request.getRequestURI()`: This method returns the request URI, which is the path portion of the HTTP request. In this case, it splits into two parts: the scheme and the authority.\n* `(String) SecurityContextHolder.getContext().getAuthentication().getPrincipal()`: This line retrieves the currently authenticated user ID from the SecurityContextHolder, which stores the security context for the current thread. The `getPrincipal()` method of the Authentication object returns the user principal, which represents the user who is being authenticated.\n* `request.getParameter(“userId\")`: This line retrieves a parameter from the HTTP request called \"userId\".\n* `communityId = request.getRequestURI().split(\"/\")[2]`: This line splits the request URI into its scheme and authority components, and extracts the second component (the authority) as the community ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the current user is an admin of a specific community.\n\n* `SecurityContextHolder`: This is an instance of `SecurityContextHolder`, which is used to store and retrieve authentication information in a Spring Security context.\n* `getContext()`: This method returns the current security context, which contains information about the currently authenticated user and any other security-related contextual information.\n* `getAuthentication()`: This method returns the current authentication object, which represents the authenticated user.\n* `getPrincipal()`: This method returns the principal object associated with the authentication object, which represents the user who is being authenticated.\n* `communityService`: This is an instance of `CommunityService`, which is used to interact with the community service layer.\n* `findCommunityAdminsById()`: This method finds a list of community admins for a given community ID using the community service layer.\n* `flatMap()`: This method flattens the list of community admins into a stream, which allows for more efficient processing.\n* `map()`: This method maps each admin in the list to their user ID, which is used as a filter condition.\n* `filter()`: This method filters the list of user IDs to find the ID of the currently authenticated user.\n* `findFirst()`: This method finds the first element that matches the filter condition (in this case, the ID of the currently authenticated user), or returns `Optional.empty()` if no such element is found.\n* `isPresent()`: This method checks whether the result returned by `findFirst()` is present, which indicates whether the currently authenticated user is a community admin for the given community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n    \n    return communityService.findCommunityAdminsById(communityId, null).flatMap(admins -> admins.stream()\n        .map(User::getUserId)\n        .filter(userId::equals)\n        .findFirst())\n        .isPresent();\n}\n",
              "description": ""
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AppJwt.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwt.java",
    "content": {
      "structured": {
        "description": "A class called AppJwt that represents a JWT in an application. The class has two fields: userId and expiration, which are used to generate and validate the JWT. The Builder,ToString,Getter annotations are used to enable automatic generation of getters and setters for the class fields.",
        "items": [
          {
            "id": "6efbe8a0-2bd9-a0aa-3a40-1873d5431f3d",
            "ancestors": [],
            "type": "function",
            "description": "represents a JWT in the application with user ID and expiration date.\nFields:\n\t- userId (String): represents a unique identifier for a user in the application.\n\t- expiration (LocalDateTime): represents the date and time after which the JWT becomes invalid or no longer valid.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AppJwt",
                "description": "represents a unique identifier for a user in the application."
              },
              {
                "name": "expiration",
                "type_name": "LocalDateTime",
                "value": null,
                "constant": false,
                "class_name": "AppJwt",
                "description": "represents the date and time after which the JWT becomes invalid or no longer valid."
              }
            ],
            "name": "AppJwt",
            "code": "@Builder\n@ToString\n@Getter\npublic class AppJwt {\n  private final String userId;\n  private final LocalDateTime expiration;\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 26
              }
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AppJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An interface `AppJwtEncoderDecoder` that provides logic for encoding and decoding JWTs (JSON Web Tokens) for an application. The interface specifies two methods: `decode(String encodedJwt, String secret)` to decode a JWT and retrieve the application's data, and `encode(AppJwt jwt, String secret)` to encode the application's data into a JWT.",
        "items": [
          {
            "id": "1791e631-a9ec-cc94-294e-6e8a908f60ac",
            "ancestors": [],
            "type": "function",
            "description": "provides a logic for encoding and decoding Application's JWT.",
            "name": "AppJwtEncoderDecoder",
            "code": "public interface AppJwtEncoderDecoder {\n  AppJwt decode(String encodedJwt, String secret);\n\n  String encode(AppJwt jwt, String secret);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 18,
                "end": 21
              }
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "NoSecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of `AppJwtEncoderDecoder` that splits a given JWT into its component parts using a separator string, and then decodes and encodes the JWT using those components. It is used for testing purposes only and includes methods for building `AppJwt` objects from the decoded components as well as constructing the encoded JWT from a `AppJwt` object.",
        "items": [
          {
            "id": "3df7665c-d8b6-67bd-7d40-8758aca631c2",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the AppJwtEncoderDecoder interface, designed to work only in testing environments. It splits the encoded JWT into two parts using a separator, and then parses the user ID and expiration time from the resulting array. Finally, it returns a new AppJwt object with the extracted values.",
            "name": "NoSecretJwtEncoderDecoder",
            "code": "@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "76bb7d18-c5cc-3cad-2e4b-179262cc1d1f",
            "ancestors": [
              "3df7665c-d8b6-67bd-7d40-8758aca631c2"
            ],
            "type": "function",
            "description": "takes an encoded JWT and a secret, splits the encoded JWT into a array of strings using the specified separator, and then creates a new `AppJwt` object with the user ID and expiration time extracted from the array.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that needs to be decoded and returned as an instance of the `AppJwt` class.",
                "complex_type": false
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to decode the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` with user ID and expiration time extracted from the encoded JWT.\n\n* `AppJwt`: This is the class that represents an JSON Web Token (JWT), which is the type of token being decoded. It has fields for the user ID and expiration time.\n* `userId(strings[0])`: This field represents the user ID extracted from the split `encodedJwt` string.\n* `expiration(LocalDateTime.parse(strings[1]))`: This field represents the expiration time of the JWT, which is also extracted from the split `encodedJwt` string.\n\nThe output of the `decode` function is an instance of `AppJwt`, which contains the user ID and expiration time of the decoded JWT.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n",
              "description": "\nIn the example above, the method decode is used to decode a string that was previously encoded by calling the encode method with an AppJwt object and a secret string. The encoded JWT string is split based on the '+' separator character using the split method of the String class. The resulting array contains two elements: the user ID and the expiration date, which are used to build an AppJwt object using its builder method."
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "58be52ce-15bb-db98-1649-51d35046ef45",
            "ancestors": [
              "3df7665c-d8b6-67bd-7d40-8758aca631c2"
            ],
            "type": "function",
            "description": "takes a JWT object `jwt` and a secret as input, and returns an encoded string consisting of the user ID and expiration date.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "Java Transcrypting Worry Token containing information about the user and expiration date, which is used to generate the encoded token returned by the function.\n\n* `jwt`: The input parameter is an instance of `AppJwt`, which contains user-related information such as `getUserId()` and `getExpiration()`.\n* `secret`: The secret key used for signing the JWT.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used for signing the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a base64-encoded string representing the user ID and expiration date of the JWT.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n  @Autowired\n  private NoSecretJwtEncoderDecoder jwtEncoder;\n  \n  public void myMethod() {\n    String secret = \"my_secret\";\n    AppJwt jwt = AppJwt.builder().userId(\"123456789\").expiration(LocalDateTime.now()).build();\n    String encodedJwt = jwtEncoder.encode(jwt, secret);\n  }\n}\n",
              "description": ""
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "SecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "an implementation of the `AppJwtEncoderDecoder` interface, which is responsible for encoding and decoding JSON Web Tokens (JWTs) used for authentication in a Spring Boot application. The code uses the `io.jsonwebtoken` library to handle JWT parsing and signing, and it defines two methods: `decode()` to decode an encoded JWT, and `encode()` to encode a new JWT. The `decode()` method extracts the claims from the decoded JWT using the `Jwts.parserBuilder()` class, and then returns an updated `AppJwt` object with the extracted user ID and expiration date. The `encode()` method builds a new JWT using the `Jwts.builder()` class, sets the subject and expiration dates, and signs the JWT using the `SignatureAlgorithm.HS512`.",
        "items": [
          {
            "id": "a128fe40-f870-57b7-6248-e4458f10b20a",
            "ancestors": [],
            "type": "function",
            "description": "is an implementation of the AppJwtEncoderDecoder interface that provides methods for encoding and decoding JSON Web Tokens (JWTs). The class uses the HmacShaKeyFor method to generate a signing key for the JWT, and the Jwts builder class to parse and generate JWT claims.",
            "name": "SecretJwtEncoderDecoder",
            "code": "@Component\n@Profile(\"default\")\npublic class SecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 26
          },
          {
            "id": "110fe5c1-1063-5286-b649-1ec0fef58bd6",
            "ancestors": [
              "a128fe40-f870-57b7-6248-e4458f10b20a"
            ],
            "type": "function",
            "description": "takes an encoded JWT and a secret, uses JWT parser to extract claims from the JWT, and creates a new AppJwt instance with the extracted information.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that is being decoded and parsed by the `decode()` method.",
                "complex_type": false
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used for HMAC-SHA256 signature verification when decoding the JWT.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` with user ID and expiration date reconstructed from the input JWT.\n\n* `userId`: The subject claim in the JWT, representing the user's ID.\n* `expiration`: The expiration date and time of the JWT, represented as an Instant in the function.\n\nThe output is constructed by combining these two properties using the `builder` pattern, creating a new `AppJwt` instance with the specified properties.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String encodedJwt = \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0LmNvbSIsImV4cCI6MTYyMjE3MDcyOSwiaWF0IjoxNjI5MTE2OTA5LCJqdGkiOiJjOTM1NmUzNS0yYTg5LTQ3ZTEtODkwOC05YzliNDVhZWEwNzgiLCJuYmYiOjE2MTYxNTI4MSwianRpIjoiZWRkZDFhZDE3OTAtNGU3NS00MjFkLWJlODctYTgyZGQ5ZTg5NWNkIn0.Cc9P1B_q7VxmH4oYZ8a2-z62iS3IJK6vp1Ju394nEUw\";\nString secret = \"MySuperSecretKey\";\nAppJwt appJwt = decode(encodedJwt, secret);\n",
              "description": "\nThe method decode would return an AppJwt object with the userId and expiration of the encoded JWT."
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "f9202861-3eda-86ae-0f48-092fa25dc623",
            "ancestors": [
              "a128fe40-f870-57b7-6248-e4458f10b20a"
            ],
            "type": "function",
            "description": "takes a `Jwt` object and a secret as input, creates a new JWT with an updated expiration date based on the current time zone, and signs it using HMAC-SHA-512 algorithm with the provided secret.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JSON Web Token to be encoded, which includes the user ID and expiration date.\n\n* `jwt`: A `AppJwt` object containing the JWT claim set and expiration date.\n* `secret`: The secret key used for signing the JWT.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "30-byte HMAC key used for signing the JWT token.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a compact JWT containing the user ID, expiration date, and HMAC-SHA512 signature, all generated using the provided secret.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n  \n  \npublic static void main(String[] args) {\n    AppJwt jwt = new AppJwt(\"user_id\", ZonedDateTime.now().plusDays(30));\n    String secret = \"some_secret\";\n    SecretJwtEncoderDecoder encoderDecoder = new SecretJwtEncoderDecoder();\n    String encodedJwt = encoderDecoder.encode(jwt, secret);\n    System.out.println(\"Encoded JWT: \" + encodedJwt);\n}\n",
              "description": "\nThis example demonstrates how the encode method of SecretJwtEncoderDecoder can be used to create a JWT with the specified user ID and expiration date. The resulting JWT is printed to the console using the println statement."
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityService.java",
    "path": "service/src/main/java/com/myhome/services/AmenityService.java",
    "content": {
      "structured": {
        "description": "An interface for AmenityService that provides various methods for managing amenities in a community. The interface includes methods for creating, getting details of, deleting, and listing all amenities in a community. Additionally, it includes a method for updating amenities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.AmenityService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.AmenityService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"186,-96 14,-96 14,-66 186,-66 186,-96\"/>\n<text text-anchor=\"start\" x=\"22\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Amenity</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1AmenitySDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitySDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0db3c516-72c0-779b-434e-9a929d0fc165",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating, retrieving, deleting, listing, and updating amenities in a community.",
            "name": "AmenityService",
            "code": "public interface AmenityService {\n\n  Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId);\n\n  Optional<Amenity> getAmenityDetails(String amenityId);\n\n  boolean deleteAmenity(String amenityId);\n\n  Set<Amenity> listAllAmenities(String communityId);\n\n  boolean updateAmenity(AmenityDto updatedAmenityDto);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationService.java",
    "path": "service/src/main/java/com/myhome/services/AuthenticationService.java",
    "content": {
      "structured": {
        "description": "An interface for an AuthenticationService that can log in users through a login method. The method takes a LoginRequest object as input and returns an AuthenticationData object as output.",
        "items": [
          {
            "id": "f91af968-de2a-44b4-f042-7317482d06e3",
            "ancestors": [],
            "type": "function",
            "description": "provides a method for logging in users through the login() method, which returns an AuthenticationData object representing the authenticated user.",
            "name": "AuthenticationService",
            "code": "public interface AuthenticationService {\n  AuthenticationData login(LoginRequest loginRequest);\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "BookingService.java",
    "path": "service/src/main/java/com/myhome/services/BookingService.java",
    "content": {
      "structured": {
        "description": "An interface `BookingService` which provides a method `deleteBooking` that deletes a booking based on its amenity ID and ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.BookingService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.BookingService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-96 15,-96 15,-66 185,-66 185,-96\"/>\n<text text-anchor=\"start\" x=\"23\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Booking</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1BookingSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4af84d9e-5ce4-efbe-b24b-3c105e5da8ed",
            "ancestors": [],
            "type": "function",
            "description": "provides a method for deleting bookings based on amenity ID and booking ID.",
            "name": "BookingService",
            "code": "public interface BookingService {\n\n  boolean deleteBooking(String amenityId, String bookingId);\n\n}",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": "service/src/main/java/com/myhome/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface for a community service that provides various methods for managing communities, including creating new communities, listing all communities, and retrieving community details by ID. It also includes methods for adding or removing admins and houses from communities, as well as deleting communities. The code uses packages from Spring Data Domain, which provides functionalities for working with domain objects and their associated data.",
        "items": [
          {
            "id": "8676b66d-92d7-ecb5-d84e-2c0ed9d4c092",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of methods for managing communities in a Spring Data-based application, including creating new communities, listing all communities, and deleting existing communities.",
            "name": "CommunityService",
            "code": "public interface CommunityService {\n  Community createCommunity(CommunityDto communityDto);\n\n  Set<Community> listAll();\n\n  Set<Community> listAll(Pageable pageable);\n\n  Optional<Community> getCommunityDetailsById(String communityId);\n\n  Optional<List<CommunityHouse>> findCommunityHousesById(String communityId, Pageable pageable);\n\n  Optional<List<User>> findCommunityAdminsById(String communityId, Pageable pageable);\n\n  Optional<User> findCommunityAdminById(String adminId);\n\n  Optional<Community> getCommunityDetailsByIdWithAdmins(String communityId);\n\n  Optional<Community> addAdminsToCommunity(String communityId, Set<String> admins);\n\n  Set<String> addHousesToCommunity(String communityId, Set<CommunityHouse> houses);\n\n  boolean removeHouseFromCommunityByHouseId(Community community, String houseId);\n\n  boolean deleteCommunity(String communityId);\n\n  boolean removeAdminFromCommunity(String communityId, String adminId);\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 27
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentService.java",
    "path": "service/src/main/java/com/myhome/services/HouseMemberDocumentService.java",
    "content": {
      "structured": {
        "description": "An interface for HouseMemberDocumentService, which handles various operations related to house member documents. The interface includes four methods: deleteHouseMemberDocument, findHouseMemberDocument, updateHouseMemberDocument, and createHouseMemberDocument. These methods allow for the deletion, retrieval, updating, and creation of house member documents, respectively.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.HouseMemberDocumentService Pages: 1 -->\n<svg width=\"211pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 211.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.HouseMemberDocumentService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-96 21,-96 21,-66 182,-66 182,-96\"/>\n<text text-anchor=\"start\" x=\"29\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1HouseMemberDocumentSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"203,-30 0,-30 0,0 203,0 203,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberDocumentSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-55.54C101.5,-46.96 101.5,-37.61 101.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-55.8 101.5,-65.8 105,-55.8 98,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "2f2de200-15fe-2f8a-d64f-1131d0d04395",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for deleting, finding, updating, and creating House Member Documents.",
            "name": "HouseMemberDocumentService",
            "code": "public interface HouseMemberDocumentService {\n\n  boolean deleteHouseMemberDocument(String memberId);\n\n  Optional<HouseMemberDocument> findHouseMemberDocument(String memberId);\n\n  Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId);\n\n  Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId);\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "HouseService.java",
    "path": "service/src/main/java/com/myhome/services/HouseService.java",
    "content": {
      "structured": {
        "description": "An interface for HouseService, which provides several methods for managing houses and their members. The interface includes methods for listing all houses, listing houses with pagination, adding house members, deleting members from a house, retrieving house details by ID, and retrieving a list of house members for a specific user ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.HouseService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.HouseService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"180.5,-96 19.5,-96 19.5,-66 180.5,-66 180.5,-96\"/>\n<text text-anchor=\"start\" x=\"27.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1HouseSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "dd1dfb3b-7c82-388d-0a42-a15e26dbff80",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for managing houses and their members, including listing all houses and members, adding new members to a house, deleting members from a house, retrieving details of a specific house, and listing members for a set of houses associated with a specific user.",
            "name": "HouseService",
            "code": "public interface HouseService {\n  Set<CommunityHouse> listAllHouses();\n\n  Set<CommunityHouse> listAllHouses(Pageable pageable);\n\n  Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers);\n\n  boolean deleteMemberFromHouse(String houseId, String memberId);\n\n  Optional<CommunityHouse> getHouseDetailsById(String houseId);\n\n  Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable);\n\n  Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId, Pageable pageable);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 15
          }
        ]
      }
    }
  },
  {
    "name": "MailService.java",
    "path": "service/src/main/java/com/myhome/services/MailService.java",
    "content": {
      "structured": {
        "description": "an interface for a mail service that allows users to perform various actions related to their accounts. These actions include sending password recovery codes, confirming account creation through email, changing passwords successfully, and confirming account activation. The code uses packages from `com.myhome.domain` and `com.myhome.services`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "c2b52e79-10a2-c998-6742-51e8eeedffe9",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for sending various types of emails related to user account management and security token confirmation.",
            "name": "MailService",
            "code": "public interface MailService {\n\n  boolean sendPasswordRecoverCode(User user, String randomCode);\n\n  boolean sendAccountCreated(User user, SecurityToken emailConfirmToken);\n\n  boolean sendPasswordSuccessfullyChanged(User user);\n\n  boolean sendAccountConfirmed(User user);\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentService.java",
    "path": "service/src/main/java/com/myhome/services/PaymentService.java",
    "content": {
      "structured": {
        "description": "An interface for a payment service layer, providing various methods for scheduling payments, retrieving payment details, and getting payments by member or administrator. The interface includes four methods: `schedulePayment`, `getPaymentDetails`, `getPaymentsByMember`, and `getPaymentsByAdmin`.",
        "items": [
          {
            "id": "9e9e013b-a86d-94a4-954b-16e87a0954e9",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for scheduling payments, retrieving payment details, getting payments by member, and getting payments by administrator, along with an optional method for retrieving house members.",
            "name": "PaymentService",
            "code": "public interface PaymentService {\n  PaymentDto schedulePayment(PaymentDto request);\n\n  Optional<PaymentDto> getPaymentDetails(String paymentId);\n\n  Set<Payment> getPaymentsByMember(String memberId);\n\n  Page<Payment> getPaymentsByAdmin(String adminId, Pageable pageable);\n\n  Optional<HouseMember> getHouseMember(String memberId);\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 11
          }
        ]
      }
    }
  }
]