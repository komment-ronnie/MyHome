[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A class `PageInfo` that contains information about a page of data. The class has five instance fields: currentPage, pageLimit, totalPages, and totalElements, which are initialized using a constructor. A static method `of` is also provided to create a new `PageInfo` object based on a `Pageable` object and the corresponding page of data. This code likely forms part of a Spring Data-based application, as it makes use of Lombok, a popular tool for generating boilerplate code, and the `Pageable` interface, which is a part of Spring Data's domain layer.",
        "items": [
          {
            "id": "95c62023-ff05-1c92-ee49-461bfc3c4cf4",
            "ancestors": [],
            "type": "function",
            "description": "is a data structure that represents the current page and total pages of a paginated dataset, along with the total number of elements in the dataset. It provides a convenient way to pass around this information when working with large datasets.",
            "name": "PageInfo",
            "code": "@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19
          },
          {
            "id": "158f2881-341b-a588-794d-55e0d8698eb3",
            "ancestors": [
              "95c62023-ff05-1c92-ee49-461bfc3c4cf4"
            ],
            "type": "function",
            "description": "transforms a `Pageable` object and a `Page` object into a `PageInfo` object, providing information on the current page number, size, total pages, and total elements.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pageable object that contains information about the pagination of the data, which is used to calculate the page number, size, and total pages and elements of the resultant page info.\n\n* `getPageNumber(): int`: The page number of the current page being processed.\n* `getPageSize(): int`: The number of elements in a single page of the data set.\n* `getTotalPages(): int`: The total number of pages in the data set.\n* `getTotalElements(): int`: The total number of elements in the data set.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page of elements being processed, which is used to calculate the total pages and elements in the PageInfo object returned by the function.\n\n* `pageNumber`: The page number that contains the elements being processed.\n* `pageSize`: The number of elements in each page.\n* `totalPages`: The total number of pages in the entire dataset.\n* `totalElements`: The total number of elements in the dataset.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing information about the current page of a paginated result.\n\n* pageable.getPageNumber(): The number of the current page being displayed.\n* pageable.getPageSize(): The number of elements per page in the paginated list.\n* page.getTotalPages(): The total number of pages available for display.\n* page.getTotalElements(): The total number of elements in the paginated list.",
              "complex_type": true
            },
            "name": "of",
            "code": "public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "UserControllerIntegrationTest.java",
    "path": "integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java",
    "content": {
      "structured": {
        "description": "An integration test for a user controller in a Spring Boot application. The test creates a new user through the registration path, checks the response status code, and verifies that the created user is stored in the database with matching values as those provided in the request body.",
        "items": [
          {
            "id": "170b3566-70dc-fbbc-6d43-38c988e7f906",
            "ancestors": [],
            "type": "function",
            "description": "tests the successful sign-up of a new user through the API registration path. The test creates a request body with name, email, and password and posts it to the registration URL, verifying that the response status code is HTTP 201 Created and the returned user ID refers to a user stored in the database, with corresponding fields matching the input values.",
            "name": "UserControllerIntegrationTest",
            "code": "@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "906fe314-e82f-c68e-4e4e-fdd087abff99",
            "ancestors": [
              "170b3566-70dc-fbbc-6d43-38c988e7f906"
            ],
            "type": "function",
            "description": "tests the successful creation of a new user through the REST API, verifying the response status code, the created user's details, and the corresponding values in the database.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    \n    // When a request is made\n    ResponseEntity<User> responseEntity = testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n    \n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n    \n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n    \n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n",
              "description": ""
            },
            "name": "shouldSignUpSuccessful",
            "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 31
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that uses the Spring Security module for password encryption. The `BCryptPasswordEncoder` class is used to encode and decode passwords. The `getPasswordEncoder()` method returns an instance of `BCryptPasswordEncoder`, which is then used throughout the application to handle password validation and storage.",
        "items": [
          {
            "id": "afad02e4-1c16-80b7-6c40-e11b7befae8c",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a password encoder using BCrypt. The main method starts the application and the @Bean annotation defines a bean for the password encoder.",
            "name": "MyHomeServiceApplication",
            "code": "@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13
          },
          {
            "id": "3cc49a90-4bf9-4a9b-c242-9883a1a05979",
            "ancestors": [
              "afad02e4-1c16-80b7-6c40-e11b7befae8c"
            ],
            "type": "function",
            "description": "runs a Spring application named `MyHomeServiceApplication`.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the `SpringApplication.run()` method when it is called, allowing the application to be launched with specific configuration options or other parameters.\n\n* `String[]`: Represents an array of strings, indicating the command-line arguments passed to the program during execution.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3
          },
          {
            "id": "548c5254-6ae1-0f98-4347-fafa761e5fc0",
            "ancestors": [
              "afad02e4-1c16-80b7-6c40-e11b7befae8c"
            ],
            "type": "function",
            "description": "returns a `BCryptPasswordEncoder` instance, which is a cryptographic hash function for password storage and verification.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a BCryptPasswordEncoder instance, which is used to encrypt passwords securely.\n\nThe `BCryptPasswordEncoder` object is an implementation of the `PasswordEncoder` interface in Java.\nIt uses the BCrypt hashing algorithm to encrypt passwords securely.\nThis algorithm is considered secure because it takes into account the length and complexity of the password being encrypted, making it more resistant to brute-force attacks.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyHomeService {\n  @Autowired\n  private PasswordEncoder passwordEncoder;\n\n  public void registerUser(String username, String password) {\n    User user = new User();\n    user.setUsername(username);\n    user.setPassword(passwordEncoder.encode(password));\n    // save the user to the database\n  }\n}\n",
              "description": ""
            },
            "name": "getPasswordEncoder",
            "code": "@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `CorsConfig` that enables Cross-Origin Resource Sharing (CORS) for a web application. The class defines allowed origins, methods, headers, and credentials for CORS mappings using the `@Bean` annotation. It also provides a bean for the `WebMvcConfigurer` interface to add CORS mappings to the registry.",
        "items": [
          {
            "id": "fa9b8b47-a1f7-f7a6-c847-467952b39e81",
            "ancestors": [],
            "type": "function",
            "description": "is used to configure CORS settings for a web application. It allows requests from any origin and specifies which headers to expose and whether credentials should be included. The `addCorsMappings` method adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "name": "CorsConfig",
            "code": "@Configuration\npublic class CorsConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n\n  /**\n   * configure CORS settings for a web application, allowing requests from specified\n   * origins and methods, as well as specifying which headers to expose and whether\n   * credentials should be included.\n   * \n   * @returns a configuration for CORS (Cross-Origin Resource Sharing) that allows\n   * requests from any origin to access resources from the server.\n   * \n   * \t- `registry`: The `CorsRegistry` object that is being modified with the CORS mappings.\n   * \t- `addCorsMappings()`: The method being called on the `registry` object to add\n   * CORS mappings.\n   * \t- `allowedOrigins`: An array of strings containing the allowed origins for the\n   * CORS mappings.\n   * \t- `allowedMethods`: An array of strings containing the allowed HTTP methods for\n   * the CORS mappings.\n   * \t- `allowedHeaders`: An array of strings containing the allowed headers for the\n   * CORS mappings.\n   * \t- `exposedHeaders`: An array of strings containing the headers that are exposed\n   * to the client.\n   * \t- `allowCredentials()`: A boolean value indicating whether credentials (e.g.,\n   * cookies, authorization) should be allowed for the CORS mappings.\n   */\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of `CorsRegistry`, which represents the set of\n       * CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new mapping to the existing set of mappings\n       * in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the\n       * mapping applies to all URLs.\n       * \t- `allowedOrigins`: An array of allowed origins, which specifies the domains or\n       * subdomains that are allowed to make CORS requests to the server.\n       * \t- `allowedMethods`: An array of allowed HTTP methods, which specifies the methods\n       * that are allowed to be used in CORS requests to the server. The value `\"*\" means\n       * that all methods are allowed.\n       * \t- `allowedHeaders`: An array of allowed headers, which specifies the headers that\n       * can be included in CORS responses from the server. The value `\"*\" means that all\n       * headers are allowed.\n       * \t- `exposedHeaders`: An array of exposed headers, which specifies the headers that\n       * can be included in CORS responses from the server and are visible to clients. The\n       * values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n       * \t- `allowCredentials`: A boolean value that indicates whether CORS requests with\n       * credentials (such as cookies or authentication tokens) are allowed.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 68
          },
          {
            "id": "a62d7b63-c822-6db5-cd4a-5142c6974dc0",
            "ancestors": [
              "fa9b8b47-a1f7-f7a6-c847-467952b39e81"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a set of CORS mappings that allow requests from any origin, specify allowed methods and headers, and expose certain headers.\n\n* `registry`: This is an instance of `CorsRegistry`, which represents the set of CORS mappings for a server.\n* `addMapping`: This method adds a new mapping to the existing set of mappings in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the mapping applies to all URLs.\n* `allowedOrigins`: An array of allowed origins, which specifies the domains or subdomains that are allowed to make CORS requests to the server. The value is an empty array by default, indicating that no origins are allowed.\n* `allowedMethods`: An array of allowed HTTP methods, which specifies the methods that are allowed to be used in CORS requests to the server. The value `\"*\" means that all methods are allowed.\n* `allowedHeaders`: An array of allowed headers, which specifies the headers that can be included in CORS responses from the server. The value `\"*\" means that all headers are allowed.\n* `exposedHeaders`: An array of exposed headers, which specifies the headers that can be included in CORS responses from the server and are visible to clients. The values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n* `allowCredentials`: A boolean value that indicates whether CORS requests with credentials (such as cookies or authentication tokens) are allowed. By default, this property is set to `true`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/**\")\n                    .allowedOrigins(allowedOrigins)\n                    .allowedMethods(\"*\")\n                    .allowedHeaders(\"*\")\n                    .exposedHeaders(\"token\", \"userId\")\n                    .allowCredentials(true);\n        }\n    };\n}\n",
              "description": ""
            },
            "name": "corsConfigurer",
            "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of `CorsRegistry`, which represents the set of\n       * CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new mapping to the existing set of mappings\n       * in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the\n       * mapping applies to all URLs.\n       * \t- `allowedOrigins`: An array of allowed origins, which specifies the domains or\n       * subdomains that are allowed to make CORS requests to the server.\n       * \t- `allowedMethods`: An array of allowed HTTP methods, which specifies the methods\n       * that are allowed to be used in CORS requests to the server. The value `\"*\" means\n       * that all methods are allowed.\n       * \t- `allowedHeaders`: An array of allowed headers, which specifies the headers that\n       * can be included in CORS responses from the server. The value `\"*\" means that all\n       * headers are allowed.\n       * \t- `exposedHeaders`: An array of exposed headers, which specifies the headers that\n       * can be included in CORS responses from the server and are visible to clients. The\n       * values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n       * \t- `allowCredentials`: A boolean value that indicates whether CORS requests with\n       * credentials (such as cookies or authentication tokens) are allowed.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 36,
                "end": 58
              }
            },
            "item_type": "method",
            "length": 39
          },
          {
            "id": "a8534ea8-5422-2794-f544-1cdf14a6b9c4",
            "ancestors": [
              "fa9b8b47-a1f7-f7a6-c847-467952b39e81",
              "a62d7b63-c822-6db5-cd4a-5142c6974dc0"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing incoming requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that is being modified by adding mappings to its configuration.\n\n* `registry`: The Cors registry to be updated with the mappings.\n* `allowedOrigins`: An array of strings representing the origins allowed to make requests to the server.\n* `allowedMethods`: An array of strings representing the HTTP methods allowed for making requests to the server.\n* `allowedHeaders`: An array of strings representing the headers allowed to be included in responses from the server.\n* `exposedHeaders`: An array of strings representing the headers that can be exposed by the server in responses.\n* `allowCredentials`: A boolean indicating whether credentials (e.g., authentication tokens) should be allowed in requests.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void configure(WebMvcConfigurer config) {\n    config.addCorsMappings(CorsRegistry);\n}\n",
              "description": ""
            },
            "name": "addCorsMappings",
            "code": "@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": " ",
              "indent": 6,
              "comment": {
                "start": 61,
                "end": 86
              }
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "An Email Template Config class that sets up email template handling for an application using Thymeleaf templates. It provides a template engine and message source for dynamic email content generation, and configures caching, encoding, and other settings. The class also defines the path to the email templates and their format.",
        "items": [
          {
            "id": "5c1c011a-13c2-a196-a747-246444dc7013",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class for email templates in a Spring Boot application. It provides methods for configuring a ResourceBundleMessageSource for email messages and a Spring Template Engine with Thymeleaf-specific settings and an email message source. The class also defines an ITemplateResolver instance with customized configuration settings for Thymeleaf template resolution.",
            "name": "EmailTemplateConfig",
            "code": "@Configuration\n@RequiredArgsConstructor\npublic class EmailTemplateConfig {\n\n  private final EmailTemplateProperties templateProperties;\n  private final EmailTemplateLocalizationProperties localizationProperties;\n\n  /**\n   * creates a `ResourceBundleMessageSource` instance with configuration options set\n   * from the `localizationProperties` object, and returns it.\n   * \n   * @returns a `ResourceBundleMessageSource` instance configured to handle email localization.\n   * \n   * \t- `ResourceBundleMessageSource`: This is the class that represents the message\n   * source for email localization.\n   * \t- `setBasename(localizationProperties.getPath())`: This sets the base name of the\n   * resource bundle file.\n   * \t- `setDefaultLocale(Locale.ENGLISH)`: Sets the default locale for the message source.\n   * \t- `setDefaultEncoding(localizationProperties.getEncoding())`: Sets the default\n   * encoding for the message source.\n   * \t- `setCacheSeconds(localizationProperties.getCacheSeconds())`: Sets the cache\n   * seconds for the message source.\n   */\n  @Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n\n  /**\n   * creates a Spring Template Engine instance and configures it with a Thymeleaf\n   * Template Resolver and an Email Message Source for rendering emails.\n   * \n   * @param emailMessageSource message source for email-related messages used by the SpringTemplateEngine.\n   * \n   * \t- `ResourceBundleMessageSource`: This interface represents a message source that\n   * retrieves message keys from a resource bundle. It provides access to messages in\n   * various formats, including HTML, XML, and YAML.\n   * \n   * @returns a Spring Template Engine instance with Thymeleaf-specific settings and a\n   * message source for email messages.\n   * \n   * \t- The SpringTemplateEngine is initialized with a new instance.\n   * \t- A template resolver is set to `thymeleafTemplateResolver()`.\n   * \t- A message source for emails is set to `emailMessageSource`.\n   */\n  @Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n\n  /**\n   * creates a `ITemplateResolver` instance that sets the prefix, suffix, mode, encoding\n   * and caching properties for Thymeleaf template resolution.\n   * \n   * @returns a `ITemplateResolver` instance with customized configuration settings for\n   * Thymeleaf template resolution.\n   * \n   * \t- `templateProperties`: This is an instance of `ITemplateProperties`, which\n   * contains information about the Thymeleaf template, such as its path, format, mode,\n   * and encoding.\n   * \t- `prefix`: This is a string that represents the prefix of the template path. If\n   * the template path ends with the file separator, this property is set to the template\n   * path itself. Otherwise, it is set to the template path concatenated with the file\n   * separator.\n   * \t- `suffix`: This is a string that represents the suffix of the template path. It\n   * contains the format of the template.\n   * \t- `templateMode`: This is an integer that represents the mode of the template.\n   * It can be one of the following values: `ITemplateMode.NONE`, `ITemplateMode.HTML`,\n   * or `ITemplateMode.XML`.\n   * \t- `characterEncoding`: This is a string that represents the character encoding\n   * of the template. It can be any of the supported encodings, such as `UTF-8`,\n   * `ISO-8859-1`, etc.\n   * \t- `cacheable`: This is a boolean value that indicates whether the template should\n   * be cached or not. If set to `true`, the template will be cached; otherwise, it\n   * will not be cached.\n   */\n  private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }\n\n}",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 14,
                "end": 20
              }
            },
            "item_type": "class",
            "length": 99
          },
          {
            "id": "313a72f7-b234-3cb5-b54f-6d05c4ed3a9e",
            "ancestors": [
              "5c1c011a-13c2-a196-a747-246444dc7013"
            ],
            "type": "function",
            "description": "creates a `ResourceBundleMessageSource` instance for email localization, setting the basename, default locale, default encoding, and cache seconds according to the `localizationProperties`.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a ResourceBundleMessageSource instance configured for email localization.\n\n* `ResourceBundleMessageSource`: This is the class that is being returned, which implements the `MessageSource` interface and provides access to message keys in a resource bundle.\n* `setBasename()`: This method sets the basename of the resource bundle file, which is the name of the file without the file extension. In this case, it is set to `localizationProperties.getPath()`.\n* `setDefaultLocale()`: This method sets the default locale for the message source, which determines the language and regional settings that are used when looking up messages in the resource bundle. It is set to `Locale.ENGLISH` in this case.\n* `setDefaultEncoding()`: This method sets the default encoding for the message source, which determines the character set used when reading or writing the resource bundle file. It is set to `localizationProperties.getEncoding()` in this case.\n* `setCacheSeconds()`: This method sets the number of seconds that the message source will cache messages in memory before checking the resource bundle file again. It is set to `localizationProperties.getCacheSeconds()` in this case.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n",
              "description": ""
            },
            "name": "emailMessageSource",
            "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 27,
                "end": 43
              }
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "223a5749-a0bf-d7aa-ef44-8515ed1d9a46",
            "ancestors": [
              "5c1c011a-13c2-a196-a747-246444dc7013"
            ],
            "type": "function",
            "description": "creates a Spring Template Engine instance, sets its template resolver and message source, and returns the engine.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for email-related templates, providing a way to localize and manage email-related messages within the Thymeleaf template engine.\n\n* `ResourceBundleMessageSource`: This is the message source interface that provides the messages for the template engine. It can be used to retrieve messages in different languages and cultures.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance configured with Thymeleaf template resolver and email message source.\n\n* `SpringTemplateEngine`: This is the base class that provides the functionality for rendering Thymeleaf templates using the Spring framework.\n* `templateResolver()`: This is an instance of `ThymeleafTemplateResolver`, which is responsible for resolving the Thymeleaf templates to be rendered.\n* `emailMessageSource()`: This is an instance of `ResourceBundleMessageSource`, which provides the email messages that are used in the template rendering process.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n",
              "description": "\nThe code creates a bean for the emailMessageSource object, which is used to create an instance of the SpringTemplateEngine class. The thymeleafTemplateResolver() method is also called, which creates an instance of the ClassLoaderTemplateResolver class and sets various properties. Finally, the template engine's message source is set to the created instance of ResourceBundleMessageSource using setTemplateEngineMessageSource(), resulting in a fully configured SpringTemplateEngine object that can be used for email-related templates."
            },
            "name": "thymeleafTemplateEngine",
            "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 53,
                "end": 70
              }
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "d09a32fc-8f6a-76a5-9a48-7b217f4a389f",
            "ancestors": [
              "5c1c011a-13c2-a196-a747-246444dc7013"
            ],
            "type": "function",
            "description": "creates a `ITemplateResolver` instance for Thymeleaf templates, setting prefix and suffix based on property values, mode, encoding, and cacheability.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` instance configured to resolve Thymeleaf templates based on their location and properties.\n\n* `ClassLoaderTemplateResolver`: This is the class that implements the `TemplateResolver` interface and provides functionality for resolving Thymeleaf templates.\n* `prefix`: The prefix of the template path, which is set to the full path of the template if it ends with the file separator character (`file.separator`), or the concatenation of the template path and file separator otherwise.\n* `suffix`: The suffix of the template path, which is set to the format of the template.\n* `templateMode`: The mode of the template, which can be either `HTML`, `XML`, or `TEXT`.\n* `characterEncoding`: The character encoding of the template, which can be set to a specific encoding or `UTF-8` by default.\n* `cacheable`: A boolean indicating whether the template is cacheable or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// ClassName is the class name for the template resolver\nITemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n// Set the prefix and suffix for the template resolver\ntemplateResolver.setPrefix(templateProperties.getPath());\ntemplateResolver.setSuffix(templateProperties.getFormat());\n\n// Set the template mode for the template resolver\ntemplateResolver.setTemplateMode(templateProperties.getMode());\n\n// Set the character encoding for the template resolver\ntemplateResolver.setCharacterEncoding(templateProperties.getEncoding());\n\n// Set whether the template is cacheable or not\ntemplateResolver.setCacheable(templateProperties.isCache());\n",
              "description": ""
            },
            "name": "thymeleafTemplateResolver",
            "code": "private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 78,
                "end": 104
              }
            },
            "item_type": "method",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `FileUploadConfig` that sets up multipart file upload settings for a Spring Boot application. The class sets the maximum file size limit in kilobytes using the `@Value` annotation and creates a `MultipartConfigElement` bean using the `MultipartConfigFactory`. The `multipartConfigElement()` method returns a configured `MultipartConfig` instance that can be used to specify the maximum file size and request size limits.",
        "items": [
          {
            "id": "0daab50e-84bf-cc96-1b47-f48c115e824f",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class that enables the maximum file size and request size for multipart requests in Spring Boot. The class has one field and one method: the field stores the maximum size of files in kilobytes, and the method creates a MultipartConfigElement instance with the set maximum file size and request size.",
            "name": "FileUploadConfig",
            "code": "@Configuration\npublic class FileUploadConfig {\n\n  @Value(\"${files.maxSizeKBytes}\")\n  private int maxSizeKBytes;\n\n  @Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "40ac40f7-be37-5bb1-ed4c-6296b4ca31ad",
            "ancestors": [
              "0daab50e-84bf-cc96-1b47-f48c115e824f"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` object for use in Spring WebFlux. The created config element sets maximum file size and request size limits in kilobytes, respectively.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a `MultipartConfig` instance with configuration settings for maximum file size and request size.\n\n* `MultipartConfigFactory`: This is the class that provides methods for configuring multipart content.\n* `setMaxFileSize()` and `setMaxRequestSize()`: These two methods set the maximum file size and maximum request size for multipart content, respectively. The values are specified in kilobytes (KB).\n\nThe output of this function is a `MultipartConfig` object, which represents the configuration for handling multipart content.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n}\n",
              "description": ""
            },
            "name": "multipartConfigElement",
            "code": "@Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "A class named `EmailTemplateLocalizationProperties` that is a part of a larger configuration system for email location-related properties. The class has several instance variables including `path`, `encoding`, and `cacheSeconds`. These variables are used to specify various details related to the localization of email templates. The class is marked with various annotations, such as `@Data`, `@Component`, `@ConfigurationProperties`, and `@Prefix`, which help in configuring the class within the larger system.",
        "items": [
          {
            "id": "d794a5de-1c80-b19a-564f-aa1adb33bc97",
            "ancestors": [],
            "type": "function",
            "description": "represents a configuration class for email localization properties, including path, encoding, and cache seconds.\nFields:\n\t- path (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file.\n\t- encoding (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding used for email templates.\n\t- cacheSeconds (int): in the EmailTemplateLocalizationProperties class represents the number of seconds that an email template's location data is cached before it is refreshed.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding used for email templates."
              },
              {
                "name": "cacheSeconds",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents the number of seconds that an email template's location data is cached before it is refreshed."
              }
            ],
            "name": "EmailTemplateLocalizationProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.location\")\npublic class EmailTemplateLocalizationProperties {\n  private String path;\n  private String encoding;\n  private int cacheSeconds;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An Email Template Properties class that allows configuration of email templates. The class has properties for path, format, encoding, mode, and cache, which can be used to customize the behavior of email template rendering. The class uses Spring Boot's ConfigurationProperties and Lombok annotations to simplify its definition and use.",
        "items": [
          {
            "id": "aaaab7e9-6645-f2b7-cd4e-8fcf32cde333",
            "ancestors": [],
            "type": "function",
            "description": "is used to store email template settings such as path, format, encoding, mode, and cache status in Spring Boot application.\nFields:\n\t- path (String): in EmailTemplateProperties represents a string value specifying the file path for storing email templates.\n\t- format (String): in the EmailTemplateProperties class is a String variable representing the format of an email template.\n\t- encoding (String): in the EmailTemplateProperties class specifies the character encoding to be used for email template rendering.\n\t- mode (String): in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\".\n\t- cache (boolean): in the EmailTemplateProperties class is of type boolean and represents whether or not to cache email templates.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in EmailTemplateProperties represents a string value specifying the file path for storing email templates."
              },
              {
                "name": "format",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class is a String variable representing the format of an email template."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class specifies the character encoding to be used for email template rendering."
              },
              {
                "name": "mode",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\"."
              },
              {
                "name": "cache",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class is of type boolean and represents whether or not to cache email templates."
              }
            ],
            "name": "EmailTemplateProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.template\")\npublic class EmailTemplateProperties {\n  private String path;\n  private String format;\n  private String encoding;\n  private String mode;\n  private boolean cache;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "a class called `MailProperties` that represents configuration properties related to sending emails. The class has fields for host, username, password, port, protocol, debug, and devMode. These fields are annotated with various Spring Boot annotations, such as `@Data`, `@ConfigurationProperties`, and `@ConfigurationProperties(prefix = \"spring.mail\")`. The `MailProperties` class also defines methods to retrieve the values of these fields, such as `getHost()`, `getUsername()`, `getPassword()`, and `getPort()`.",
        "items": [
          {
            "id": "db30a408-c9cf-778f-7547-22e8284f6833",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class that defines properties related to sending emails using Spring Boot, including the mail host, username, password, port, protocol, debug, and dev mode.\nFields:\n\t- host (String): in MailProperties represents the mail server hostname.\n\t- username (String): in the MailProperties class is of type String and represents a user name for sending emails.\n\t- password (String): in MailProperties represents a string value used to authenticate mail server connections.\n\t- port (int): in MailProperties represents an integer value indicating the mail server's port number for communication.\n\t- protocol (String): in MailProperties represents a mail protocol (e.g., SMTP, IMAP, POP3) used for sending and receiving emails.\n\t- debug (boolean): in the MailProperties class is a boolean flag indicating whether the mail server's debugging capabilities are enabled.\n\t- devMode (boolean): in the MailProperties class is a boolean flag indicating whether the mail server settings are for development use or not.\n\n",
            "fields": [
              {
                "name": "host",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents the mail server hostname."
              },
              {
                "name": "username",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class is of type String and represents a user name for sending emails."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a string value used to authenticate mail server connections."
              },
              {
                "name": "port",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents an integer value indicating the mail server's port number for communication."
              },
              {
                "name": "protocol",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a mail protocol (e.g., SMTP, IMAP, POP3) used for sending and receiving emails."
              },
              {
                "name": "debug",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class is a boolean flag indicating whether the mail server's debugging capabilities are enabled."
              },
              {
                "name": "devMode",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class is a boolean flag indicating whether the mail server settings are for development use or not."
              }
            ],
            "name": "MailProperties",
            "code": "@Data\n@ConfigurationProperties(prefix = \"spring.mail\")\npublic class MailProperties {\n  private String host;\n  private String username;\n  private String password;\n  private int port;\n  private String protocol;\n  private boolean debug;\n  private boolean devMode;\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enum that contains four constant Strings representing different email templates names. Each template name is assigned a unique filename.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "A REST controller class named AmenityController that implements the AmenitiesApi interface. The class contains methods for retrieving and updating amenities in a community, as well as deleting an amenity and listing all amenities in a community. The class uses Lombok, Spring Web Flux, and Spring Data JPA.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9ddebb44-d3b0-9aa1-544f-9d54254447c7",
            "ancestors": [],
            "type": "function",
            "description": "provides functionality for retrieving and manipulating amenities in a system. It exposes several endpoints for getting and updating amenities, as well as deleting them when they are no longer needed.",
            "name": "AmenityController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 59
          },
          {
            "id": "9b8db035-49ab-dc9d-3c4f-30159716c42e",
            "ancestors": [
              "9ddebb44-d3b0-9aa1-544f-9d54254447c7"
            ],
            "type": "function",
            "description": "retrieves the details of an amenity with a given ID from the database using `amenitySDJpaService`, maps it to a response object using `amenityApiMapper`, and returns it as a `ResponseEntity` with a status code of `OK` or `NOT_FOUND` depending on the result.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "identifier of the amenity for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the amenity details in JSON format.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is a response entity that contains the amenity details in the form of `GetAmenityDetailsResponse`.\n* `GetAmenityDetailsResponse`: This class represents the response to the `getAmenityDetails` function, which contains the amenity details fetched from the database. It has several attributes, including `amenityId`, `name`, `description`, `icon`, and `latitude`.\n* `map(Function<T, U> mapper)`: This line uses the `map` method to apply a function to the output of the `getAmenityDetails` function. In this case, the function is `amenityApiMapper::amenityToAmenityDetailsResponse`, which maps the `GetAmenityDetailsResponse` object to a more accessible form.\n* `orElse(T alternative)`: This line provides an alternative output if the original output is not found. In this case, the alternative output is a `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testGetAmenityDetails() {\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(\"amenityId\");\n    \n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertNotNull(response.getBody().getName());\n}\n",
              "description": ""
            },
            "name": "getAmenityDetails",
            "code": "@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "b15b20cc-a89a-a69c-b643-599e816764b4",
            "ancestors": [
              "9ddebb44-d3b0-9aa1-544f-9d54254447c7"
            ],
            "type": "function",
            "description": "retrieves a list of amenities from the database using `amenitySDJpaService`, and maps them to `GetAmenityDetailsResponse` objects using `amenityApiMapper`. It then returns an `ResponseEntity` with the mapped response.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community whose amenities are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a set of `GetAmenityDetailsResponse` objects containing the details of the amenities for a specific community.\n\n* `ResponseEntity`: This is the outermost class that represents a response entity in RESTful APIs. It has an `ok` field that indicates whether the response is successful or not.\n* `Set<GetAmenityDetailsResponse>`: This is a set of `GetAmenityDetailsResponse` objects, which are the inner most class representing the amenities with their details.\n* `amenitySDJpaService`: This is an instance of a JPA service that provides methods for interacting with the database.\n* `communityId`: This is the parameter passed to the function, which represents the community ID.\n* `amenityApiMapper`: This is an instance of an API mapper class that maps the JPA entities to the response entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String communityId = \"communityId\";\nSet<GetAmenityDetailsResponse> response = amenityController.listAllAmenities(communityId);\n",
              "description": ""
            },
            "name": "listAllAmenities",
            "code": "@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "eeb16424-f30e-bf9e-d24f-371478ae746d",
            "ancestors": [
              "9ddebb44-d3b0-9aa1-544f-9d54254447c7"
            ],
            "type": "function",
            "description": "adds amenities to a community through the creation of new amenities in the database and returns a response entity indicating whether the operation was successful.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the amenities will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: A string representing the ID of the community to which the amenities will be added.\n* `requestBody`: The AddAmenityRequest object containing the amenities to be added to the community. It has attributes such as `amenities`, which is a list of Amenity objects, and `id`, which is an identifier for the request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `AddAmenityResponse` object containing a list of created amenities.\n\n* The `ResponseEntity<AddAmenityResponse>` object represents a successful response with an `AddAmenityResponse` object inside it.\n* The `AddAmenityResponse` object contains a list of `Amenity` objects representing the newly created amenities in the community.\n* The `map` method is used to transform the `ResponseEntity<AddAmenityResponse>` object into a `ResponseEntity` object with an `ok` status code.\n* The `orElse` method is used as a fallback to return a `ResponseEntity.notFound().build()` object if the original response cannot be converted to an `ok` status code.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String communityId = \"123\";\nAddAmenityRequest request = new AddAmenityRequest();\nrequest.setAmenities(new ArrayList<Amenity>(){{\n    Amenity amenity1 = new Amenity();\n    amenity1.setName(\"Amenity 1\");\n    Amenity amenity2 = new Amenity();\n    amenity2.setName(\"Amenity 2\");\n    add(amenity1);\n    add(amenity2);\n}});\nResponseEntity<AddAmenityResponse> response = controller.addAmenityToCommunity(communityId, request);\n",
              "description": "\nExplanation: In this example, we have a community with ID \"123\" and two amenities with names \"Amenity 1\" and \"Amenity 2\". We create an AddAmenityRequest object with these two amenities. Then, we pass the request to the addAmenityToCommunity method of the controller. The method creates a new response entity with the list of created amenities as its body."
            },
            "name": "addAmenityToCommunity",
            "code": "@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "46e4fd63-62af-70af-8240-ed56b9dd176e",
            "ancestors": [
              "9ddebb44-d3b0-9aa1-544f-9d54254447c7"
            ],
            "type": "function",
            "description": "deletes an amenity based on its ID, returning a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "id of the amenity to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP status code of `NO_CONTENT` or `NOT_FOUND`, indicating whether the amenity was successfully deleted or not.\n\n* `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully deleted or not.\n* `HttpStatus`: The HTTP status code of the response entity, which is either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was found and deleted successfully or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}\n",
              "description": ""
            },
            "name": "deleteAmenity",
            "code": "@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "d3b7c001-b97b-249c-6d43-10b9e2b4842a",
            "ancestors": [
              "9ddebb44-d3b0-9aa1-544f-9d54254447c7"
            ],
            "type": "function",
            "description": "updates an amenity's information in the database based on a request body containing the updated amenity details, and returns a response indicating whether the update was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "unique identifier of the amenity being updated.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "`UpdateAmenityRequest` object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must be valid according to the schema defined in the `@VALID` annotation.\n* `@RequestBody`: Marks the `request` parameter as a serialized JSON object in the request body.\n* `UpdateAmenityRequest`: Represents the request body schema for updating an amenity, containing fields such as `amenityId`, `name`, `description`, and `location`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code returned by the function. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response entity that contains the HTTP status code and other information about the response. The `status()` method returns the `HttpStatus` object representing the status code.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n",
              "description": "\nHere is an example of how to use this Java method:\n"
            },
            "name": "updateAmenity",
            "code": "@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. It has a single method `login()` that takes a `LoginRequest` object as input and returns a `ResponseEntity<Void>` object with custom headers containing user ID and JWT token. The method calls the `login()` method of an `AuthenticationService` class to perform the actual authentication, and then creates and populates the custom headers based on the result of the authentication process.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d5065615-16e5-2194-9847-5f285889797b",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring REST controller that implements the AuthenticationApi interface. It handles login requests and returns a ResponseEntity with the user ID and JWT token in the HTTP headers.",
            "name": "AuthenticationController",
            "code": "@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 21
          },
          {
            "id": "5d8fac9c-5b1a-8f99-aa47-d38c7cb1d285",
            "ancestors": [
              "d5065615-16e5-2194-9847-5f285889797b"
            ],
            "type": "function",
            "description": "authenticates a user using the `AuthenticationService`, and returns an `ResponseEntity` with an `OK` status code and custom headers containing authentication data.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request containing the user credentials for validation and authentication by the authentication service.\n\n* `@Valid`: This annotation indicates that the `loginRequest` parameter must be valid and contain all required fields.\n* `LoginRequest`: This class represents the request for logging in, with attributes such as `username`, `password`, and `grantType`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing headers generated based on the authentication data.\n\n* `ResponseEntity`: This class represents a response entity that contains information about the status of the request. In this case, it is set to `OK`, indicating that the login was successful.\n* `headers`: This attribute contains a list of headers that are added to the response entity. The headers contain information about the authentication data, such as the user's username and the authentication method used.\n* `build()`: This method creates the response entity by combining the header and body attributes. In this case, it returns a response entity with the `OK` status and the authentication data headers.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AuthenticationController authenticationController;\n\npublic void useLoginMethod() {\n    LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n    ResponseEntity<Void> responseEntity = authenticationController.login(loginRequest);\n    if (responseEntity.getStatusCode().equals(HttpStatus.OK)) {\n        System.out.println(\"Login Successful!\");\n    } else {\n        System.err.println(\"Login Unsuccessful!\");\n    }\n}\n",
              "description": "\nIn this example, the \"useLoginMethod\" method is a part of the main class, and it uses the login method to log in with a username and password that are provided in the LoginRequest object. The responseEntity variable is then created using the return value from the login method. If the status code of the response entity is equal to HttpStatus.OK (200), the user is logged in successfully. Otherwise, an error message is printed to the console."
            },
            "name": "login",
            "code": "@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "a2dc5549-3588-3f8f-af4a-c053f5456f60",
            "ancestors": [
              "d5065615-16e5-2194-9847-5f285889797b"
            ],
            "type": "function",
            "description": "creates an HTTP headers object containing user ID and JWT token for authentication purposes based on provided AuthenticationData object.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user's login information, providing the user ID and JWT token used to authenticate the request.\n\n* `getUserId()`: retrieves the user ID associated with the authentication data.\n* `getJwtToken()`: retrieves the JWT token associated with the authentication data.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java `javax.net.http` package.\n* `add()` methods: These are methods that allow adding headers to the overall HTTP headers for a request or response. In this case, they add two headers: \"userId\" and \"token\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AuthenticationController authenticationController = new AuthenticationController(authenticationService);\nString userId = \"userId\";\nString token = \"token\";\nAuthenticationData authenticationData = new AuthenticationData(userId, token);\nHttpHeaders headers = authenticationController.createLoginHeaders(authenticationData);\nheaders.get(\"userId\"); // returns the userId from the input\nheaders.get(\"token\"); // returns the token from the input\n",
              "description": ""
            },
            "name": "createLoginHeaders",
            "code": "private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A `BookingController` class that implements the `BookingsApi` interface using Spring WebFlux. It provides a RESTful API for managing bookings, including creating, reading, updating, and deleting bookings. The controller uses Lombok to generate getters and setters for its fields, and Slf4j for logging.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "fe3e7146-74e0-eab6-7b4f-a786b5662b8f",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot RESTful controller that implements the BookingsApi interface. It has a single method, deleteBooking(), which takes two path variables (amenityId and bookingId) and deletes a booking based on those IDs. The method returns a ResponseEntity with either NO_CONTENT or NOT_FOUND status code depending on whether the booking was successfully deleted or not.",
            "name": "BookingController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class BookingController implements BookingsApi {\n\n  private final BookingService bookingSDJpaService;\n\n  @Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 18
          },
          {
            "id": "13a0d791-a12d-df93-7947-5b8a73f22b21",
            "ancestors": [
              "fe3e7146-74e0-eab6-7b4f-a786b5662b8f"
            ],
            "type": "function",
            "description": "deletes a booking based on its amenity ID and ID, returning a HTTP response code indicating whether the deletion was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "identifier of an amenity for which a booking is to be deleted.",
                "complex_type": false
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "identifier of the booking to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the booking was successfully deleted, and no content was returned in response.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the booking could not be found, and therefore it was not deleted.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// This example assumes that the BookingController class has been imported and instantiated as a variable named bookingsApi.\nString amenityId = \"12345\"; // Replace with a valid ID for a specific amenity\nString bookingId = \"98765\"; // Replace with a valid ID for a specific booking made by the user\nResponseEntity<Void> response = bookingsApi.deleteBooking(amenityId, bookingId);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"Booking successfully deleted\");\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"No booking found with the given ID\");\n}\n",
              "description": ""
            },
            "name": "deleteBooking",
            "code": "@Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "An API for managing communities, admins, and houses. The API includes endpoints for listing all communities, details about a specific community, adding or removing admins or houses from a community, and deleting a community. The code uses various packages such as Spring WebFlux, Spring Data JPA, and Jackson for JSON serialization and deserialization.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "824d5f42-504c-0e9b-114c-0577fc038cb6",
            "ancestors": [],
            "type": "function",
            "description": "handles various operations related to communities, including listing all communities, listing community admins, listing community houses, adding a new community, adding a new house to a community, removing a house from a community, removing an admin from a community, and deleting a community. The controller uses the `CommunityService` class to perform these operations and returns response entities based on the outcome of each operation.",
            "name": "CommunityController",
            "code": "@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 52,
                "end": 55
              }
            },
            "item_type": "class",
            "length": 152
          },
          {
            "id": "d7af3480-20ca-ba83-504c-47fd3c3dc700",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "receives a `CreateCommunityRequest` object, converts it into a `CommunityDto`, creates a new community using the `communityService`, and maps the created community back to a `CreateCommunityResponse`. The response is then returned with a status code of `HttpStatus.CREATED`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object that contains the data required to create a new community, which is then used by the function to create the community and return the response.\n\n* `@Valid`: This annotation indicates that the `CreateCommunityRequest` object has been validated by the `@Valid` processor.\n* `@RequestBody`: This annotation specifies that the `CreateCommunityRequest` object should be passed in the request body of the API.\n* `CreateCommunityRequest`: This class represents the request to create a community, containing various attributes such as name, description, and tags.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the newly created community details.\n\n* `ResponseEntity`: This is a class that represents a response entity, which is an aggregation of metadata and content. In this case, the content is the `CreateCommunityResponse`.\n* `HttpStatus`: This is an enumeration that indicates the HTTP status code of the response. In this case, it is set to `CREATED`, which means the request was successful and the community was created.\n* `body`: This is a reference to the content of the response entity, which in this case is a `CreateCommunityResponse`.\n* `CreateCommunityResponse`: This class represents the response to the create community request. It contains various properties, including the ID of the newly created community, the name of the community, and the status of the creation (either `CREATED` or `FAILED`).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My Community\");\nrequest.setDescription(\"This is my community.\");\nrequest.setIsPrivate(false);\nrequest.setAdmins(new HashSet<String>() {{\n    add(\"user-1\");\n}});\nrequest.setHouses(new HashSet<CommunityHouseName>() {{\n    CommunityHouseName house = new CommunityHouseName();\n    house.setName(\"house-1\");\n    house.setDescription(\"This is house 1.\");\n    add(house);\n}});\nResponseEntity<CreateCommunityResponse> response = communityApiController.createCommunity(request);\n",
              "description": "\nIn this example, the method createCommunity is called with an instance of CreateCommunityRequest as input. The name and description fields are set to \"My Community\" and \"This is my community.\" respectively. The isPrivate field is set to false indicating that it is a public community. The admin field contains a single user id \"user-1\". The houses field contains a single house with the name \"house-1\" and the description field containing \"This is house 1.\"\nThe response from this request would be an instance of CreateCommunityResponse which contains the newly created Community object in the community field."
            },
            "name": "createCommunity",
            "code": "@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "fdb134dd-1577-e496-9e4b-a73c531ba8d5",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "retrieves a list of all communities from the community service and maps them to a REST API response object using the `communityApiMapper`. The response is then returned as a `ResponseEntity` with an HTTP status code of `OK` and the mapped community details in the body.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page size and sort order for retrieving community details from the service.\n\n* `@PageableDefault(size = 200)` - The page size is set to 200 by default.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetCommunityDetailsResponse",
              "description": "a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This is the class that represents the response entity returned by the function. It has a `getCommunities()` method that adds all the community details returned by the function to a list.\n* `pageable`: This is an optional parameter that represents the pageable request parameters. If present, it defines the size of the page and the Sort order for the results.\n* `communityService`: This is the class that provides the methods for listing all communities.\n* `communityApiMapper`: This is the class that maps the community service results to a rest API response.\n\nIn summary, the function receives a `pageable` parameter, lists all communities using the `communityService`, and maps the results to a REST API response using the `communityApiMapper`. The response entity returned by the function has a list of community details as its property.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = PageRequest.of(0, 20);\nSet<Community> communityDetails = communityService.listAll(pageable);\nSet<GetCommunityDetailsResponseCommunity> communityDetailsResponse = communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n",
              "description": "\nIn this example the method listAllCommunity is invoked with a pageable parameter, which contains information about the pagination of the request. The response from the service is then mapped to a response object for REST API using a mapper class that maps the Community objects into the GetCommunityDetailsResponseCommunity objects and finally stored in the response variable as a Set of GetCommunityDetailsResponseCommunity."
            },
            "name": "listAllCommunity",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 14
          },
          {
            "id": "002e3dfc-faad-b6a8-c14c-47679dcd1b9e",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "retrieves community details based on the given ID and maps them to a REST API response. It returns an `ResponseEntity` with the converted communities list.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community whose details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetCommunityDetailsResponse",
              "description": "a `ResponseEntity` object with a status of `ok` and a list of communities.\n\n* `ResponseEntity<GetCommunityDetailsResponse>` is an entity that wraps the response to the request. It has an `ok` field which is set to `true` if the request was successful and a `body` field that contains the `GetCommunityDetailsResponse`.\n* `GetCommunityDetailsResponse` is a class that represents the response to the request. It has a `communities` field that contains a list of communities.\n* The `communities` list is an array of `Community` objects, each representing a community with its ID, name, and other details.\n* The `map` methods are used to convert the entities returned by the service into the desired response format. For example, `map(communityApiMapper::communityToRestApiResponseCommunity)` maps the `Community` object to the `GetCommunityDetailsResponse.communities` list.\n* The `orElseGet` method is used to provide a default response if the request fails. In this case, it returns a `ResponseEntity.notFound().build()` object with an error message indicating that the community with the provided ID could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "GetCommunityDetailsResponse response = communityApiService.listCommunityDetails(communityId).block();\nif (response != null) {\n    return ResponseEntity.ok(response);\n} else {\n    return ResponseEntity.notFound().build();\n}\n",
              "description": "\nIn this example, the listCommunityDetails method is called on a CommunityApiService with the communityId parameter set to the ID of the community we want to retrieve details for. The response returned by the service method is then stored in a variable named \"response\". If the response is not null, we return an OK (200) HTTP response code along with the response object, otherwise we return a NOT_FOUND (404) HTTP response code."
            },
            "name": "listCommunityDetails",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "ced5e290-d708-2583-df4a-e4632bb0b294",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "receives a community ID and pageable parameter, queries the community service to retrieve a list of admins, maps the results to a REST API response format, and returns the response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which the list of admins is requested.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the page number, size, and sort order, that determine how the list of community admins is retrieved and paginated.\n\n* `@PageableDefault(size = 200)` specifies that the pageable request should default to a page size of 200.\n* `Pageable pageable` represents the pageable request, which can be modified or expanded based on the requirements of the function.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing a successful response with a list of community admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the generic type of the response entity, which contains a list of `CommunityAdmin` objects.\n* `ListCommunityAdminsResponse`: This class represents the response to the API request, which contains a list of `CommunityAdmin` objects.\n* `admins(List<CommunityAdmin>)`: This method returns the list of `CommunityAdmin` objects contained in the response.\n* `ok()`: This method builds an HTTP 200 OK response entity with the list of `CommunityAdmin` objects.\n* `notFound()`: This method builds an HTTP 404 NOT FOUND response entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityApi communityApi;\n\npublic void getAdminsExample() {\n  String communityId = \"1\"; // Replace with the appropriate community id\n  Pageable pageable = PageRequest.of(0, 20); // Replace with the appropriate parameters\n  \n  ListCommunityAdminsResponse response = communityApi.listCommunityAdmins(communityId, pageable).getBody();\n  \n  if (response == null) {\n    System.out.println(\"No admins found in this community\");\n  } else {\n    Set<String> admins = response.getAdmins();\n    for (String admin : admins) {\n      System.out.println(admin);\n}\n",
              "description": "\nThis code would retrieve a list of admins from the community with id=1, and print each admin on a new line in the console.\n\n\nThe following is an example on how method deleteCommunity would be used:\n"
            },
            "name": "listCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "c7dd9717-a631-76ad-9c42-8d8c7ca2a8b7",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "receives a community ID and a pageable parameter, and returns a `ResponseEntity` containing a list of houses belonging to that community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community for which the user wants to list all houses.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size for fetching houses from the community, allowing for pagination of the result set.\n\n* `@PageableDefault(size = 200)` specifies the default page size for the list of houses returned in the response. The value `200` indicates that the list will contain a maximum of 200 houses per page.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetHouseDetailsResponse",
              "description": "a `ResponseEntity` object representing a successful response with a list of community houses in a JSON format.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the type of the returned entity, which contains a `houses` field that is a list of `CommunityHouseSet` objects.\n* `GetHouseDetailsResponse`: This is the inner type of the returned entity, which represents the response to the list houses API endpoint. It has a `houses` field that is a list of `CommunityHouse` objects.\n* `CommunityHouseSet`: This is the inner type of the `houses` field in the returned entity, which represents a set of `CommunityHouse` objects for a particular community ID.\n* `CommunityHouse`: This is the inner type of the `CommunityHouse` field in the `CommunityHouseSet` object, which represents a single house belonging to a particular community. It has fields for the house ID, community ID, and other house-related details.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\n@Test\npublic void testListCommunityHouses() {\n    // given\n    String communityId = \"test-community\";\n    Pageable pageable = PageRequest.of(0, 1);\n\n    // when\n    ResponseEntity<GetHouseDetailsResponse> response = communityController.listCommunityHouses(communityId, pageable);\n\n    // then\n    assertThat(response).isNotNull();\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.getBody().getHouses()).hasSizeGreaterThanOrEqualTo(1);\n}\n",
              "description": "\nIn this example, a mock CommunityController is created and used to test the listCommunityHouses method. The community ID is set to \"test-community\" and the pageable object is defined to retrieve only one result. The response is then checked to ensure it has an OK status code, the body contains at least one house, and is not null."
            },
            "name": "listCommunityHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "8b29d955-9ab1-79bc-ee4a-4b5f57a8554f",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "adds admins to a community identified by the provided ID. It first checks if there are any admins to be added, then calls the `addAdminsToCommunity` method to perform the addition. The function returns a response entity with the updated admin set.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which admins are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the admin details to be added to the specified community.\n\n* `@Valid`: Indicates that the request body is valid and contains the required information for adding admins to a community.\n* `@RequestBody`: Represents the request body as a whole, which contains the `AddCommunityAdminRequest` object.\n* `AddCommunityAdminRequest`: A class that represents the request sent by the client to add admins to a community. It contains several attributes:\n\t+ `communityId`: The ID of the community to which the admins will be added.\n\t+ `admins`: A list of user IDs that will be added as admins to the specified community.\n\nThe function then processes the request and returns a response entity accordingly.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a body containing an `AddCommunityAdminResponse` object with the added admins.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object in the REST API. It has a `status` field that indicates the HTTP status code of the response (e.g., 200 for OK, 404 for Not Found).\n* `body`: This is a reference to the body of the response entity. In this case, it contains an instance of the `AddCommunityAdminResponse` class, which represents the result of adding admins to a community.\n* `admins`: This is a set of strings that represent the IDs of the added admins.\n\nThe `addCommunityAdmins` function either returns a response entity with a status code of 201 (Created) and a body containing an `AddCommunityAdminResponse`, or it returns a response entity with a status code of 404 (Not Found) if the community with the given ID does not exist.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired CommunityController communityController;\n\n// Add admins to a community by id\ncommunityController.addCommunityAdmins(\"1\", new AddCommunityAdminRequest(\n    Arrays.asList(\"user@mail.com\")));\n",
              "description": "\nThis code would add an admin with the email address \"user@mail.com\" to the community with id 1. The method returns a ResponseEntity containing a body of type AddCommunityAdminResponse, which is a set of admin user IDs.\n\nPlease note that the input values provided are strings only. If any other types were accepted in the request body, they would need to be casted in this example.\n\nThis method call would return an HTTP 201 (Created) response code if successful, or a HTTP 404 (Not Found) if the community with the given id was not found, or a HTTP 500 (Internal Server Error) if there was an internal problem with the server."
            },
            "name": "addCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "3e9a070f-0ced-219b-984e-61656f0954d2",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "receives a request to add houses to a community, retrieves the list of houses and their corresponding IDs, adds them to the community using the community service, and returns the response with the added houses.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the houses will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityHouseRequest",
                "description": "AddCommunityHouseRequest object containing the house names to be added to the specified community, which is passed in from the HTTP request body.\n\n* `@Valid`: Indicates that the request body must be valid according to the provided validation rules.\n* `@PathVariable String communityId`: The ID of the community to which the houses will be added.\n* `@RequestBody AddCommunityHouseRequest request`: The request body contains the houses to be added to the community, which are mapped to a `Set` of `CommunityHouseName` objects using the `communityApiMapper`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityHouseResponse",
              "description": "a `ResponseEntity` object with a ` HttpStatus` code of `CREATED` and a `AddCommunityHouseResponse` object containing the added houses.\n\n* `AddCommunityHouseResponse`: This is the class that represents the response to the API request. It has a single field called `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: The status code of the response, which can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This is the class that represents the response object returned by the API. It has a status code and a body, which in this case is an instance of `AddCommunityHouseResponse`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AddCommunityHouseRequest request = new AddCommunityHouseRequest();\nrequest.setHouses(Set.of(\"house1\", \"house2\"));\n\nResponseEntity<AddCommunityHouseResponse> response = communityApiService.addCommunityHouses(\"communityId\", request);\n",
              "description": "\nThis code will create two house in the community with id `communityId` and return an HTTP status of 201 (CREATED) if successful. If there is a failure in adding the houses, it will return an HTTP status of 400 (BAD REQUEST)."
            },
            "name": "addCommunityHouses",
            "code": "@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }",
            "location": {
              "start": 149,
              "insert": 149,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 17
          },
          {
            "id": "7149ddbe-feb0-6ba0-e248-48f6846222e5",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "retrieves a community and a house ID from the request parameters, then deletes the house from the community using the `communityService`. If successful, it returns a `ResponseEntity` with a `Void` body.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the house belongs, which is used to retrieve the community details and remove the house from it.",
                "complex_type": false
              },
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house to be removed from the specified community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a `ResponseEntity` object representing a successful removal of the house from the specified community.\n\n* `ResponseEntity<Void>`: The type of the response entity, which is Void in this case.\n* `noContent()`: This method returns a ResponseEntity with a status code of 204 (No Content), indicating that the house has been successfully removed from the community without any content returned in the response body.\n* `<Void>`: The type parameter of the ResponseEntity, which represents Void in this case.\n\nTherefore, the output of the `removeCommunityHouse` function can be destructured as follows:\n\nResponseEntity<Void> removed = communityOptional.filter(community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n            .map(removed -> ResponseEntity.noContent().<Void>build())\n            .orElseGet(() -> ResponseEntity.notFound().build());",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void removeCommunityHouse() {\n  String communityId = \"community-id\";\n  String houseId = \"house-id\";\n\n  ResponseEntity<Void> response = communityController.removeCommunityHouse(communityId, houseId);\n\n  assertThat(response).isEqualTo(ResponseEntity.noContent().<Void>build());\n}\n",
              "description": "\nThis code creates a test that demonstrates how the removeCommunityHouse method would be used with the communityId and houseId parameters set to \"community-id\" and \"house-id\". The ResponseEntity object is compared with the expected response of ResponseEntity.noContent().<Void>build() using AssertJ's isEqualTo method. This ensures that the response is the same as what would be returned from the removeCommunityHouse method if it were called with these parameters.\nWhen a unit test is run, it will verify that the method removes the house from the community by comparing the response to ResponseEntity.noContent().<Void>build(). If the response is not equal to this object, then the test would fail and report an error."
            },
            "name": "removeCommunityHouse",
            "code": "@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 167,
              "insert": 167,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 15
          },
          {
            "id": "7ec1a4af-2cd2-5eb6-da4c-7fae6981a903",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "removes an admin from a community based on the provided community ID and admin ID, returning a response entity with HTTP status code indicating success or failure.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which an admin is to be removed.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin to be removed from the community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and resulted in no content being modified or created.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the admin could not be removed from the community, likely because the community or the admin does not exist.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\n// ...\n\ncommunityController.removeAdminFromCommunity(\"123456789\", \"adminId\");\n",
              "description": "\nIn this example, the method is being autowired and called with two inputs: a String representing the ID of the community that the admin is to be removed from (\"123456789\"), and another string representing the ID of the admin that needs to be removed (\"adminId\"). The method returns a ResponseEntity, which contains information about the response received. In this case, if the admin was successfully removed, the response would contain no content (status code 204), otherwise it would return a status code of 404 indicating that the admin could not be found or the community could not be found."
            },
            "name": "removeAdminFromCommunity",
            "code": "@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 183,
              "insert": 183,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "957f9b8c-b39e-7695-9a40-f69a87d0cb45",
            "ancestors": [
              "824d5f42-504c-0e9b-114c-0577fc038cb6"
            ],
            "type": "function",
            "description": "receives a community ID and deletes it from the service, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the community was successfully deleted.\n* `HttpStatus.NOT_FOUND`: This indicates that the specified community could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\ncommunityController.deleteCommunity(\"123\");\n",
              "description": "\nThis call will delete the community with the id of \"123\" from the database, and return a ResponseEntity with a status code 204 (No Content) if it was successfully deleted or a response with a status code 404 (Not Found) if it was not found."
            },
            "name": "deleteCommunity",
            "code": "@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 197,
              "insert": 197,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "A `HouseController` class that implements the `HousesApi` interface. The controller handles requests related to houses, including listing all houses, getting details of a specific house, adding members to a house, and deleting members from a house. The code uses various Spring packages such as `@RestController`, `@RequiredArgsConstructor`, `@Slf4j`, `PageableDefault`, `ResponseEntity`, and `List<CommunityHouse>`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "fb24d790-e863-9db6-7443-7b61bd048c1b",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to houses and their members. It provides endpoints for listing all houses, getting details of a specific house, adding members to a house, and deleting members from a house. The controller uses dependencies such as the HouseMemberMapper and the HouseService to perform these operations.",
            "name": "HouseController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class HouseController implements HousesApi {\n  private final HouseMemberMapper houseMemberMapper;\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 81
          },
          {
            "id": "e0914680-e005-738e-c74d-7574c8d6421d",
            "ancestors": [
              "fb24d790-e863-9db6-7443-7b61bd048c1b"
            ],
            "type": "function",
            "description": "receives a pageable request from the client and list all houses from the service, then maps them to the REST API response format using the provided mapper, and returns the response to the client.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page size and sort order for listing all houses.\n\n* `@PageableDefault(size = 200)` - This annotation sets the default page size for listings to 200.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a list of `GetHouseDetailsResponseCommunityHouseSet`.\n\n* `response`: This is the main output of the function, which is a `GetHouseDetailsResponse` object.\n* `setHouses`: This is a set of `CommunityHouse` objects, which are the details of each house listed in the response.\n* `pageable`: This is an optional parameter that represents the page size and sort order for the list of houses.\n* `houseService`: This is the service used to retrieve the list of houses.\n* `houseApiMapper`: This is the mapper used to transform the list of `CommunityHouse` objects into a set of `GetHouseDetailsResponseCommunityHouse` objects.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<GetHouseDetailsResponse> listAllHouses(@PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n            houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n            houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n}\n",
              "description": ""
            },
            "name": "listAllHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "348c07d0-7834-deb9-0d4e-c453012c8883",
            "ancestors": [
              "fb24d790-e863-9db6-7443-7b61bd048c1b"
            ],
            "type": "function",
            "description": "receives a house ID and returns a `GetHouseDetailsResponse` object with a list of houses matching the provided ID. It uses service-level methods to retrieve the details and map them to a rest API response.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which details are requested, and it is used to retrieve the corresponding house details from the service.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `GetHouseDetailsResponse` object containing a list of houses with their details.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is a generic type that represents an entity with a response body containing a `GetHouseDetailsResponse` object.\n* `GetHouseDetailsResponse`: This class represents the response body of the entity, which contains a list of `CommunityHouse` objects.\n* `CommunityHouse`: This class represents a single house in the community, with attributes such as id, name, and location.\n* `map(Function<T, R> mapper)`: This method applies a mapping function to the output of the `getHouseDetails` method, which transforms the response body into a new form. In this case, the function maps each `CommunityHouse` object to a `GetHouseDetailsResponse` object.\n* `map(Supplier<T> supplier)`: This method returns a stream of `T` objects, where `T` is the type of the output of the `getHouseDetails` method. In this case, the supplier returns an empty stream, which means that the output of the method will be an empty list.\n* `orElse(T otherValue)`: This method returns a new response entity if the result of the previous mapping operation is not present, or the specified `otherValue` otherwise. In this case, if the `getHouseDetails` method does not return a response body, the resulting entity will be an `ResponseEntity.notFound().build()`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "GetHouseDetailsResponse response = houseController.getHouseDetails(\"123\"); // \"123\" being the id of the requested house\n",
              "description": ""
            },
            "name": "getHouseDetails",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "a6d9b5a1-76c7-7aac-f14d-0ff64e04fd68",
            "ancestors": [
              "fb24d790-e863-9db6-7443-7b61bd048c1b"
            ],
            "type": "function",
            "description": "retrieves the members of a house with a given ID and returns them as a list of `HouseMember` objects in a `ListHouseMembersResponse` message.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which members are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the page number and size of the result set, which are used to filter and limit the response from the `houseService.getHouseMembersById()` method.\n\n* `size`: The number of elements to be returned in each page of results.\n* `sort`: The field by which the results should be sorted.\n* `direction`: The direction of sorting (ascending or descending).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ListHouseMembersResponse` object containing the list of members of the specified house.\n\n* `ResponseEntity<ListHouseMembersResponse>`: This is the type of the output returned by the function, which represents a response entity containing a list of members of a house.\n* `ListHouseMembersResponse`: This is a class that contains properties related to the list of members of a house. The properties include:\n\t+ `members`: A list of `HouseMember` objects, representing the members of the house.\n* `ok`: This is a boolean property indicating whether the response was successful or not. If the response was not successful, the value of this property will be `false`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ListHouseMembersResponse response = houseController.listAllMembersOfHouse(\"12345\", pageable);\nif (response.getStatusCode().equals(HttpStatus.OK)) {\n    // Handle successful response\n} else if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n    // Handle error\n}\n",
              "description": ""
            },
            "name": "listAllMembersOfHouse",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 79,
              "insert": 79,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "17c8d09a-9260-d688-ce43-fcdf9a40978d",
            "ancestors": [
              "fb24d790-e863-9db6-7443-7b61bd048c1b"
            ],
            "type": "function",
            "description": "takes a house ID and a request with member details, adds the members to the house, and returns the updated member list in the response.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house to which the members will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object that contains the member details to be added to the house.\n\n* `houseId`: A string representing the unique identifier of the house to which members will be added.\n* `request.getMembers()`: An array of `AddHouseMemberRequest.Members` objects containing the details of the members to be added to the house. Each `Members` object has the following properties:\n\t+ `member`: A string representing the unique identifier of the member to be added.\n\t+ `email`: A string representing the email address of the member.\n\t+ `firstName`: A string representing the first name of the member.\n\t+ `lastName`: A string representing the last name of the member.\n\t+ `phoneNumber`: A string representing the phone number of the member.\n\nIn summary, the `addHouseMembers` function takes a house ID and a list of members to be added to that house, processes them, and returns a response indicating whether the operation was successful or not.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object containing the response to the request, which includes the added house members in a JSON format.\n\n* `response`: This is an instance of the `AddHouseMemberResponse` class, which contains information about the added members.\n* `members`: This is a set of `HouseMember` objects, which represent the added members to the house.\n* `size`: The size of the `members` set, indicating the number of added members.\n\nThe output is structured in the following way:\n\n{\nresponse: {\nmembers: [...],\nsize: 3\n}\n}\n\nWhere `[...]` represents the contents of the `members` set. The `size` property indicates the number of added members.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// This example uses the method addHouseMembers to add multiple members to a house\nAddHouseMemberRequest request = new AddHouseMemberRequest();\nList<HouseMemberDto> membersToBeAdded = new ArrayList<>();\nmembersToBeAdded.add(new HouseMemberDto(\"memberId1\", \"role\"));\nmembersToBeAdded.add(new HouseMemberDto(\"memberId2\", \"role\"));\nrequest.setMembers(membersToBeAdded);\nResponseEntity<AddHouseMemberResponse> response = houseService.addHouseMembers(\"houseId\", request);\nif (response.getStatusCode().equals(HttpStatus.CREATED)) {\n  AddHouseMemberResponse addHouseMemberResponse = response.getBody();\n  List<HouseMember> addedHouseMembers = addHouseMemberResponse.getMembers();\n  for (HouseMember houseMember : addedHouseMembers) {\n    System.out.println(\"Added member with id: \" + houseMember.getId());\n  }\n} else if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n  System.out.println(\"At least one of the members could not be added to the house\");\n}\n",
              "description": ""
            },
            "name": "addHouseMembers",
            "code": "@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 18
          },
          {
            "id": "322d0c58-7de3-99af-db4f-e394aced552e",
            "ancestors": [
              "fb24d790-e863-9db6-7443-7b61bd048c1b"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the house ID and member ID provided in the request. If the member is successfully deleted, a `NO_CONTENT` status code is returned. If the member cannot be found, a `NOT_FOUND` status code is returned.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which a member is being deleted.",
                "complex_type": false
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the member was successfully deleted or not.\n\n* `ResponseEntity`: This is an object that represents the response to the delete request. It has a `status` field that indicates the HTTP status code of the response, and a `body` field that contains the response entity itself.\n* `HttpStatus`: This is an enum that defines the possible HTTP status codes that can be returned by the function. The function returns `NO_CONTENT` if the member was successfully deleted, and `NOT_FOUND` otherwise.\n* ` Void`: This is a type parameter of the `ResponseEntity` class, which represents the void value returned by the function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    ResponseEntity<Void> response = new HouseController().deleteHouseMember(\"houseId\", \"memberId\");\n}\n",
              "description": ""
            },
            "name": "deleteHouseMember",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "A REST controller class that handles endpoints for managing house member documents. The class implements the `DocumentsApi` interface and provides methods for getting, uploading, updating, and deleting house member documents. The methods use the `HouseMemberDocumentService` class to interact with the document database.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "f3638e69-591e-7792-ff47-e7f69f645930",
            "ancestors": [],
            "type": "function",
            "description": "provides endpoints for managing house member documents. The class has methods for getting, updating, and deleting house member documents, along with handling HTTP responses.",
            "name": "HouseMemberDocumentController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 35,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 66
          },
          {
            "id": "3be2029c-27ac-eab8-144e-47136d41c43d",
            "ancestors": [
              "f3638e69-591e-7792-ff47-e7f69f645930"
            ],
            "type": "function",
            "description": "retrieves a house member document from the service and returns it as a byte array in the response entity with appropriate headers for caching and content type.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member for whom the corresponding house member document is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the requested document content as a byte array and HTTP headers.\n\n* `HttpHeaders headers`: This contains metadata about the response, such as caching directives and content type.\n* `byte[] content`: The actual document content in byte form.\n* `ContentDisposition contentDisposition`: Contains information about how to display or handle the response, such as filename and inline/attachment status.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "getHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "3ea523f3-4802-0cbc-d040-68b1c1353dd2",
            "ancestors": [
              "f3638e69-591e-7792-ff47-e7f69f645930"
            ],
            "type": "function",
            "description": "receives a request to upload a house member document, creates a new document using the provided file and member ID, and returns a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is being uploaded.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the member's document to be uploaded.\n\n* `@PathVariable String memberId`: The unique identifier for the house member whose document is being uploaded.\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: The file containing the house member's document, which can be either a PDF or JPEG image.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the document was successfully uploaded or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)`: This indicates that the operation was successful and no content was returned to the client.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND)`: This indicates that the house member document could not be found, likely because it does not exist or has been deleted.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n    \n    // create a new HouseMemberDocument with the uploaded multipart file and the given memberId\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    \n    // return a ResponseEntity with status NO_CONTENT if successful or NOT_FOUND otherwise\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "uploadHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "621bf8f1-ba27-b1aa-a44d-a3abda28db75",
            "ancestors": [
              "f3638e69-591e-7792-ff47-e7f69f645930"
            ],
            "type": "function",
            "description": "receives a request to update a house member's document and updates the corresponding document in the database using the provided document and member ID. If the document is successfully updated, a NO_CONTENT status code is returned. If the document cannot be found or the request fails, a NOT_FOUND status code is returned.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the member whose document is being updated.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "document to be updated for the corresponding member ID.\n\n* `memberId`: The ID of the house member whose document is being updated.\n* `memberDocument`: A MultipartFile containing the updated document for the house member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a status code of NO_CONTENT or NOT_FOUND, depending on whether the update was successful.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: This is a response entity with a status code of NO_CONTENT, indicating that the update was successful and no additional content was returned.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND).build()`: This is a response entity with a status code of NOT_FOUND, indicating that the requested member document could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": ""
            },
            "name": "updateHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "2c7b212c-c47d-3ca6-3e48-06498116945f",
            "ancestors": [
              "f3638e69-591e-7792-ff47-e7f69f645930"
            ],
            "type": "function",
            "description": "deletes a house member document based on the provided member ID, returning a HTTP status code indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of a house member whose document is to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the requested resource has been successfully deleted and no content was returned.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested house member document could not be found, which means it may have been deleted or never existed in the first place.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = houseMemberDocumentController.deleteHouseMemberDocument(\"memberId\");\n",
              "description": ""
            },
            "name": "deleteHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "A REST controller that provides endpoints for managing payments in a community. The controller uses Spring Data and Spring Web Flux to handle HTTP requests and returns responses. It provides methods for scheduling a payment, listing all member payments, and listing all admin scheduled payments. The controller also includes a method to check if an admin is present in a given community.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e976c576-5e4c-7388-d047-e9f757172a4c",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to payments in the system. It provides endpoints for creating, reading, updating, and deleting payments, as well as listing all payments for a specific member or admin. The controller uses dependency injection to inject the necessary services, such as the payment service, community service, and schedule payment API mapper. It also handles exceptions and returns appropriate responses based on the request method and input parameters.",
            "name": "PaymentController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 47,
                "end": 50
              }
            },
            "item_type": "class",
            "length": 94
          },
          {
            "id": "fdbcefdf-3987-5bb7-4a48-0de0ee81ad44",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "schedules a payment for a community member based on their administrator's authorization and the community house they reside in.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request sent by the user, containing information such as the member ID and the administrator ID of the community house.\n\n* `request.getMemberId()`: This is a string attribute that contains the ID of the house member to be scheduled for payment.\n* `request.getAdminId()`: This is a string attribute that contains the ID of the community admin to be used for scheduling the payment.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response with a status code and a body. In this case, the status code is set to `HttpStatus.CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: This is the `SchedulePaymentResponse` object, which contains information about the scheduled payment.\n\nThe attributes of the `SchedulePaymentResponse` object are:\n\n* `status`: This is an integer status code that indicates whether the payment was successful (201) or not (404).\n* `paymentId`: This is a unique identifier for the scheduled payment.\n* `memberId`: This is the ID of the member whose payment has been scheduled.\n* `adminId`: This is the ID of the admin who scheduled the payment.\n* `communityHouseId`: This is the ID of the community house where the payment was made.\n* `paymentDate`: This is the date and time when the payment was scheduled.\n* `amount`: This is the amount of the payment.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "HouseMember houseMember = new HouseMember(1, 2, \"memberId\", \"memberName\");\nUser admin = new User(1, \"adminId\", \"adminName\");\nSchedulePaymentRequest request = new SchedulePaymentRequest(houseMember.getCommunityHouse().getCommunity().getId(),\n    houseMember.getId(), admin.getId());\nschedulePayment(request);\n",
              "description": "\nThis would call the schedulePayment method and pass in a HouseMember object, which is the member who is paying, and an User object, which is the admin scheduling the payment. The request object would contain the community ID, house member ID, and admin ID. The method would then verify that the user is an admin of the community associated with the house member making the payment, and if so, it would map the SchedulePaymentRequest to a PaymentDto which is used by the paymentService to schedule the payment and return a PaymentDto to the caller.\n\nAlternatively, if the user is not an admin of the community, then the method would return ResponseEntity with a status code of 404 (not found) as the request would be invalid and the method would not have been able to process it."
            },
            "name": "schedulePayment",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 25
          },
          {
            "id": "149254bb-0a19-b1bd-5d40-fc207c1c0cdc",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "determines if a specified `User` is an administrator of a given `CommunityHouse`. It does so by checking if the `User` is contained within the `CommunityHouse` 's admin list.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "CommunityHouse object that is being checked for admin status.\n\n* `communityHouse`: A `CommunityHouse` object representing the community house being checked for admin status.\n* `getCommunity()`: A method of the `CommunityHouse` class that returns a `Community` object representing the community associated with the house.\n* `getAdmins()`: A method of the `Community` class that returns an array of `User` objects representing the admins of the community.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object to be checked if they are an administrator of the CommunityHouse.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, representing a community house with various attributes and methods.\n* `getCommunity()`: This method returns a reference to the community associated with the `communityHouse` object.\n* `getAdmins()`: This method returns a collection of `User` objects representing the administrators of the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the specified user is an administrator of the community house.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "CommunityHouse communityHouse = new CommunityHouse();\nUser admin = new User();\nadmin.setId(\"admin-id\");\ncommunityHouse.getCommunity().addAdmin(admin);\nisUserAdminOfCommunityHouse(communityHouse, admin); // returns true\n",
              "description": "\nThis example would return `true` because the `admin` object that is being passed in has an ID that matches one of the IDs found in the set of admins for the community house."
            },
            "name": "isUserAdminOfCommunityHouse",
            "code": "private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }",
            "location": {
              "start": 85,
              "insert": 85,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "b7aca91d-95a6-1583-0048-b15871f4117c",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "receives a payment ID and retrieves the corresponding payment details from the payment service, then maps them to a `SchedulePaymentResponse` object using the `paymentToSchedulePaymentResponse` method and returns the result as an `ResponseEntity`.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "id of the payment for which details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing a payment detail response.\n\n* `paymentId`: The unique identifier for the payment being retrieved, which is passed as a parameter in the function call.\n* `paymentService`: A service that provides methods for interacting with the payment system, which is used to retrieve the details of the payment.\n* `schedulePaymentApiMapper`: A mapping service that converts the payment details returned by the payment service into a Schedule Payment response object.\n* `ResponseEntity`: An object that represents the overall response to the function call, including any errors or exceptions that may occur during the execution of the function. In this case, the response entity is created with an `ok` status code if the payment details are successfully retrieved.\n\nOverall, the `listPaymentDetails` function provides a way to retrieve the details of a specific payment by its unique identifier, using a combination of logging and mapping services to handle the response from the payment service.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@GetMapping(path = \"/payments/{paymentId}\")\npublic ResponseEntity<SchedulePaymentResponse> listPaymentDetails(@PathVariable(\"paymentId\") String paymentId) {\n    return paymentService.getPaymentDetails(paymentId)\n            .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n            .map(ResponseEntity::ok)\n            .orElseGet(() -> ResponseEntity.notFound().build());\n}\n",
              "description": "\nThe example code above uses the paymentService to retrieve a payment with the given id, which is then mapped into a SchedulePaymentResponse using schedulePaymentApiMapper and wrapped in a ResponseEntity. If the payment could not be found, the method returns a not found response instead."
            },
            "name": "listPaymentDetails",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "a7e929f1-8b69-34be-d34a-8ba3fb845bb1",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "list all payments for a specified member ID using the Payment Service and map the response to a `ListMemberPaymentsResponse` object.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "13-digit unique identifier of the member for whom all payments are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityListMemberPaymentsResponse",
              "description": "a `ResponseEntity` object containing a list of `Payment` objects representing the member's payments.\n\n* `ResponseEntity<ListMemberPaymentsResponse>`: This is the top-level class that represents the response to the list all member payments request. It contains a list of `Payment` objects inside a `List`.\n* `List MemberPaymentsResponse`: This inner class represents the list of payments for a specific member. It has several attributes, including the payment date, amount, and status.\n* `paymentService.getHouseMember(memberId)`: This method returns a `HouseMember` object representing the member whose payments are to be listed.\n* `paymentService.getPaymentsByMember(memberId)`: This method returns a list of `Payment` objects associated with the specified member.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`: This method maps the `Payment` object to a corresponding `MemberPayment` object, which is then included in the response.\n\nOverall, the `listAllMemberPayments` function returns a list of payments associated with a specific member, along with additional information about each payment.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n",
              "description": "\nThis example assumes that the `paymentService` is an instance of a service class implementing the payment functionality, and that the `schedulePaymentApiMapper` is a class containing mappers for converting domain objects into REST API response DTOs.\n\nThe code first retrieves the house member object using `paymentService.getHouseMember(memberId)`. If this method returns an empty optional, then a 404 (Not Found) response is returned immediately, without any further processing.\n\nIf the previous step resulted in a non-empty optional containing a house member object, then the next line of code calls `paymentService.getPaymentsByMember(memberId)` to retrieve all payments associated with the given house member id. The resulting list of payments is converted into a REST API response DTO using `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`.\n\nThe resulting payment list DTO is then added to a new instance of `ListMemberPaymentsResponse`, and the entire response object is wrapped in an optional using `Optional::of`. The resulting optional is then converted into a 200 (OK) HTTP status code if it contains a non-empty value, or into a 404 (Not Found) status code if it is empty.\n\nIn summary, the example uses `paymentService` to retrieve all payments associated with a given house member id, and then converts this list of payments into a REST API response DTO using the mapper class `schedulePaymentApiMapper`. If no payment was found for the given house member, a 404 (Not Found) status code is returned, otherwise a 200 (OK) status code with the resulting response object."
            },
            "name": "listAllMemberPayments",
            "code": "@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "8442c3ac-9b3f-959e-e743-b5153485ebbd",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "receives a request to list all payments scheduled by an admin, checks if the admin is in the given community, retrieves the payments, and returns them in a response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community that the admin belongs to, which is used to filter the list of payments to be returned in the response.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the administrator for whom scheduled payments are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for the list of payments, allowing the function to filter and limit the result set accordingly.\n\n* `communityId`: A string representing the community ID.\n* `adminId`: A string representing the admin ID.\n* `pageable`: An instance of the `Pageable` class, which provides a way to page large data sets. Its properties include:\n\t+ `pageNumber`: The current page number being requested.\n\t+ `pageSize`: The number of elements per page.\n\t+ `totalPages`: The total number of pages in the data set.\n\t+ `totalElements`: The total number of elements in the data set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPaymentsResponse",
              "description": "a `ResponseEntity` object containing a `ListAdminPaymentsResponse` object with the scheduled payments and page information.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin ID in the specified community.\n* `pageInfo`: A `PageInfo` object containing information about the page of payments returned, including the total number of payments and the total number of pages.\n\nThe function returns a `ResponseEntity` with the list of scheduled payments and the page information in the body of the response. The status code of the response is set to `200 OK`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListAdminPaymentsResponse> response = paymentService.listAllAdminScheduledPayments(\n    \"communityId\", \"adminId\", PageRequest.of(0, 10));\n\nif (response.getStatusCode().is2xxSuccessful()) {\n  ListAdminPaymentsResponse body = response.getBody();\n  System.out.println(\"Payments:\");\n  for (AdminPayment adminPayment : body.getPayments()) {\n    System.out.printf(\"%s - %s%n\", adminPayment.getId(), adminPayment.getAmount());\n  }\n  PageInfo pageInfo = body.getPageInfo();\n  System.out.println(\"Page Info:\");\n  System.out.printf(\n      \"Page: %d/%d%nTotal: %d%n\",\n      pageInfo.getNumber(),\n      pageInfo.getTotalPages(),\n      pageInfo.getTotalElements()\n  );\n} else {\n  System.out.println(\"Error:\");\n  System.out.printf(\"%s%n\", response.getStatusCode());\n}\n",
              "description": ""
            },
            "name": "listAllAdminScheduledPayments",
            "code": "@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 22
          },
          {
            "id": "f7381e7b-8cda-4a90-124b-0a8d428c693e",
            "ancestors": [
              "e976c576-5e4c-7388-d047-e9f757172a4c"
            ],
            "type": "function",
            "description": "returns a Boolean value indicating whether a specified administrator is an admin of a given community based on the community's details and admins stream.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "id of the community whose details are to be retrieved.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "12-digit ID of an admin user within the specified community, which is used as a filter to determine if the admin exists within that community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the specified administrator is an admin in the given community.\n\n* The function returns a `Boolean` value indicating whether an admin with the given `adminId` exists in the specified `communityId`.\n* The `communityService.getCommunityDetailsByIdWithAdmins()` method is called to retrieve the details of the community with the given `communityId`, including its admins.\n* The `map()` methods are used to transform the `List<Admin>` returned by `getCommunityDetailsByIdWithAdmins()` into a stream of `Admin` objects.\n* The `stream().anyMatch()` method is used to check if any admin in the community has the given `adminId`. If no such admin exists, the function returns `false`.\n* If an admin with the given `adminId` exists in the community, the function returns `true`.\n* If the community with the given `communityId` does not exist, the function throws a `RuntimeException`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    String communityId = \"507f191e810c19729de860ea\";\n    String adminId = \"admin@email.com\";\n    Boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n    System.out.println(\"Is the admin in the community? : \" + isAdminInGivenCommunity);\n}\n",
              "description": "\nThis code would first find a Community with the given `communityId` and then check if an Admin with the email address `admin@email.com` exists within that Community. If it does, the method would return true and print out \"Is the admin in the community? : True\". Otherwise, it would print out \"Is the admin in the community? : False\".\n\nIt is important to note that this method would only work correctly if a valid `communityId` and an email address for an Admin exist. If the `communityId` does not correspond to any Community or if no Admin with the given email exists within that Community, then the method will throw an exception."
            },
            "name": "isAdminInGivenCommunity",
            "code": "private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A `UserController` class that implements the `UsersApi` interface. It handles various user-related operations such as signing up, listing all users, getting details of a specific user, resetting passwords, and confirming email addresses. The controller uses dependency injection to inject required services and mappers, and it utilizes Spring Data's pagination capabilities for handling pageable requests.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "c1c50289-e4a8-a3b2-1a4c-141381a73af8",
            "ancestors": [],
            "type": "function",
            "description": "is a RESTful API for managing users and their details, passwords, and email confirmations. It provides endpoints for signing up new users, listing all users, getting the details of a specific user, resetting or resetting a user's password, and resending an email confirmation request. Additionally, it also handles the mappings between different data structures and returns appropriate responses to client requests.",
            "name": "UserController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 46,
                "end": 49
              }
            },
            "item_type": "class",
            "length": 96
          },
          {
            "id": "12bd7648-cafb-4f8f-3a47-35cb7562ab7f",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "receives a `CreateUserRequest` and maps it to a `UserDto`, then creates a new user using the `userService`. If successful, it returns a `ResponseEntity` with a `CreateUserResponse`, otherwise it returns a `ResponseEntity` with a `HttpStatus.CONFLICT`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "CreateUserRequest object passed from the client, which contains user information to be created in the system.\n\n* `@Valid` is an annotation that indicates the request has been validated by the `@Validated` processor, ensuring it meets certain criteria before entering this method.\n* `CreateUserRequest request` represents a user creation request containing various attributes such as username, email, password, and other relevant information.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and the created user response as its body.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that can have a status and a body. The status is set to `HttpStatus.CREATED`, indicating that the user has been created successfully.\n* `body`: This is a reference to the `CreateUserResponse` object that contains the details of the created user. The `body` attribute is not null, indicating that a response was generated.\n\nThe `orElseGet` method is used to provide a fallback response if no user is created successfully. In this case, the response status is set to `HttpStatus.CONFLICT`, indicating that there was an error creating the user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// request parameter\nCreateUserRequest createUserRequest = new CreateUserRequest();\ncreateUserRequest.setName(\"Example Name\");\ncreateUserRequest.setEmail(\"example@email.com\");\ncreateUserRequest.setPassword(\"Example Password\");\n\n// call signUp method and return ResponseEntity<CreateUserResponse>\nResponseEntity<CreateUserResponse> response = userService.signUp(createUserRequest);\n",
              "description": ""
            },
            "name": "signUp",
            "code": "@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }",
            "location": {
              "start": 60,
              "insert": 60,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "de21130c-4778-f3b3-124a-5dcd5407ba57",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "receives a `Pageable` parameter and retrieves all users from the database using the `userService`. It then maps the retrieved users to a response object using the `userApiMapper`, before returning it as a `ResponseEntity` with a status code of `OK` and the response body.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and limit for retrieving user details, allowing for efficient pagination of a large dataset.\n\n* The `log.trace()` statement indicates that the method has started processing the request.\n* The `Set<User> userDetails` variable holds the list of users returned by the `userService.listAll(pageable)` call.\n* The `userApiMapper.userSetToRestApiResponseUserSet()` method converts the `User` set to a `GetUserDetailsResponseUserSet`.\n* The `GetUserDetailsResponse response` variable holds the final response object, which contains the list of users in its `users` field.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetUserDetailsResponse",
              "description": "a list of user details in a Rest API response format.\n\n* `GetUserDetailsResponse`: This is the class that represents the response from the API. It has a single property called `users`, which is a set of `GetUserDetailsResponseUser` objects.\n* `GetUserDetailsResponseUser`: This is a inner class of `GetUserDetailsResponse` that represents a user object in the response. It has several properties, including `id`, `username`, `email`, and `roles`.\n* `userService`: This is the class that provides the list of users through the `listAll()` method. It is not destructured in this function.\n* `userApiMapper`: This is the class that maps the user list from the service to the API response format. It is not destructured in this function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import org.springframework.data.domain.Pageable;\n// Import the Pageable class from Spring Data\n\n@Autowired // Inject the userService instance from the Spring context\nprivate UserService userService;\n\npublic void example() {\n    Pageable pageable = new PageRequest(0, 10); // Request the first page with a size of 10\n    List<User> users = userService.listAllUsers(pageable); // Retrieve the first 10 users from the database\n    for (User user : users) {\n        System.out.println(\"User: \" + user);\n    }\n}\n",
              "description": ""
            },
            "name": "listAllUsers",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "3a236f36-7b2c-7fb2-3f4e-7754b39d4008",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "retrieves user details given a user ID, maps them to `GetUserDetailsResponse`, and returns a `ResponseEntity` with the transformed response.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "unique identifier of the user whose details are to be retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an HTTP status code of OK and a body containing the user details.\n\n* The `ResponseEntity` object represents a response with an HTTP status code of OK (HttpStatus.OK) and a body containing the user details in the form of a `GetUserDetailsResponseUser` object.\n* The `getUserDetails` function returns a `Optional` instance of `ResponseEntity`, which means that the function may or may not return a response, depending on whether a user with the given `userId` exists in the database. If no user is found, the function returns a `ResponseEntity` with an HTTP status code of NOT_FOUND (HttpStatus.NOT_FOUND).\n* The `map` method is used to transform the result of the `userService.getUserDetails(userId)` call into a `ResponseEntity` instance. The `map` method takes two lambda functions as arguments: one that maps the `UserDto` object returned by `userService.getUserDetails(userId)` to a `GetUserDetailsResponseUser` object using `userApiMapper.userDtoToGetUserDetailsResponse`, and another that maps the resulting `GetUserDetailsResponseUser` object to a `ResponseEntity` instance with an HTTP status code of OK (HttpStatus.OK) and a body containing the user details.\n* If the `getUserDetails` function does not find a user with the given `userId` in the database, it returns an empty `Optional` instance, which is then mapped to a `ResponseEntity` instance with an HTTP status code of NOT_FOUND (HttpStatus.NOT_FOUND) using the second lambda function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    UserService userService = new UserService();\n    GetUserDetailsResponse response = userService.getUserDetails(\"test\");\n}\n",
              "description": ""
            },
            "name": "getUserDetails",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "65a085f3-893d-2b90-3948-c0338ab461c2",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "handles password reset requests from users. It determines whether the action is FORGOT or RESET, and based on that, it calls the corresponding methods to reset or validate a password. If successful, it returns an `OK` response entity, otherwise it returns a `BAD_REQUEST` response entity.",
            "params": [
              {
                "name": "action",
                "type_name": "String",
                "description": "password action to be performed, with possible values of `FORGOT` or `RESET`, which determine the corresponding action to be taken by the function.",
                "complex_type": false
              },
              {
                "name": "forgotPasswordRequest",
                "type_name": "ForgotPasswordRequest",
                "description": "Forgot Password Request object containing the user's email address and other information required for password reset.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` object must be valid according to its schema.\n* `@RequestBody`: The `forgotPasswordRequest` object is passed as a request body in the HTTP request.\n* `ForgotPasswordRequest`: This class represents the request body for resetting or retrieving a password. It contains properties such as `email`, `password`, and `reason`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing an HTTP 200 OK response.\n\n* `ResponseEntity`: This is an object that represents a response to a HTTP request. It has a `statusCode` field that indicates the status of the response (e.g. 200 for OK, 404 for Not Found).\n* `build()`: This is a method that creates a new `ResponseEntity` instance with the specified properties.\n* `ok()`: This is an instance of `ResponseEntity` with a status code of 200 (OK).\n\nIn the function, the output of the `usersPasswordPost` function depends on the value of the `parsedAction` variable, which is set to one of three values: `FORGOT`, `RESET`, or `UNKNOWN`. If the value of `parsedAction` is `FORGOT`, then the function returns a response with a status code of 200 (OK) indicating that the password reset process has been initiated. If the value of `parsedAction` is `RESET`, then the function returns a response with a status code of 204 (No Content) indicating that the password has been reset successfully. Otherwise, the function returns a response with a status code of 400 (Bad Request) indicating that there is an error in the request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class ExampleController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/users/password\")\n    public ResponseEntity<Void> passwordAction(\n            @NotNull @Valid String action, \n            @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n        boolean result = false;\n        PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n        if (parsedAction == PasswordActionType.FORGOT) {\n            result = true;\n            userService.requestResetPassword(forgotPasswordRequest);\n        } else if (parsedAction == PasswordActionType.RESET) {\n            result = userService.resetPassword(forgotPasswordRequest);\n        }\n        if (result) {\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n}\n",
              "description": "\nThe action input can be either \"FORGOT\" or \"RESET\". The forgotten password request body will be processed by the userService if the action is \"FORGOT\", and the reset password request body will be processed if the action is \"RESET\". If the action is not recognized, a bad request response will be returned."
            },
            "name": "usersPasswordPost",
            "code": "@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "4f543d92-db9b-939e-3f47-274b1977d65d",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "receives a request to list all members of all houses of a user, retrieves the members from the houses of the user, maps them to a Rest API response format, and returns it as a ResponseEntity with an OK status or a NOT_FOUND status if there are no members.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "ID of the user for whom the list of house members is being requested.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size required for fetching all house members of a particular user.\n\n* `userId`: The user ID for which the houses and members will be listed.\n* `pageable`: A `Pageable` object that contains information about the pagination of results, such as the page number, page size, total pages, and total items.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of `HouseMemberSet` objects representing all housemembers of the specified user.\n\n* `ResponseEntity`: This is the top-level class in Spring Web Flux that represents a response entity, which can be either a success or failure response.\n* `ok`: This is a subclass of `ResponseEntity` that indicates a successful response with a 200 status code and a list of `HouseMemberSet` objects as its body.\n* `notFound`: This is a subclass of `ResponseEntity` that indicates a failed response with a 404 status code and a message indicating that the requested resource could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n",
              "description": ""
            },
            "name": "listAllHousemates",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "3a91129b-7d89-c28e-cc45-bba18e5a1187",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "verifies whether an email address is confirmed for a given user ID by making a call to the `userService`. If the email is confirmed, it returns an `OK` response entity. Otherwise, it returns a `BAD_REQUEST` response entity.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user whose email is being confirmed.",
                "complex_type": false
              },
              {
                "name": "emailConfirmToken",
                "type_name": "String",
                "description": "token sent to the user's email for confirmation of their email address.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status of `ok` or `badRequest`, depending on whether the email confirmation was successful or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web service request. It contains an `Ok` or `BadRequest` status, as well as other attributes such as headers and body.\n* `ok()`: This is a method that builds an `ResponseEntity` with an `Ok` status.\n* `build()`: This is a method that builds the entire response entity, including the status, headers, and body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n",
              "description": "\nThe confirmEmail method takes two inputs: userId and emailConfirmToken. It then passes these values to the userService.confirmEmail method, which checks if the email is confirmed or not. If the email is confirmed it returns true and we return a ResponseEntity with an OK status code. If the email is not confirmed it returns false and we return a ResponseEntity with a BAD_REQUEST status code."
            },
            "name": "confirmEmail",
            "code": "@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "48a40074-69cd-8692-d144-12981a6832ab",
            "ancestors": [
              "c1c50289-e4a8-a3b2-1a4c-141381a73af8"
            ],
            "type": "function",
            "description": "resends an email confirmation to a user if one was previously sent and failed, returning a response entity with a status of `ok` or `badRequest`.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "ID of the user for whom the email confirmation status is to be resent.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object with a status of either `ok` or `badRequest`.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a `statusCode` field that indicates the status of the response (either `OK` or `BAD_REQUEST`).\n* `ok()`: This is a method of the `ResponseEntity` class that returns an instance of the `OkResponse` subclass, which represents a successful response with a `statusCode` of `200`.\n* `build()`: This is a method of the `ResponseEntity` class that returns a new instance of the response object, allowing the caller to add additional attributes or modify the existing ones.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Example usage of the method resendConfirmEmailMail\npublic static void main(String[] args) {\n  UserController userController = new UserController();\n  ResponseEntity<Void> response = userController.resendConfirmEmailMail(\"userId\");\n}\n",
              "description": ""
            },
            "name": "resendConfirmEmailMail",
            "code": "@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 136,
              "insert": 136,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "An entity class called `AmenityDto` for representing amenities in a system. The class has fields for id, amenityId, name, description, price, and communityId. These fields are annotated with various package-level annotations, such as `@AllArgsConstructor`, `@NoArgsConstructor`, `@Builder`, `@With`, `@Data`, indicating the use of Lombok library and specifying how the class should be generated.",
        "items": [
          {
            "id": "b18aaa8a-e0d5-3097-cd43-29ef37c8b43b",
            "ancestors": [],
            "type": "function",
            "description": "has a set of attributes (id, amenityId, name, description, price, communityId) and is annotated with various constructors, builders, and data annotations.\nFields:\n\t- id (Long): in the AmenityDto class represents a unique identifier for each amenity.\n\t- amenityId (String): represents a unique identifier for a specific amenity within a community.\n\t- name (String): in the AmenityDto class is used to store the name of an amenity.\n\t- description (String): in the AmenityDto class represents a string value that provides a brief summary or description of the amenity.\n\t- price (BigDecimal): represents a decimal value representing the cost of an amenity.\n\t- communityId (String): represents a unique identifier for a specific community or neighborhood associated with the amenity.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a unique identifier for each amenity."
              },
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for a specific amenity within a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class is used to store the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a string value that provides a brief summary or description of the amenity."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a decimal value representing the cost of an amenity."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for a specific community or neighborhood associated with the amenity."
              }
            ],
            "name": "AmenityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@With\n@Data\npublic class AmenityDto {\n  private Long id;\n  private String amenityId;\n  private String name;\n  private String description;\n  private BigDecimal price;\n  private String communityId;\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) called `CommunityDto` with fields for `id`, `communityId`, `name`, `district`, and a set of `UserDto` objects representing the community administrators. The DTO is constructed using Lombok's `@AllArgsConstructor` and `@NoArgsConstructor` annotations, which automate the construction of the object based on the fields defined in the class.",
        "items": [
          {
            "id": "05495e18-8d90-1d96-8b42-fc8c2992dd1e",
            "ancestors": [],
            "type": "function",
            "description": "represents a community object containing ID, community ID, name, district, and a set of user objects representing admins in the community, all with no arguments constructor or AllArgsConstructor annotation.\nFields:\n\t- id (Long): represents an identifier for each communityDto instance in the system.\n\t- communityId (String): represents a unique identifier for a community.\n\t- name (String): in the CommunityDto class represents a string value that identifies the name of a community.\n\t- district (String): represents a string value representing a geographic area or district associated with the community object in the `CommunityDto` class.\n\t- admins (Set<UserDto>): in the CommunityDto class is a set of UserDtos representing the community administrators.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents an identifier for each communityDto instance in the system."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a unique identifier for a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a string value that identifies the name of a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a string value representing a geographic area or district associated with the community object in the `CommunityDto` class."
              },
              {
                "name": "admins",
                "type_name": "Set<UserDto>",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class is a set of UserDtos representing the community administrators."
              }
            ],
            "name": "CommunityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class CommunityDto {\n  private Long id;\n  private String communityId;\n  private String name;\n  private String district;\n  private Set<UserDto> admins;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) named CommunityHouseDto. The class has two attributes: houseId and name. All constructors are marked with @AllArgsConstructor and @NoArgsConstructor, indicating that either all or none of the constructor parameters can be used to create an instance of the class. Lombok is a high-level package used for generating getters and setters and other boilerplate code.",
        "items": [
          {
            "id": "9258330b-70eb-c782-ed44-86d68ad7e73f",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object (DTO) for a community house with an ID and name attributes.\nFields:\n\t- houseId (String): in the CommunityHouseDto class represents an identifier for a specific community house.\n\t- name (String): in the `CommunityHouseDto` class is a string representing the name of a house.\n\n",
            "fields": [
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "in the CommunityHouseDto class represents an identifier for a specific community house."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "in the `CommunityHouseDto` class is a string representing the name of a house."
              }
            ],
            "name": "CommunityHouseDto",
            "code": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommunityHouseDto {\n  private String houseId;\n  private String name;\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A `PaymentDto` class for representing payment information. The class has various fields and methods for storing and manipulating payment data, including a unique payment ID, the amount charged, payment type, description, recurring status, due date, and references to an administrator and member.",
        "items": [
          {
            "id": "3e2176f0-9b45-d091-3748-e85bf1dbdeef",
            "ancestors": [],
            "type": "function",
            "description": "represents a payment record with relevant details such as payment ID, charge amount, payment type, description, recurrence status, due date, and user and member information.\nFields:\n\t- paymentId (String): represents a unique identifier for a payment transaction within the PaymentDto class.\n\t- charge (BigDecimal): in the PaymentDto class represents a monetary value, specifically a BigDecimal object, which is used to represent a payment amount.\n\t- type (String): in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\".\n\t- description (String): in the PaymentDto class represents a brief textual description of the payment.\n\t- recurring (boolean): indicates whether the payment is a recurring one.\n\t- dueDate (String): in the PaymentDto class represents the date on which a payment is due or has to be made.\n\t- admin (UserDto): represents an entity of type `UserDto` in the PaymentDto class.\n\t- member (HouseMemberDto): in the PaymentDto class represents an association with a HouseMemberDto object containing information about a member of a household.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a unique identifier for a payment transaction within the PaymentDto class."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a monetary value, specifically a BigDecimal object, which is used to represent a payment amount."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a brief textual description of the payment."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "indicates whether the payment is a recurring one."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents the date on which a payment is due or has to be made."
              },
              {
                "name": "admin",
                "type_name": "UserDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents an entity of type `UserDto` in the PaymentDto class."
              },
              {
                "name": "member",
                "type_name": "HouseMemberDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an association with a HouseMemberDto object containing information about a member of a household."
              }
            ],
            "name": "PaymentDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class PaymentDto {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private UserDto admin;\n  private HouseMemberDto member;\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A class called `UserDto` that represents a user entity with various attributes and methods. The class uses Lombok, a dependency injection framework, to automate the construction of the object graph. The class has fields for `id`, `userId`, `name`, `email`, `password`, and `encryptedPassword`, as well as methods for setting and getting these fields. Additionally, the class has a `communityIds` field that is a set of strings, and an `emailConfirmed` field that indicates whether the user's email address has been confirmed.",
        "items": [
          {
            "id": "8eeba9f9-d3f7-25ba-1d4b-79119b1e6d1e",
            "ancestors": [],
            "type": "function",
            "description": "represents a DTO (Data Transfer Object) for a user, including their unique identifier, user ID, name, email, password, and community IDs, as well as a boolean flag indicating whether their email has been confirmed.\nFields:\n\t- id (Long): represents a unique identifier for a user in the system.\n\t- userId (String): in the UserDto class represents a unique identifier for a user.\n\t- name (String): in the UserDto class represents a string value containing the user's name.\n\t- email (String): in the UserDto class is used to store the user's email address.\n\t- password (String): in the UserDto class stores a string value representing a user's password.\n\t- encryptedPassword (String): stores an encrypted version of the user's password in the UserDto class.\n\t- communityIds (Set<String>): in the UserDto class represents a set of strings indicating the user's membership in various communities.\n\t- emailConfirmed (boolean): in the UserDto class indicates whether the user's email address has been confirmed through a verification process.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a unique identifier for a user."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class is used to store the user's email address."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores a string value representing a user's password."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "stores an encrypted version of the user's password in the UserDto class."
              },
              {
                "name": "communityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a set of strings indicating the user's membership in various communities."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class indicates whether the user's email address has been confirmed through a verification process."
              }
            ],
            "name": "UserDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class UserDto {\n  private Long id;\n  private String userId;\n  private String name;\n  private String email;\n  private String password;\n  private String encryptedPassword;\n  private Set<String> communityIds;\n  private boolean emailConfirmed;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityMapper` that acts as a mapping between `CommunityDto` and `Community` objects using MapStruct, a dependency injection framework for Java. The `CommunityMapper` interface has one method, `communityDtoToCommunity`, which takes a `CommunityDto` object as input and maps it to a corresponding `Community` object.",
        "items": [
          {
            "id": "dcc07a26-bd1c-4694-fd4a-a8dacf5ddc98",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between the CommunityDto and Community entities.",
            "name": "CommunityMapper",
            "code": "@Mapper\npublic interface CommunityMapper {\n\n  Community communityDtoToCommunity(CommunityDto communityDto);\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "An interface named `HouseMemberMapper` that serves as a mapping between two data structures: `Set<HouseMember>` and `Set<HouseMemberDto>`. The interface has three methods: `houseMemberSetToRestApiResponseHouseMemberSet()`, `houseMemberDtoSetToHouse MemberSet()`, and `houseMemberSetToRestApiResponseAddHouseMemberSet()`. These methods map the `HouseMember` objects in the input sets to corresponding objects in the output sets, using the `Mapper` package.",
        "items": [
          {
            "id": "93859da3-7f01-a5a9-a148-d14e6df0f198",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for mapping between sets of HouseMembers and related data structures, including converting between HouseMember objects and their corresponding DTOs, as well as adding new HouseMembers to a response.",
            "name": "HouseMemberMapper",
            "code": "@Mapper\npublic interface HouseMemberMapper {\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n\n  Set<HouseMember> houseMemberDtoSetToHouseMemberSet(Set<HouseMemberDto> houseMemberDtoSet);\n\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseAddHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "A mapper interface `PaymentMapper` that provides conversions between `PaymentDto` and `Payment` objects using MapStruct. The interface includes two methods: `paymentDtoToPayment` converts a `PaymentDto` to a `Payment` object, and `paymentToPaymentDto` converts a `Payment` object to a `PaymentDto` object. The mapping is done using the `@Mapping` annotation, which specifies the source and target objects and their corresponding fields.",
        "items": [
          {
            "id": "4f206186-e0bf-f192-0648-fae3597aa57f",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between a DTO (PaymentDto) and an entity object (Payment).",
            "name": "PaymentMapper",
            "code": "@Mapper\npublic interface PaymentMapper {\n  Payment paymentDtoToPayment(PaymentDto paymentDto);\n\n  @Mapping(source = \"payment.dueDate\", target = \"dueDate\", dateFormat = \"yyyy-MM-dd\")\n  PaymentDto paymentToPaymentDto(Payment payment);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides conversions between `UserDto` and `User` objects using MapStruct, a dependency injection framework for Java. The interface has two methods: `userDtoToUser` converts a `UserDto` object to a `User` object, while `userToUserDto` converts a `User` object to a `UserDto` object.",
        "items": [
          {
            "id": "0c7afe0e-5f55-0392-194d-8045556b12b5",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for user data.",
            "name": "UserMapper",
            "code": "@Mapper\npublic interface UserMapper {\n  User userDtoToUser(UserDto userDto);\n\n  UserDto userToUserDto(User user);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "An exception handler for handling various exceptions, particularly MaxUploadSizeExceededException and IOException, in a Spring web application. The exception handler is defined using the @ControllerAdvice annotation and is responsible for generating responses to be returned to the client upon error. Specifically, it returns ResponseEntity objects with customized messages for each type of exception encountered.",
        "items": [
          {
            "id": "3fa3ee0c-00bf-71af-1140-c69b9415b72e",
            "ancestors": [],
            "type": "function",
            "description": "is a custom exception handler for handling exceptions related to file uploads in a Spring Boot application. The class defines two exception handlers, one for MaxUploadSizeExceededException and another for IOException, which are used to handle different types of errors that can occur during file upload. When an exception occurs, the handler returns a ResponseEntity with a custom message for the user.",
            "name": "FileUploadExceptionAdvice",
            "code": "@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n\n  @ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 17
          },
          {
            "id": "d4a65c98-a93d-f2bd-914c-7c4c6e9aab87",
            "ancestors": [
              "3fa3ee0c-00bf-71af-1140-c69b9415b72e"
            ],
            "type": "function",
            "description": "handles the `MaxUploadSizeExceededException` by returning a response entity with an error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException thrown by the application.\n\n* `MaxUploadSizeExceededException`: This is the exception type that is being handled. It represents an error where the file size exceeds the allowed limit.\n* `HttpStatus.PAYLOAD_TOO_LARGE`: The HTTP status code returned in the response entity. It indicates that the file size exceeds the allowed limit.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` object with a status code of `PAYLOAD_TOO_LARGE` and a body containing a message indicating that the file size exceeds the limit.\n\n* The status code of the response entity is `HttpStatus.PAYLOAD_TOO_LARGE`, indicating that the file size exceeds the limit.\n* The body of the response entity contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing the error message \"File size exceeds limit!\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ControllerAdvice\npublic class FileUploadExceptionHandler {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity<String> handleFileSizeExceeded(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(\"File size exceeds limit!\");\n  }\n}\n",
              "description": "\nIn the above example, the method handleFileSizeExceeded is annotated with @ExceptionHandler and it takes a MaxUploadSizeExceededException as its parameter. This means that when this method is called, it will catch any exceptions of type MaxUploadSizeExceededException and execute the code inside the method. The return statement returns an HTTP response with a status code of HttpStatus.PAYLOAD_TOO_LARGE and a body message \"File size exceeds limit!\" indicating that the file size has exceeded the maximum allowed size.\n\nTo use this method, it would be called like so:\n"
            },
            "name": "handleMaxSizeException",
            "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "271ab5ad-0e45-7cb7-c24f-4af74b48b991",
            "ancestors": [
              "3fa3ee0c-00bf-71af-1140-c69b9415b72e"
            ],
            "type": "function",
            "description": "handles  an `IOException` exception by returning a response entity with a custom message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` exception that is being handled by the `@ExceptionHandler` annotation.\n\n* `MaxUploadSizeExceededException`: This exception is an extension of the `IOException` class and indicates that the maximum upload size has been exceeded while saving a document.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` with a status code of `CONFLICT` and a body containing a map with a single key-value pair, where the key is \"message\" and the value is \"Something went wrong with document saving!\".\n\n* The status code of the response is `HttpStatus.CONFLICT`, indicating an error in document saving.\n* The body of the response contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing the message \"Something went wrong with document saving!\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n",
              "description": ""
            },
            "name": "handleIOException",
            "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationException` class that extends `RuntimeException`. The exception is marked with `@ResponseStatus(value = HttpStatus.UNAUTHORIZED)` which indicates that the exception is related to HTTP status code 401 (unauthorized). The class has a constructor that creates the exception with a custom error message.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0116e226-509a-ad8c-e54c-4e653a74efb4",
            "ancestors": [],
            "type": "function",
            "description": "provides a customized response status for unauthorized requests with a predefined error message.\nFields:\n\t- ERROR_MESSAGE (String): in the AuthenticationException class represents a message indicating that the user's credentials are incorrect or they do not exist.\n\n",
            "fields": [
              {
                "name": "ERROR_MESSAGE",
                "type_name": "String",
                "value": "\"Credentials are incorrect or user does not exists\"",
                "constant": true,
                "class_name": "AuthenticationException",
                "description": "in the AuthenticationException class represents a message indicating that the user's credentials are incorrect or they do not exist."
              }
            ],
            "name": "AuthenticationException",
            "code": "@Slf4j\n@ResponseStatus(value = HttpStatus.UNAUTHORIZED)\npublic class AuthenticationException extends RuntimeException {\n  private static final String ERROR_MESSAGE = \"Credentials are incorrect or user does not exists\";\n  public AuthenticationException() {\n    super(ERROR_MESSAGE);\n  }\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "An exception class called CredentialsIncorrectException that extends the base AuthenticationException class. The class has a constructor that logs an error message when the credentials for a user ID are incorrect. The class uses Lombok's @Slf4j annotation to log errors through Slf4j.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e534a446-fe33-3987-954d-f4498add29d7",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and has a constructor that logs an error message for incorrect credentials for a specified user ID.\n",
            "fields": [],
            "name": "CredentialsIncorrectException",
            "code": "@Slf4j\npublic class CredentialsIncorrectException extends AuthenticationException {\n  public CredentialsIncorrectException(String userId) {\n    super();\n    log.info(\"Credentials are incorrect for userId: \" + userId);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "A `UserNotFoundException` class that extends `AuthenticationException`. The exception is created with a user email as parameter and logs an informative message using Lombok's `@Slf4j` annotation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "cfcd6b69-0646-cd80-794f-5445adf5117e",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and provides additional logging information when a user cannot be found using their email address.\n",
            "fields": [],
            "name": "UserNotFoundException",
            "code": "@Slf4j\npublic class UserNotFoundException extends AuthenticationException {\n  public UserNotFoundException(String userEmail) {\n    super();\n    log.info(\"User not found - email: \" + userEmail);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface for mapping between various types related to amenities, including `Amenity`, `AmenityDto`, `GetAmenityDetailsResponse`, and `UpdateAmenityRequest`. The interface provides methods for converting each of these types into corresponding DTOs or responses, such as `amenityToAmenityDetailsResponse()`, `amenitiesSetToAmenityDetailsResponseSet()`, `amenityDtoToAmenity()`, and `updateAmenityRequestToAmenityDto()`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4159b9cd-0b97-0eb5-4d4d-5e3b5a403fc2",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for mapping between various types of data related to amenities, including converting from an Amenity object to a GetAmenityDetailsResponse object, and vice versa.",
            "name": "AmenityApiMapper",
            "code": "@Mapper\npublic interface AmenityApiMapper {\n\n  GetAmenityDetailsResponse amenityToAmenityDetailsResponse(Amenity amenity);\n\n  Set<GetAmenityDetailsResponse> amenitiesSetToAmenityDetailsResponseSet(Set<Amenity> amenity);\n\n  Amenity amenityDtoToAmenity(AmenityDto amenityDto);\n\n  AmenityDto amenityToAmenityDto(Amenity amenity);\n\n  AmenityDto updateAmenityRequestToAmenityDto(UpdateAmenityRequest request);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface for mapping data between various classes in a Java package. The interface maps data between domain classes and REST API responses, including creating community requests, retrieving community details, listing community admins, creating community responses, and mapping house details. The interface uses MapStruct, a high-level package for mapping data between different types.",
        "items": [
          {
            "id": "4964f676-3d97-0e80-d74d-383b7c085037",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures related to communities in a MyHome platform.",
            "name": "CommunityApiMapper",
            "code": "@Mapper\npublic interface CommunityApiMapper {\n  CommunityDto createCommunityRequestToCommunityDto(CreateCommunityRequest request);\n\n  GetCommunityDetailsResponseCommunity communityToRestApiResponseCommunity(\n      Community community);\n\n  Set<GetCommunityDetailsResponseCommunity> communitySetToRestApiResponseCommunitySet(\n      Set<Community> communitySet);\n\n  CreateCommunityResponse communityToCreateCommunityResponse(Community community);\n\n  Set<ListCommunityAdminsResponseCommunityAdmin> communityAdminSetToRestApiResponseCommunityAdminSet(\n      Set<User> communityAdminSet);\n\n  @Mapping(source = \"userId\", target = \"adminId\")\n  ListCommunityAdminsResponseCommunityAdmin userAdminToResponseAdmin(User user);\n\n  Set<CommunityHouse> communityHouseNamesSetToCommunityHouseSet(\n      Set<CommunityHouseName> communityHouseNamesSet);\n\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 24
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that implements a mapping between two data structures: `Set<CommunityHouse>` and `Set<GetHouseDetailsResponseCommunityHouse>`. The interface provides two methods: `communityHouseSetToRestApiResponseCommunityHouseSet()` and `communityHouseToRestApiResponseCommunityHouse()`. The former maps a set of `CommunityHouse` objects to a set of `GetHouseDetailsResponseCommunityHouse` objects, while the latter maps a single `CommunityHouse` object to a single `GetHouseDetailsResponseCommunityHouse` object.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "8ed759a0-cd33-aa9e-6348-cd178d309e68",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapper for transforming data between CommunityHouse objects and RestApiResponseCommunityHouse sets.",
            "name": "HouseApiMapper",
            "code": "@Mapper\npublic interface HouseApiMapper {\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n\n  GetHouseDetailsResponseCommunityHouse communityHouseToRestApiResponseCommunityHouse(\n      CommunityHouse communityHouse);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `SchedulePaymentApiMapper` which maps between different types related to payment scheduling in a housing community platform. The interface provides methods for mapping between different types such as `PaymentDto`, `EnrichedSchedulePaymentRequest`, `SchedulePaymentResponse`, and more. It also defines various utility methods for handling the mapping process.",
        "items": [
          {
            "id": "b463e0f1-1b50-8ea4-7049-d53e199f7f5e",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of mappings between different entities and DTOs used in a payment API, including mapping between Payment, User, HouseMember, and Community entities to corresponding DTOs, as well as providing additional methods for enriching the schedule payment request with user and house member details.",
            "name": "SchedulePaymentApiMapper",
            "code": "@Mapper\npublic interface SchedulePaymentApiMapper {\n\n  @Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }\n\n  @Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n\n  @Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }\n\n  @Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }\n\n  @Mappings({\n      @Mapping(source = \"adminId\", target = \"admin\", qualifiedByName = \"adminIdToAdmin\"),\n      @Mapping(source = \"memberId\", target = \"member\", qualifiedByName = \"memberIdToMember\")\n  })\n  PaymentDto schedulePaymentRequestToPaymentDto(SchedulePaymentRequest schedulePaymentRequest);\n\n  PaymentDto enrichedSchedulePaymentRequestToPaymentDto(\n      EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest);\n\n  @AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n\n  Set<MemberPayment> memberPaymentSetToRestApiResponseMemberPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"memberId\", expression = \"java(payment.getMember().getMemberId())\")\n  MemberPayment paymentToMemberPayment(Payment payment);\n\n  Set<AdminPayment> adminPaymentSetToRestApiResponseAdminPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"adminId\", expression = \"java(payment.getAdmin().getUserId())\")\n  AdminPayment paymentToAdminPayment(Payment payment);\n\n  @Mappings({\n      @Mapping(source = \"admin\", target = \"adminId\", qualifiedByName = \"adminToAdminId\"),\n      @Mapping(source = \"member\", target = \"memberId\", qualifiedByName = \"memberToMemberId\")\n  })\n  SchedulePaymentResponse paymentToSchedulePaymentResponse(PaymentDto payment);\n\n  default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }\n\n  default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }\n\n  default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }\n}",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "interface",
            "length": 103
          },
          {
            "id": "4748b6b6-9b71-5c9a-ba49-b13daa659802",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "converts a `String` representing an administrator ID into a `UserDto` object containing the ID and other relevant information.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "user ID of an admin to be converted into a `UserDto` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object representing the admin with the specified `adminId`.\n\n1. `userId`: A string representing the user ID of the admin.\n2. `build()`: Creates a new instance of `UserDto` with the specified `userId`.",
              "complex_type": true
            },
            "name": "adminIdToAdminDto",
            "code": "@Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "d7a8ece8-9c87-bbae-6b4d-a1129d98850d",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "converts a `memberId` string into a `HouseMemberDto` object, which contains the original member ID as its sole property.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "12-digit unique identifier of a member in the House, which is used to retrieve the corresponding member details in the `HouseMemberDto` object created by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the input `memberId`.\n\n* `memberId`: This is a String attribute that represents the member ID passed as an input to the function.\n* Other attributes not mentioned in the function signature or documentation are not included in the output.",
              "complex_type": true
            },
            "name": "memberIdToMemberDto",
            "code": "@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "ca83a48d-7f43-fb9e-8b48-74029fa2b52d",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "maps a `UserDto` object to its corresponding `userId`.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "User object that contains information about an administrator, and it is used to extract the user's ID from the object.\n\n* `getUserId()` returns the user ID of the admin.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a `String` representing the user ID of the admin.",
              "complex_type": false
            },
            "name": "adminToAdminId",
            "code": "@Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }",
            "location": {
              "start": 57,
              "insert": 57,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "74a2c548-b7aa-35b8-4445-4649e01188e1",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "converts a `HouseMemberDto` object into its corresponding member ID.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "House Member object containing information about a member of a household, which is used to retrieve the member's ID in the `memberToMemberId` function.\n\n* `getMemberId()`: Returns the `MemberId` field of `houseMemberDto`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the member ID of the input `HouseMemberDto` object.",
              "complex_type": false
            },
            "name": "memberToMemberId",
            "code": "@Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "107b5094-35cc-b5bb-544e-fda44f8204d7",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "maps the user details from the enriched schedule payment request to the admin and member fields of the PaymentDto object using the `@MappingTarget` annotation.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto object, which is being modified to include user details from the enriched schedule payment request.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a class annotated with `@Builder`, which provides a way to construct instances of the `PaymentDto` class.\n* `EnrichedSchedulePaymentRequest`: This is the input parameter to the function, which contains the user details of the payment request.\n* `getEnrichedRequestMember()` and `getEnrichedRequestAdmin()`: These are methods that extract the member and admin details from the input `EnrichedSchedulePaymentRequest` object, respectively.\n\nTherefore, the `setUserFields` function takes a `PaymentDto.PaymentDtoBuilder` instance and an `EnrichedSchedulePaymentRequest` object as inputs, and updates the `member` and `admin` properties of the deserialized `paymentDto` instance using the extracted member and admin details.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "payment request with user details enriched for further processing and mapping, providing the necessary data for the `setUserFields()` method to operate effectively.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` type, which is annotated with `@Builder`. The builder is required to pass in the instance of the class when using the `AfterMapping` method.\n* `EnrichedSchedulePaymentRequest`: This is the deserialized input object containing information about a payment request, including member and admin details.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n",
              "description": "\nLet's break this example down:\n\n1. The method is annotated with `@AfterMapping`. This annotation tells MapStruct to run the mapping after the default mapping has been applied.\n2. The method takes two arguments, both of which are annotated with @MappingTarget. This annotation tells MapStruct that these arguments are targets for mapping, and they should be mapped using the default mapping.\n3. Inside the method, we call getEnrichedRequestMember() and getEnrichedRequestAdmin(). These methods return a HouseMemberDto and UserDto instance, respectively, which are built using the EnrichedSchedulePaymentRequest object passed as an argument to the setUserFields method.\n4. The paymentDto.member() and paymentDto.admin() methods are used to assign these objects to the member and admin fields of the PaymentDtoBuilder class.\n5. Finally, we call build() on the paymentDto builder object to create a new PaymentDto instance, which contains all the data from the original SchedulePaymentRequest and EnrichedSchedulePaymentRequest objects.\n\nHere is an example of how this method would be used:\n"
            },
            "name": "setUserFields",
            "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "3ee88611-f6e6-5e90-594a-b833dc617f81",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "takes a `SchedulePaymentRequest` object and enhances it with additional information from the user and community, such as the admin's name, email, encrypted password, and community IDs, as well as the member's ID and house document filename.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "SchedulePaymentRequest object that contains information about the payment request to be enriched, including its type, description, recurrence status, charge amount, due date, and administrator and member details.\n\n* `getType()`: The type of schedule payment request (e.g., \"Monthly\")\n* `getDescription()`: A brief description of the payment request\n* `isRecurring()`: Whether the payment request is recurring or not\n* `getCharge()`: The charge amount for the payment request\n* `getDueDate()`: The due date of the payment request\n* `getAdminId()`: The ID of the admin who created the payment request\n* `admin.getId()`: The ID of the admin who is associated with the payment request\n* `admin.getName()`: The name of the admin who is associated with the payment request\n* `admin.getEmail()`: The email address of the admin who is associated with the payment request\n* `admin.getEncryptedPassword()`: The encrypted password of the admin who is associated with the payment request\n* `communityIds`: A set of community IDs that the payment request is related to\n* `member.getMemberId()`: The ID of the member who made the payment request\n* `member.getId()`: The ID of the member who made the payment request\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"`: The filename of the House Member document associated with the member (if it exists)\n* `member.getName()`: The name of the member who made the payment request\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"\"`: The ID of the community house associated with the member (if it exists)",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object containing information about the admin user who made the request, and provides the admin's ID, name, email, encrypted password, and communities.\n\n* `getCommunities()`: Returns a stream of `Community` objects representing the communities that the admin is a member of.\n* `map()`: Maps each `Community` object to its community ID using the `map()` method.\n* `collect()`: Collects the mapped community IDs into a set using the `collect()` method.\n* `getAdminId()`: Returns the admin's ID.\n* `getId()`: Returns the admin's ID.\n* `getName()`: Returns the admin's name.\n* `getEmail()`: Returns the admin's email address.\n* `getEncryptedPassword()`: Returns the admin's encrypted password.\n* `communityIds`: Returns a set of community IDs associated with the admin.",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object that provides additional information about the member for whom the payment request is being enriched, including their community ID and document filename.\n\n* `member.getMemberId()` - The unique identifier for the member in the system.\n* `member.getId()` - The ID of the member in the database.\n* `member.getHouseMemberDocument()` - If not null, it contains information about the member's house membership, including the document filename.\n* `member.getName()` - The member's name.\n* `member.getCommunityHouse()` - If not null, it references the community house associated with the member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object with additional fields.\n\n1. `type`: The type of payment request, which could be \"one-time\" or \"recurring\".\n2. `description`: A brief description of the payment request.\n3. `isRecurring`: Indicates whether the payment request is recurring or not.\n4. `charge`: The amount to be charged for the payment request.\n5. `dueDate`: The date by which the payment must be made.\n6. `adminId`: The ID of the admin who created the payment request.\n7. `adminName`: The name of the admin who created the payment request.\n8. `adminEmail`: The email address of the admin who created the payment request.\n9. `encryptedPassword`: The encrypted password of the admin who created the payment request.\n10. `communityIds`: A set of community IDs associated with the payment request.\n11. `memberId`: The ID of the member to whom the payment request is addressed.\n12. `houseMemberDocumentFilename`: The filename of the House Member document, if available.\n13. `memberName`: The name of the member to whom the payment request is addressed.\n14. `communityHouseId`: The ID of the community house associated with the member to whom the payment request is addressed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class SchedulePaymentController {\n  private final PaymentService paymentService;\n  \n  @PostMapping(\"/schedule-payment\")\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(\n      @RequestBody @Valid EnrichedSchedulePaymentRequest request) {\n    UserDto admin = new UserDto().setUserId(\"admin123\");\n    HouseMemberDto member = new HouseMemberDto().setMemberId(\"member123\");\n    \n    return paymentService.schedulePayment(request, admin, member);\n  }\n}\n",
              "description": "\nThis example uses a SchedulePaymentRequest to enrich the request with an Admin and a Member. Then it calls schedulePayment on the payment service using those values."
            },
            "name": "enrichSchedulePaymentRequest",
            "code": "default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "d4fc503d-0144-fba1-914f-b3256d18810d",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "builds a `UserDto` object representing an administrator for a payment request, using the provided `EnrichedSchedulePaymentRequest` object as input.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative user for whom the request is being enriched, providing their user ID, entity ID, name, email, and encrypted password.\n\n* `adminId`: The ID of the administrator associated with the schedule payment request.\n* `adminEntityId`: The entity ID of the administrator associated with the schedule payment request.\n* `adminName`: The name of the administrator associated with the schedule payment request.\n* `adminEmail`: The email address of the administrator associated with the schedule payment request.\n* `adminEncryptedPassword`: An encrypted password for the administrator associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the administrator's details.\n\n* `userId`: The ID of the administrator associated with the enriched schedule payment request.\n* `id`: The entity ID of the administrator associated with the enriched schedule payment request.\n* `name`: The name of the administrator associated with the enriched schedule payment request.\n* `email`: The email address of the administrator associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the administrator associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest request = new EnrichedSchedulePaymentRequest(\"admin\", \"1234567890\", \"Test\", true, 100, LocalDate.now().plusDays(3));\nUserDto admin = mapper.getEnrichedRequestAdmin(request);\n",
              "description": "\nExplanation:\nWe create a new EnrichedSchedulePaymentRequest with the given parameters and then we pass it to the method getEnrichedRequestAdmin which returns an instance of UserDto. The returned UserDto has the following attributes:\n* userId (which is \"admin\")\n* id (which is \"1234567890\")\n* name (\"Test\")\n* email (null)\n* encryptedPassword (\"1234567890\")\n\nNote that the email and encryptedPassword are null because they are not provided in the EnrichedSchedulePaymentRequest."
            },
            "name": "getEnrichedRequestAdmin",
            "code": "default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }",
            "location": {
              "start": 127,
              "insert": 127,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "3733f821-2d5c-829e-f04f-c3e4968f70ef",
            "ancestors": [
              "b463e0f1-1b50-8ea4-7049-d53e199f7f5e"
            ],
            "type": "function",
            "description": "transforms an `EnrichedSchedulePaymentRequest` object into a `HouseMemberDto` object, containing the member's ID, name, and entity ID.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "payment request with additional data, such as the member entity ID and name, which are used to create a new `HouseMemberDto`.\n\n* `memberEntityId`: A unique identifier for the member associated with the schedule payment request.\n* `memberId`: The ID of the member associated with the schedule payment request.\n* `houseMemberName`: The name of the member associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the member's ID, name, and member ID from the input `EnrichedSchedulePaymentRequest`.\n\n* `id`: The ID of the member entity associated with the enriched schedule payment request.\n* `memberId`: The ID of the member associated with the enriched schedule payment request.\n* `name`: The name of the house member associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "HouseMemberDto enrichedHouseMember = enrichedSchedulePaymentRequestMapper.getEnrichedRequestMember(enrichedSchedulePaymentRequest);\n",
              "description": "\nHere, we pass in an instance of EnrichedSchedulePaymentRequest to the method getEnrichedRequestMember, and it returns a HouseMemberDto instance with the details of the member from the input EnrichedSchedulePaymentRequest. The mapping is defined by the @Mapping annotation on top of the method declaration. \n\nWe then assign the returned instance to an enrichedHouseMember variable of type HouseMemberDto. The resulting object can be used as a representation of the member details from the input EnrichedSchedulePaymentRequest."
            },
            "name": "getEnrichedRequestMember",
            "code": "default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` that uses Mapstruct to automatically convert between various data types related to users. Specifically, it maps a `CreateUserRequest` object to a `UserDto`, sets of `User` objects to a set of `GetUserDetailsResponseUser`, and vice versa. Additionally, it defines methods for converting a `UserDto` to a `CreateUserResponse` and a `UserDto` to a `GetUserDetailsResponse`.",
        "items": [
          {
            "id": "89c357ef-714f-2388-af4b-011857847540",
            "ancestors": [],
            "type": "function",
            "description": "provides automatic conversions between Java domain models and RESTful API responses using Mapstruct's functionality.",
            "name": "UserApiMapper",
            "code": "@Mapper\npublic interface UserApiMapper {\n\n  UserDto createUserRequestToUserDto(CreateUserRequest createUserRequest);\n\n  Set<GetUserDetailsResponseUser> userSetToRestApiResponseUserSet(\n      Set<User> userSet);\n\n  CreateUserResponse userDtoToCreateUserResponse(UserDto userDto);\n\n  GetUserDetailsResponseUser userDtoToGetUserDetailsResponse(UserDto userDto);\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 29
              }
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An enriched SchedulePaymentRequest class that extends the standard SchedulePaymentRequest class with additional fields for admin and house member details. The new class allows for the omission of extra data in the request, instead using ID references to fetch the required information during mapping.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.request.EnrichedSchedulePaymentRequest Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.request.EnrichedSchedulePaymentRequest</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.request.</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">EnrichedSchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"164,-85 21,-85 21,-66 164,-66 164,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "02ec43a7-85ee-fcb2-ce49-27a0d22c9cc6",
            "ancestors": [],
            "type": "function",
            "description": "extends the SchedulePaymentRequest Class and provides additional fields to enrich the request with details relating to an admin and a house member for successful mapping to user and house member fields in payment.\nFields:\n\t- adminEntityId (Long): in the EnrichedSchedulePaymentRequest class represents an administrative entity associated with the request.\n\t- adminName (String): represents the name of an administrative user associated with the payment request.\n\t- adminEmail (String): represents an email address associated with an administrative entity in the system.\n\t- adminEncryptedPassword (String): in the EnrichedSchedulePaymentRequest class contains an encrypted password for an administrative user associated with the payment request.\n\t- adminCommunityIds (Set<String>): in EnrichedSchedulePaymentRequest represents an unordered set of strings that identify communities to which the admin and house member belong.\n\t- memberEntityId (Long): in the EnrichedSchedulePaymentRequest class represents the identifier of a member entity associated with the payment request.\n\t- houseMemberDocumentName (String): represents the name of the document used to identify the member in the house.\n\t- houseMemberName (String): represents the name of the member of a house to whom the payment request relates.\n\t- houseMemberHouseID (String): represents the unique identifier of the member's house within the EnrichedSchedulePaymentRequest class.\n\n",
            "fields": [
              {
                "name": "adminEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class represents an administrative entity associated with the request."
              },
              {
                "name": "adminName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of an administrative user associated with the payment request."
              },
              {
                "name": "adminEmail",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an email address associated with an administrative entity in the system."
              },
              {
                "name": "adminEncryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class contains an encrypted password for an administrative user associated with the payment request."
              },
              {
                "name": "adminCommunityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in EnrichedSchedulePaymentRequest represents an unordered set of strings that identify communities to which the admin and house member belong."
              },
              {
                "name": "memberEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class represents the identifier of a member entity associated with the payment request."
              },
              {
                "name": "houseMemberDocumentName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of the document used to identify the member in the house."
              },
              {
                "name": "houseMemberName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of the member of a house to whom the payment request relates."
              },
              {
                "name": "houseMemberHouseID",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the unique identifier of the member's house within the EnrichedSchedulePaymentRequest class."
              }
            ],
            "name": "EnrichedSchedulePaymentRequest",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\npublic class EnrichedSchedulePaymentRequest extends SchedulePaymentRequest {\n  private Long adminEntityId;\n  private String adminName;\n  private String adminEmail;\n  private String adminEncryptedPassword;\n  private Set<String> adminCommunityIds;\n  private Long memberEntityId;\n  private String houseMemberDocumentName;\n  private String houseMemberName;\n  private String houseMemberHouseID;\n\n  public EnrichedSchedulePaymentRequest(String type, String description, boolean recurring,\n      BigDecimal charge, String dueDate, String adminId, Long adminEntityId, String adminName,\n      String adminEmail, String adminEncryptedPassword, Set<String> adminCommunityIds,\n      String memberId, Long memberEntityId, String houseMemberDocumentName, String houseMemberName,\n      String houseMemberHouseID) {\n\n    super.type(type).description(description).recurring(recurring).charge(charge).dueDate(dueDate).adminId(adminId).memberId(memberId);\n\n    this.adminName = adminName;\n    this.adminEmail = adminEmail;\n    this.adminEncryptedPassword = adminEncryptedPassword;\n    this.adminCommunityIds = adminCommunityIds;\n    this.adminEntityId = adminEntityId;\n    this.memberEntityId = memberEntityId;\n    this.houseMemberDocumentName = houseMemberDocumentName;\n    this.houseMemberName = houseMemberName;\n    this.houseMemberHouseID = houseMemberHouseID;\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 34
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A class called ForgotPasswordRequest that contains fields for email, token, and new password. The class uses Lombok, an automated programming tool, to implement constructor injection with both AllArgsConstructor and NoArgsConstructor annotations. Additionally, the class uses Java's built-in validation feature through the @Email annotation to ensure the email field is a valid email address.",
        "items": [
          {
            "id": "e8ce732a-89b1-fe91-c24c-7929a641f16a",
            "ancestors": [],
            "type": "function",
            "description": "represents a request for a password reset link with email and token fields, and newPassword field.\nFields:\n\t- email (String): in the ForgotPasswordRequest class is a required string parameter for entering the user's email address to receive a password reset token.\n\t- token (String): in the ForgotPasswordRequest class is meant to hold a unique validation token generated by the system for the user's forgot password request.\n\t- newPassword (String): is a String object representing the password entered by the user for resetting their account.\n\n",
            "fields": [
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class is a required string parameter for entering the user's email address to receive a password reset token."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class is meant to hold a unique validation token generated by the system for the user's forgot password request."
              },
              {
                "name": "newPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "is a String object representing the password entered by the user for resetting their account."
              }
            ],
            "name": "ForgotPasswordRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class ForgotPasswordRequest {\n  @Email\n  public String email;\n  public String token;\n  public String newPassword;\n}",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A response model for creating a new user in a system. The CreateUserResponse class has four fields: userId, name, email, and is a getter and setter class using Lombok.",
        "items": [
          {
            "id": "3f8ece15-26c9-eda3-6e41-7416284dcc92",
            "ancestors": [],
            "type": "function",
            "description": "is a data model representing the response to a create user request.\nFields:\n\t- userId (String): represents an identifier for a user created in response to a create user request.\n\t- name (String): of the `CreateUserResponse` class represents a string value containing the user's name.\n\t- email (String): from the CreateUserResponse class represents a string value containing an email address.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents an identifier for a user created in response to a create user request."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "of the `CreateUserResponse` class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "from the CreateUserResponse class represents a string value containing an email address."
              }
            ],
            "name": "CreateUserResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateUserResponse {\n  private String userId;\n  private String name;\n  private String email;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that contains a single instance field called `house` of type `CommunityHouseDto`. The class is marked with various annotations, including `@NoArgsConstructor`, `@AllArgsConstructor`, and `@Data`, which indicate the use of automated construction and data annotations. The class is also imported from the `lombok` package, which provides a range of convenience annotations for Java development.",
        "items": [
          {
            "id": "195424b6-46f1-8d82-f54d-1d75d55ebcea",
            "ancestors": [],
            "type": "function",
            "description": "encapsulates a CommunityHouseDto object for storing and retrieving house details.\nFields:\n\t- house (CommunityHouseDto): in the HouseDetailResponse class contains an instance of the CommunityHouseDto class, which likely represents a detailed summary of a specific house.\n\n",
            "fields": [
              {
                "name": "house",
                "type_name": "CommunityHouseDto",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "in the HouseDetailResponse class contains an instance of the CommunityHouseDto class, which likely represents a detailed summary of a specific house."
              }
            ],
            "name": "HouseDetailResponse",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class HouseDetailResponse {\n  private CommunityHouseDto house;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  }
]