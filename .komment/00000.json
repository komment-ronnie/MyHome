[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that provides information about the current page and total number of elements in a paginated dataset. The class takes a `pageable` and a `page` object as input and returns a `PageInfo` object containing information on the current page number, size, total pages, and total elements. The code utilizes Lombok for automated generation of getters, equals and hashCode methods, and toString method.",
        "items": [
          {
            "id": "5e35d59b-cf3f-33a2-184b-2d706338a08c",
            "ancestors": [],
            "type": "function",
            "description": "is a data structure that provides information about the current page and total pages of a paginated dataset, including the number of elements in each page and the total number of elements in the dataset. It can transform a `Pageable` object and a `Page` object into a `PageInfo` object, providing information on the current page number, size, total pages, and total elements.",
            "name": "PageInfo",
            "location": {
              "start": 18,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 10,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 47,
            "docLength": 7
          },
          {
            "id": "069d4778-890a-8ea7-4841-39b8074e4017",
            "ancestors": [
              "5e35d59b-cf3f-33a2-184b-2d706338a08c"
            ],
            "type": "function",
            "description": "takes a `pageable` parameter and a `page` parameter, returning a `PageInfo` object containing information about the current page of elements.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "Pageable interface, which provides the ability to retrieve a page of elements from a larger collection, allowing for pagination and querying of the larger collection.\n\n* `getPageNumber()`: The page number of the result set.\n* `getPageSize()`: The number of elements in each page of the result set.\n* `getTotalPages()`: The total number of pages in the result set.\n* `getTotalElements()`: The total number of elements in the result set.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing the total number of elements and pages available for the specified pageable.\n\n* `pageable`: The pageable object containing information about the current page being processed.\n* `page`: The page object representing the data to be paginated.\n* `totalPages`: The total number of pages in the dataset.\n* `totalElements`: The total number of elements in the dataset.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing various pagination-related metrics.\n\n1. Page number: The page number of the resultant page, which is represented by an integer value between 1 and the total number of pages.\n2. Page size: The number of elements in a page, represented by an integer value.\n3. Total pages: The total number of pages in the resultant page set, also represented by an integer value.\n4. Total elements: The total number of elements in the resultant page set, represented by an integer value.",
              "complex_type": true
            },
            "name": "of",
            "location": {
              "start": 56,
              "insert": 28,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 27,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 28
          }
        ]
      }
    }
  },
  {
    "name": "UserControllerIntegrationTest.java",
    "path": "integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java",
    "content": {
      "structured": {
        "description": "An integration test for a user registration functionality in a Spring Boot application. It creates a request body with name, email, and password and posts it to the registration URL using the `TestRestTemplate`. The response status code is verified, as well as the created user's details, which should match the input values. Additionally, the returned user ID is verified to refer to a user stored in the database.",
        "items": [
          {
            "id": "e09d8a05-c06b-f291-524c-83e3aa268aea",
            "ancestors": [],
            "type": "function",
            "description": "tests the successful creation of a new user through the REST API, verifying the response status code, the created user's details, and the corresponding values in the database. The test creates a request body with name, email, and password and posts it to the registration URL, asserting that the response status code is HTTP 201 Created and the returned user ID refers to a user stored in the database with matching input values.",
            "name": "UserControllerIntegrationTest",
            "location": {
              "start": 30,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 58,
            "docLength": 7
          },
          {
            "id": "e1e6d828-8740-28bf-5649-5e0fd11eb79c",
            "ancestors": [
              "e09d8a05-c06b-f291-524c-83e3aa268aea"
            ],
            "type": "function",
            "description": "tests the successful sign-up of a new user through a REST API. It verifies that the response status code is `HttpStatus.CREATED`, and that the created user has the same name and email as the input parameters, and has a unique user ID.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}\n",
              "description": ""
            },
            "name": "shouldSignUpSuccessful",
            "location": {
              "start": 56,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 31,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that provides a password encoder using BCrypt. The main method starts the application, and the @Bean annotation defines a bean for the password encoder. The getPasswordEncoder() method returns a BCryptPasswordEncoder instance, which is used to encrypt passwords securely.",
        "items": [
          {
            "id": "52a7b9a1-c267-61be-2f4b-17bc3dfeae96",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a password encoder using BCrypt. The main method starts the application and the `@Bean` annotation defines a bean for the password encoder.",
            "name": "MyHomeServiceApplication",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 36,
            "docLength": 5
          },
          {
            "id": "21803fed-8029-cf9b-df4e-b37820a0a802",
            "ancestors": [
              "52a7b9a1-c267-61be-2f4b-17bc3dfeae96"
            ],
            "type": "function",
            "description": "runs a SpringApplication, which launches a Spring Boot application with the given class as its configuration class.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\n* The `String[]` type indicates an array of string objects.\n* The name `args` is used as the variable name for the input parameter.\n* The `SpringApplication.run()` method is called to initiate the Spring application framework.\n* The `MyHomeServiceApplication.class` is the fully qualified class name of the application being run, which is passed as an argument to `SpringApplication.run()`.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 45,
              "insert": 35,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 34,
                "end": 44
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 10
          },
          {
            "id": "1c329a82-8361-95a4-d04e-1e3f69daa08d",
            "ancestors": [
              "52a7b9a1-c267-61be-2f4b-17bc3dfeae96"
            ],
            "type": "function",
            "description": "returns a `BCryptPasswordEncoder` instance, which is a popular and secure password hashing algorithm used to protect user passwords.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a `BCryptPasswordEncoder` object, which is used to encrypt passwords securely.\n\nThe function returns an instance of the `BCryptPasswordEncoder` class, which is a third-party password encryption library.\nThis encoder uses a salted hashing algorithm to encrypt passwords, providing a high level of security against brute-force attacks.\nThe `BCryptPasswordEncoder` class offers several configuration options for tweaking the encryption process, such as the cost parameter that controls the number of iterations in the hashing process.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyHomeServiceApplication {\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    public void registerUser(User user) {\n        // ...\n        String encryptedPassword = passwordEncoder.encode(user.getPassword());\n        // ...\n    }\n}\n",
              "description": "\nIn this example, the `passwordEncoder` bean is autowired into the class where it is used. The `registerUser()` method takes a user object as an argument and uses the `getPasswordEncoder()` method to encrypt the password before storing it in the database. The encrypted password is then stored in the user object along with other information, such as the username and email address."
            },
            "name": "getPasswordEncoder",
            "location": {
              "start": 62,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 61
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 13
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "And configures CORS (Cross-Origin Resource Sharing) mappings for a server using Spring WebFlux's built-in support for CORS. The code creates a `WebMvcConfigurer` bean that adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials. The code also exposes specific headers on the server side and allows credentials in requests.",
        "items": [
          {
            "id": "15d5c3d3-a9d5-9aae-2640-950a49b8532e",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class for CORS (Cross-Origin Resource Sharing) that allows requests from any origin to access resources from the server. The class provides methods for adding CORS mappings to a registry, allowing incoming requests from any origin and specifying allowed methods, headers, and credentials.",
            "name": "CorsConfig",
            "location": {
              "start": 37,
              "insert": 31,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 30,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 114,
            "docLength": 6
          },
          {
            "id": "c29e7d56-0742-5b9f-0c41-6aba89408768",
            "ancestors": [
              "15d5c3d3-a9d5-9aae-2640-950a49b8532e"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing incoming requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for CORS mappings that allows incoming requests from any origin and specifies allowed methods, headers, and credentials.\n\n* `registry`: This is an instance of `CorsRegistry`, which represents the set of CORS mappings for a server.\n* `addMapping`: This method adds a new mapping to the existing set of mappings in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the mapping applies to all URLs.\n* `allowedOrigins`: An array of allowed origins, which specifies the domains or subdomains that are allowed to make CORS requests to the server.\n* `allowedMethods`: An array of allowed HTTP methods, which specifies the methods that are allowed to be used in CORS requests to the server. The value `\"*\" means that all methods are allowed.\n* `allowedHeaders`: An array of allowed headers, which specifies the headers that can be included in CORS responses from the server. The value `\"*\" means that all headers are allowed.\n* `exposedHeaders`: An array of exposed headers, which specifies the headers that can be included in CORS responses from the server and are visible to clients. The values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n* `allowCredentials`: A boolean value that indicates whether CORS requests with credentials (such as cookies or authentication tokens) are allowed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n    @Value(\"${allowedOrigins}\")\n    private String[] allowedOrigins;\n    \n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n    }\n}\n",
              "description": "\nExplanation:\nThe code is a part of the WebMvcConfig class, which implements the WebMvcConfigurer interface. The addCorsMappings method defines a CORS mapping for all URL patterns in the application. The allowedOrigins field contains an array with the origin(s) that are allowed to access the resources in the application. \nThe code uses the registry object to map all URL patterns in the application to allow any origin, any HTTP method, any header, and any credentials. It also exposes headers named token and userId through the exposedHeaders field. Lastly, it allows the use of credential (cookies) by setting allowCredentials to true."
            },
            "name": "corsConfigurer",
            "location": {
              "start": 93,
              "insert": 65,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 64,
                "end": 92
              }
            },
            "item_type": "method",
            "length": 57,
            "docLength": 28
          },
          {
            "id": "549f05e6-2b2a-a197-a541-8652a80fa038",
            "ancestors": [
              "15d5c3d3-a9d5-9aae-2640-950a49b8532e",
              "c29e7d56-0742-5b9f-0c41-6aba89408768"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that the method adds mappings to.\n\n* `registry`: A `CorsRegistry` object that represents the configuration for handling Cross-Origin Resource Sharing (CORS) requests.\n* `addMapping`: Adds a mapping to the CORS configuration, allowing certain resources to be accessed from specified origins using specific methods and headers.\n* `allowedOrigins`: An array of allowed origins, which are IP addresses or subdomains that can access the resources.\n* `allowedMethods`: An array of allowed HTTP methods (GET, POST, PUT, DELETE, etc.) that can be used to access the resources.\n* `allowedHeaders`: An array of allowed headers that can be used with the accessed resources.\n* `exposedHeaders`: An array of exposed headers, which are headers that can be accessed by clients in responses.\n* `allowCredentials`: A boolean value indicating whether credentials (such as cookies or Authorization headers) should be allowed for the CORS configuration.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n        .allowedOrigins(Arrays.asList(\"https://domain1.com\", \"https://domain2.com\"))\n        .allowedMethods(\"*\")\n        .allowedHeaders(\"*\")\n        .exposedHeaders(\"token\", \"userId\")\n        .allowCredentials(true);\n}\n",
              "description": "\nIn this example, the addCorsMappings method is being used to specify that any domain can make requests to the server. The allowedOrigins field specifies an array of domains or subdomains that are allowed to make CORS requests to the server. The allowedMethods field specifies which HTTP methods (e.g., GET, POST) are allowed in CORS requests to the server. The allowedHeaders field specifies which headers (e.g., Cookies or Authentication tokens) can be included in CORS responses from the server. The exposedHeaders field specifies which headers can be included in CORS responses from the server and are visible to clients. Finally, the allowCredentials field specifies whether CORS requests with credentials (such as cookies or authentication tokens) are allowed."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 139,
              "insert": 121,
              "offset": " ",
              "indent": 6,
              "comment": {
                "start": 120,
                "end": 138
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "And configures an email service for Spring using Thymeleaf templates. It sets up a ResourceBundleMessageSource to retrieve message keys from a resource bundle, and a SpringTemplateEngine with a Thymeleaf Template Resolver and an Email Message Source for rendering emails. The template resolver is configured with prefix, suffix, mode, encoding, and caching properties for Thymeleaf templates, and the email message source retrieves email-related messages from a resource bundle.",
        "items": [
          {
            "id": "e2035c48-c937-a8aa-584d-99259020e026",
            "ancestors": [],
            "type": "function",
            "description": "defines a bean for email template configuration, including Thymeleaf template resolver and an email message source for rendering emails. The SpringTemplateEngine class is also defined, which sets up a new instance of the engine with customized settings for Thymeleaf template resolution using the `thymeleafTemplateResolver()` method.",
            "name": "EmailTemplateConfig",
            "location": {
              "start": 28,
              "insert": 21,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 20,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 162,
            "docLength": 7
          },
          {
            "id": "6cbcd19d-efed-30b9-ea46-09c91eccda10",
            "ancestors": [
              "e2035c48-c937-a8aa-584d-99259020e026"
            ],
            "type": "function",
            "description": "creates a `ResourceBundleMessageSource` instance to handle email localization messages. It sets the basename, default locale, encoding, and cache seconds based on configuration properties.",
            "params": [],
            "returns": {
              "type_name": "ResourceBundleMessageSource",
              "description": "a `ResourceBundleMessageSource` instance configured to retrieve email messages from a localization file path.\n\n* `ResourceBundleMessageSource`: This is the class that is being returned, which provides a way to retrieve message keys and their associated messages in a specific locale.\n* `setBasename()`: This method sets the basename of the resource bundle file.\n* `setDefaultLocale()`: This method sets the default locale for the message source.\n* `setDefaultEncoding()`: This method sets the default encoding for the message source.\n* `setCacheSeconds()`: This method sets the cache seconds for the message source.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n}\n",
              "description": "\nThis is an example of how the method emailMessageSource would be used in a Spring configuration file. It creates an instance of ResourceBundleMessageSource and sets its basename, default locale, default encoding, and cache seconds properties to localizationProperties.getPath(), Locale.ENGLISH, localizationProperties.getEncoding(), and localizationProperties.getCacheSeconds() respectively."
            },
            "name": "emailMessageSource",
            "location": {
              "start": 74,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 73
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 23
          },
          {
            "id": "56cc7460-740a-9688-2747-4db794d0a650",
            "ancestors": [
              "e2035c48-c937-a8aa-584d-99259020e026"
            ],
            "type": "function",
            "description": "creates a Spring Template Engine instance and configures it with Thymeleaf-specific settings, including a Template Resolver and a Message Source for email messages.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for email-related messages in the Spring Template Engine.\n\n* `ResourceBundleMessageSource`: This is an interface that represents a message source for Thymeleaf templates. It provides a way to retrieve messages from a resource bundle.\n* `emailMessageSource`: This is the specific implementation of the `ResourceBundleMessageSource` interface, providing messages related to emails.\n* `thymeleafTemplateResolver()`: This is a method that returns a `ThymeleafTemplateResolver`, which is responsible for resolving Thymeleaf templates at runtime.\n* `SpringTemplateEngine`: This is the base class for Spring's template engines, providing common functionality for handling templates and template resolution.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance configured to use Thymeleaf as the template engine and email message source.\n\n* `SpringTemplateEngine`: This is an instance of the `SpringTemplateEngine` class, which provides a Java-based template engine for rendering Thymeleaf templates.\n* `templateResolver()`: This is an instance of the `ThymeleafTemplateResolver` class, which resolves Thymeleaf templates to Java classes.\n* `emailMessageSource`: This is an instance of the `ResourceBundleMessageSource` class, which provides a way to retrieve messages from a resource bundle.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class EmailConfig {\n    @Bean\n    public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n        return new SpringTemplateEngine();\n    }\n}\n",
              "description": "\nThis example shows how the method `thymeleafTemplateEngine` is being used to create a Spring Template Engine instance that will use an Email Message Source. The method takes in a parameter of type `ResourceBundleMessageSource`, which is an implementation of the `MessageSource` interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML.\n\nThe method then initializes the Spring Template Engine instance with a new instance, sets the template resolver using the `thymeleafTemplateResolver()` method, which creates an instance of `ThymeleafTemplateResolver`, and sets the email message source using the `emailMessageSource` parameter. This is what allows the Spring Template Engine to use the Email Message Source for sending emails.\n\nThis code shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how the method thymeleafTemplateEngine is being used to create a Spring Template Engine instance that will use an Email Message Source. The method takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emauls in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML, and YAML. \nThis example shows how to create a Java method that takes in a parameter of type ResourceBundleMessageSource, which is an implementation of the MessageSource interface. This is a message source for email-related messages, and it provides access to emails in various formats, including HTML, XML,"
            },
            "name": "thymeleafTemplateEngine",
            "location": {
              "start": 122,
              "insert": 101,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 100,
                "end": 121
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 21
          },
          {
            "id": "2fc97825-a1ff-f0bc-7840-6cb733cd00b4",
            "ancestors": [
              "e2035c48-c937-a8aa-584d-99259020e026"
            ],
            "type": "function",
            "description": "creates a `ITemplateResolver` instance to resolve Thymeleaf templates based on properties provided by the user.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` instance that provides Thymeleaf template resolution capabilities.\n\n* `ClassLoaderTemplateResolver`: This is the class that implements the `ITemplateResolver` interface and provides the functionality for resolving Thymeleaf templates.\n* `setPrefix`: The value of this property is the path to the template file, which is appended with the file separator character if necessary.\n* `setSuffix`: The value of this property is the suffix of the template file, which determines the format of the template.\n* `setTemplateMode`: The value of this property is the mode in which the template should be processed.\n* `setCharacterEncoding`: The value of this property is the encoding of the template, which determines how the template should be interpreted.\n* `setCacheable`: The value of this property indicates whether the template should be cached or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n}\n",
              "description": "\nThis method uses the `thymeleafTemplateResolver()` method to create a `ClassLoaderTemplateResolver` instance. This instance is then set as the `templateResolver` for a new `SpringTemplateEngine`. The `templateEngineMessageSource` parameter of the `setTemplateEngineMessageSource()` method is also used, which sets the `ResourceBundleMessageSource` instance as the message source for the Thymeleaf template engine.\nThis example code uses the `thymeleafTemplateResolver()` method to create a `ClassLoaderTemplateResolver` instance, which is then set as the `templateResolver` for a new `SpringTemplateEngine`. The `emailMessageSource` parameter of the `setEmailMessageSource()` method is also used, which sets the `ResourceBundleMessageSource` instance as the message source for the Thymeleaf email template engine."
            },
            "name": "thymeleafTemplateResolver",
            "location": {
              "start": 175,
              "insert": 156,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 155,
                "end": 174
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `FileUploadConfig` that enables maximum file size and request size limits for multipart requests in Spring Boot. The class has one field and one method: the field stores the maximum file size in kilobytes, and the method creates a `MultipartConfigElement` instance with the set maximum file size and request size limits. The `multipartConfigElement()` method returns a `MultipartConfig` object representing the configuration for handling multipart content.",
        "items": [
          {
            "id": "4ae6f2eb-138a-59b3-5144-a365c2367e38",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class that sets maximum file size and request size limits for multipart requests in Spring Boot. The class creates a `MultipartConfig` instance with configuration settings for maximum file size and request size, respectively.",
            "name": "FileUploadConfig",
            "location": {
              "start": 32,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 30,
            "docLength": 6
          },
          {
            "id": "1164a296-35a4-5ebf-754b-a93fdd1790bf",
            "ancestors": [
              "4ae6f2eb-138a-59b3-5144-a365c2367e38"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` instance with customized maximum file and request sizes, allowing for efficient handling of multipart requests in a Spring Boot application.",
            "params": [],
            "returns": {
              "type_name": "MultipartConfig",
              "description": "a `MultipartConfig` object, which can be used to configure multipart form data processing in a Spring Boot application.\n\nThe MultipartConfigFactory object creates a new instance of MultipartConfig, which is an immutable configuration object that manages file uploads in a web application. The setMaxFileSize() method sets the maximum size of files that can be uploaded in kilobytes (KB), while the setMaxRequestSize() method sets the maximum total size of all files and data in the request in KB.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import org.springframework.web.multipart.MultipartFile;\nimport javax.servlet.http.HttpServletRequest;\n\n@Bean\npublic MultipartConfigElement multipartConfigElement() {\n  MultipartConfigFactory factory = new MultipartConfigFactory();\n  factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n  factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n  return factory.createMultipartConfig();\n}\n\n// Somewhere in the code where we need to handle a file upload request:\npublic void someMethod(@RequestParam(\"file\") MultipartFile file) {\n  // Handle the uploaded file\n}\n",
              "description": "\nIn this example, we are using the `@Bean` annotation to indicate that `multipartConfigElement()` is a bean and should be instantiated automatically by Spring. We then use the `MultipartConfigFactory` class to create a `MultipartConfigElement` object with the maximum file size and request size set to 10KB. This configuration element will be used by Spring to handle file uploads in our application.\n\nInside the method where we need to handle a file upload request, we annotate the `file` parameter with `@RequestParam` to indicate that it is a request parameter of type MultipartFile. We then use the `MultipartFile` object to access the uploaded file and handle it as needed.\n\nNote that this example assumes that you have already configured Spring Boot to enable file uploads in your application. If you haven't done so, you will need to add the necessary configuration settings to your `application.properties` file or use a different approach to configure file uploads for your application."
            },
            "name": "multipartConfigElement",
            "location": {
              "start": 54,
              "insert": 38,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 37,
                "end": 53
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 16
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "An class called `EmailTemplateLocalizationProperties` that represents email localization properties. The class has three fields: `path`, `encoding`, and `cacheSeconds`. These fields are used to specify the location of an email template file, the character encoding used for email templates, and the number of seconds that an email template's location data is cached before it is refreshed, respectively.",
        "items": [
          {
            "id": "96526478-4386-3788-1f4c-5c6838b5e4f7",
            "ancestors": [],
            "type": "function",
            "description": "represents a configuration class for email localization properties, including path, encoding, and cache seconds.\nFields:\n\t- path (String): represents a string value specifying the location of an email template file.\n\t- encoding (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding used for email templates.\n\t- cacheSeconds (int): in EmailTemplateLocalizationProperties represents the number of seconds an email template's location data is cached before it is refreshed.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "represents a string value specifying the location of an email template file."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the character encoding used for email templates."
              },
              {
                "name": "cacheSeconds",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in EmailTemplateLocalizationProperties represents the number of seconds an email template's location data is cached before it is refreshed."
              }
            ],
            "name": "EmailTemplateLocalizationProperties",
            "location": {
              "start": 20,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 12
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An email template properties class, EmailTemplateProperties, that stores email template settings such as path, format, encoding, mode, and cache status in a Spring Boot application. The class uses Lombok for automated generation of getters and setters and is annotated with @Data, @Component, and @ConfigurationProperties to indicate its purpose and usage.",
        "items": [
          {
            "id": "799e90ab-7862-088d-4846-a3686582438b",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot configuration property class used to store email template settings such as file path, format, encoding, mode, and cache status.\nFields:\n\t- path (String): in EmailTemplateProperties represents a string value specifying the file path for storing email templates.\n\t- format (String): in the EmailTemplateProperties class represents a string value specifying the format of an email template.\n\t- encoding (String): in the EmailTemplateProperties class represents a string variable specifying the character encoding to be used for email template rendering.\n\t- mode (String): in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\".\n\t- cache (boolean): in EmailTemplateProperties represents whether email templates should be cached or not.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in EmailTemplateProperties represents a string value specifying the file path for storing email templates."
              },
              {
                "name": "format",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents a string value specifying the format of an email template."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents a string variable specifying the character encoding to be used for email template rendering."
              },
              {
                "name": "mode",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\"."
              },
              {
                "name": "cache",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in EmailTemplateProperties represents whether email templates should be cached or not."
              }
            ],
            "name": "EmailTemplateProperties",
            "location": {
              "start": 23,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 22
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "A configuration class called MailProperties that stores properties related to sending emails using Spring Boot. The class has fields for host, username, password, port, protocol, debug, and devMode, which can be used to configure mail server settings.",
        "items": [
          {
            "id": "4a4d7ea4-eb26-d6b6-e543-cd3a31747001",
            "ancestors": [],
            "type": "function",
            "description": "defines properties related to sending emails using Spring Boot, including host, username, password, port, protocol, debug, and dev mode.\nFields:\n\t- host (String): in the MailProperties class represents the mail server hostname.\n\t- username (String): in the MailProperties class represents a user name for sending emails.\n\t- password (String): in MailProperties represents a string value used to authenticate mail server connections.\n\t- port (int): in the MailProperties class represents an integer value indicating the mail server's port number for communication.\n\t- protocol (String): in MailProperties represents the mail protocol used for sending and receiving emails, which could be SMTP, IMAP, POP3 or any other.\n\t- debug (boolean): in MailProperties is a boolean flag indicating whether the mail server's debugging capabilities are enabled.\n\t- devMode (boolean): in MailProperties represents a boolean flag indicating whether the mail server settings are for development use or not.\n\n",
            "fields": [
              {
                "name": "host",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents the mail server hostname."
              },
              {
                "name": "username",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents a user name for sending emails."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a string value used to authenticate mail server connections."
              },
              {
                "name": "port",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents an integer value indicating the mail server's port number for communication."
              },
              {
                "name": "protocol",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents the mail protocol used for sending and receiving emails, which could be SMTP, IMAP, POP3 or any other."
              },
              {
                "name": "debug",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties is a boolean flag indicating whether the mail server's debugging capabilities are enabled."
              },
              {
                "name": "devMode",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a boolean flag indicating whether the mail server settings are for development use or not."
              }
            ],
            "name": "MailProperties",
            "location": {
              "start": 26,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 25
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enum class `MailTemplatesNames` that lists four email template names based on their intended use: password reset, password changed, account created, and account confirmed. Each template name is defined as a static final String field in the enum class.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "An API for managing amenities in a community. The code provides endpoints for creating, reading, updating, and deleting amenities, as well as for retrieving a list of amenities in a community. The API uses Spring WebFlux and Spring Data JPA to perform CRUD operations on amenity data.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "8c978f14-8824-738e-ab49-35776ef83dc4",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling RESTful API requests related to amenities in a community. It provides endpoints for creating, reading, updating, and deleting amenities. The controller uses the `amenitySDJpaService` class to interact with the database and returns response entities indicating whether the operations were successful or not.",
            "name": "AmenityController",
            "location": {
              "start": 43,
              "insert": 38,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 37,
                "end": 42
              }
            },
            "item_type": "class",
            "length": 175,
            "docLength": 5
          },
          {
            "id": "02ce1b75-55bd-bdbd-294d-02f5ef982603",
            "ancestors": [
              "8c978f14-8824-738e-ab49-35776ef83dc4"
            ],
            "type": "function",
            "description": "retrieves the details of an amenity based on its ID, maps the response to a `GetAmenityDetailsResponse` object using a mapper, and returns a `ResponseEntity` with a status code of `OK` or an alternative status code if the amenity is not found.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "unique identifier of an amenity for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object representing a successful response with the requested amenity details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response to a RESTful API call. It contains the status code and body of the response.\n* `map`: This method is used to map the result of the `amenitySDJpaService.getAmenityDetails()` method to a `GetAmenityDetailsResponse` object using the `amenityApiMapper.amenityToAmenityDetailsResponse()` method.\n* `orElse`: This method is used to return an alternative response if the result of the `amenitySDJpaService.getAmenityDetails()` method is not found. The alternative response is represented by a `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND`.\n* `ok`: This method is used to indicate that the response is successful, which means that the API call was successful and the requested amenity details were returned.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void getAmenityDetails() throws Exception {\n    GetAmenityDetailsResponse response = this.getAmenityDetails(\"0123456789\");\n}\n",
              "description": "\nThe example above creates a new instance of `GetAmenityDetailsResponse` by calling the `getAmenityDetails()` method with an argument of \"0123456789\", which is the unique identifier for an amenity in this case. The response is then assigned to the variable `response`.\n\nIt's important to note that the input provided should be a valid amenity ID, as the method relies on the SDJpaService to retrieve the details of an amenity from the database based on its unique identifier. Therefore, providing an invalid amenity ID will result in a `NOT_FOUND` HTTP status code being returned by the method, which is represented by the `HttpStatus.NOT_FOUND` constant."
            },
            "name": "getAmenityDetails",
            "location": {
              "start": 75,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 74
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 24
          },
          {
            "id": "d534c092-05e9-5c98-b247-6e1c5680bdc9",
            "ancestors": [
              "8c978f14-8824-738e-ab49-35776ef83dc4"
            ],
            "type": "function",
            "description": "receives a community ID and returns a set of amenities, which are then mapped to a set of `GetAmenityDetailsResponse`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier for a community, which is used to filter the amenities returned in the response.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a set of `GetAmenityDetailsResponse` objects containing the list of amenities for a given community ID.\n\n* `ResponseEntity`: This is the type of the output parameter, which represents an entity with an OK status code and a set of amenity details as its body.\n* `Set<GetAmenityDetailsResponse>`: This is the set of amenity details that are returned in the body of the response entity. Each element in the set is an object representing a single amenity, containing its ID, name, description, and other attributes.\n* `amenitySDJpaService`: This is a Java interface used to retrieve the list of amenities from the database using JPA (Java Persistence API).\n* `amenityApiMapper`: This is a Java class used to map the list of amenities returned by the JPA service to a set of `GetAmenityDetailsResponse` objects.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Set<GetAmenityDetailsResponse>> response = \n    amenityService.listAllAmenities(\"communityId\");\n",
              "description": "\nThis will retrieve all the amenities of a community with id 'communityId'. The result is wrapped in a ResponseEntity and returned to the caller. The type of the response body is Set<GetAmenityDetailsResponse>, which contains all the amenities in the community. The method uses the `amenitySDJpaService` instance to retrieve all the amenities of the given community, and then maps the result into a set of GetAmenityDetailsResponse objects using the `amenityApiMapper`. Finally, it returns the response with an HTTP status code OK (200) and the payload containing the list of amenities."
            },
            "name": "listAllAmenities",
            "location": {
              "start": 106,
              "insert": 84,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 83,
                "end": 105
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 22
          },
          {
            "id": "aa753032-a148-28ab-3449-f7194ee43d91",
            "ancestors": [
              "8c978f14-8824-738e-ab49-35776ef83dc4"
            ],
            "type": "function",
            "description": "adds amenities to a community through JPA service, mapping the result to an `AddAmenityResponse` object and returning it as an `OK` response entity or a `NOT_FOUND` response entity if the community does not exist.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the amenities are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: A string representing the ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of objects containing information about the amenities to be added. Each object in the array has properties such as `name`, `description`, and `type`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddAmenityResponse",
              "description": "a `ResponseEntity` object representing a successful addition of amenities to a community.\n\n* `ResponseEntity<AddAmenityResponse>`: This is a class that represents an HTTP response entity with a status code and a body. In this case, the body is an instance of `AddAmenityResponse`.\n* `AddAmenityResponse`: This class represents the response to the API call, containing information about the added amenities. It has an `amenities` field, which is a list of `Amenity` objects representing the added amenities.\n* `ok`: This is a method that returns a response entity with a status code of 200 (OK).\n* `notFound()`: This is a method that returns a response entity with a status code of 404 (Not Found), indicating that the community with the provided ID could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AddAmenityRequest request = new AddAmenityRequest();\nrequest.setAmenities(new ArrayList<>(Arrays.asList(\"Amenity 1\", \"Amenity 2\")));\nResponseEntity<AddAmenityResponse> response = controller.addAmenityToCommunity(\"communityId\", request);\n",
              "description": "\nThe code first creates an instance of AddAmenityRequest and sets its amenities field to a list containing two strings, \"Amenity 1\" and \"Amenity 2\". It then calls the addAmenityToCommunity method by passing the communityId and the AddAmenityRequest object as arguments. The method is expected to return an instance of ResponseEntity<AddAmenityResponse>, which will be stored in the response variable.\n\nThe code can also be written as:\n"
            },
            "name": "addAmenityToCommunity",
            "location": {
              "start": 142,
              "insert": 115,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 114,
                "end": 141
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 27
          },
          {
            "id": "55f3374f-9595-5b89-2042-334fbea24a99",
            "ancestors": [
              "8c978f14-8824-738e-ab49-35776ef83dc4"
            ],
            "type": "function",
            "description": "deletes an amenity from the database based on its ID, returning a response entity with HTTP status code indicating the outcome of the operation.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted and no content was returned.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found or was not present in the database, which means it was not deleted.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = communityService.deleteAmenity(\"amenityId\");\nif (response.statusCode() == HttpStatus.NO_CONTENT) {\n    // The amenity was successfully deleted.\n} else if (response.statusCode() == HttpStatus.NOT_FOUND) {\n    // The amenity could not be found in the database, or it failed to delete.\n} else {\n    // There was an error during the deletion process.\n}\n",
              "description": "\nIn this example, we are using the `communityService` object as a reference to the `CommunityService` class. We call the `deleteAmenity()` method with a string argument that contains the ID of the amenity to be deleted. The `deleteAmenity()` method returns an instance of the `ResponseEntity<Void>` type, which contains the HTTP status code and other information about the response.\n\nIn this example, we check if the returned `HttpStatus` is equal to `NO_CONTENT`, indicating that the amenity was successfully deleted. If not, we check if the status code is equal to `NOT_FOUND`, indicating that the amenity could not be found in the database or failed to delete. Otherwise, we assume there was an error during the deletion process.\n\nNote that this example is for demonstration purposes only and may not be suitable for a production environment."
            },
            "name": "deleteAmenity",
            "location": {
              "start": 167,
              "insert": 152,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 151,
                "end": 166
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 15
          },
          {
            "id": "b4e86431-e6d5-c4bf-ff4a-3354fb894ce0",
            "ancestors": [
              "8c978f14-8824-738e-ab49-35776ef83dc4"
            ],
            "type": "function",
            "description": "updates an amenity using the provided request body and returns a response entity with a status code indicating whether the update was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity being updated.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must be valid according to the schema provided in the `@Validation` annotation.\n* `@RequestBody`: Marks the input request body as a mandatory parameter.\n* `UpdateAmenityRequest`: The class that defines the structure of the input request body, including its properties and attributes.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful.\n\n* `isUpdated`: A boolean value indicating whether the amenity was successfully updated or not. If `true`, the method executed successfully; otherwise, it did not.\n* `HttpStatus`: An instance of the `HttpStatus` class, representing the HTTP status code returned by the method. The status code is either `NO_CONTENT` (204) if the amenity was updated successfully or `NOT_FOUND` (404) otherwise.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenityApiController amenityApiController;\n\n// ...\n\nString amenityId = \"527490ab-e3c6-498f-97a1-73df5851ee54\";\nUpdateAmenityRequest updateAmenityRequest = new UpdateAmenityRequest(\n    true, \"New Amenity Name\", \"Updated description of the amenity.\", \n    3.20F, \"Amenity location.\");\namenityApiController.updateAmenity(amenityId, updateAmenityRequest);\n",
              "description": "\nNote that this is an example only and may not work as intended without additional setup or configuration."
            },
            "name": "updateAmenity",
            "location": {
              "start": 205,
              "insert": 177,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 176,
                "end": 204
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 28
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationController` class that implements the `AuthenticationApi` interface. It handles login requests and returns a response entity with user ID and JWT token in the HTTP headers. The controller uses the `AuthenticationService` to authenticate users and creates custom HTTP headers containing authentication data.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "60b75ac4-03f8-408f-1645-5bd3f7ed4112",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring REST controller that implements the AuthenticationApi interface. It handles login requests and returns an HTTP entity with user ID and JWT token in the headers based on the authentication data generated by the AuthenticationService.",
            "name": "AuthenticationController",
            "location": {
              "start": 18,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 12,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 65,
            "docLength": 5
          },
          {
            "id": "a2d6f807-5332-7497-0a43-3fe13447f155",
            "ancestors": [
              "60b75ac4-03f8-408f-1645-5bd3f7ed4112"
            ],
            "type": "function",
            "description": "handles the login request by authenticating the user using the `AuthenticationService`, and then returning an `OK` response with custom headers based on the authentication data.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request containing user credentials to authenticate and verify their identity.\n\n* `loginRequest`: A `LoginRequest` object containing user credentials for authentication.\n\nThe function returns a `ResponseEntity` with an `OK` status code and custom headers created by calling `createLoginHeaders()`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing an `Ok` status and headers generated based on the authentication data.\n\n* `ResponseEntity`: This is an object that represents a response entity with a status code and headers.\n* `ok()`: This is a method that creates a response entity with a status code of 200 (OK).\n* `headers(createLoginHeaders(authenticationData))`: This method creates a map of headers that are added to the response entity. The `createLoginHeaders` method is called with the `authenticationData` as its argument and returns a map of headers.\n* `build()`: This is a method that builds the response entity by adding the headers to the body of the entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> login(LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n}\n",
              "description": "\nThe above code snippet shows how the `login` method of the `AuthenticationController` class would be used to authenticate a user using the `LoginRequest` parameter. The method first retrieves the authentication data for the user by calling the `login` method of the `authenticationService` instance, and then creates an HTTP headers object containing the user ID and JWT token using the `createLoginHeaders` method. Finally, it returns a response entity with the `OK` status code and the custom headers containing the authentication data."
            },
            "name": "login",
            "location": {
              "start": 49,
              "insert": 24,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 23,
                "end": 48
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 25
          },
          {
            "id": "f2d12ec2-c42c-c883-874f-9db314a9be7d",
            "ancestors": [
              "60b75ac4-03f8-408f-1645-5bd3f7ed4112"
            ],
            "type": "function",
            "description": "creates HTTP headers for logging in a user, containing the user ID and JWT token obtained from the `AuthenticationData` object.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user's authentication data, including their user ID and JWT token, which are added to an HTTP headers object as key-value pairs.\n\n* `getUserId()`: retrieves the value of the `userId` field in the `authenticationData`.\n* `getJwtToken()`: retrieves the value of the `jwtToken` field in the `authenticationData`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "an HTTP headers object containing the user ID and JWT token for the authenticated user.\n\n1. `HttpHeaders`: This is the type of the returned object, which is an instance of the `HttpHeaders` class in Java.\n2. `add()` methods: The function uses two `add()` methods to add user-defined headers to the resulting HTTP headers object. Specifically, it adds a header named \"userId\" with the value of the `getUserId()` method of the `AuthenticationData` object, and another header named \"token\" with the value of the `getJwtToken()` method.\n3. `HttpHeaders` class: The returned object is an instance of the `HttpHeaders` class, which provides a way to add and retrieve HTTP headers in a structured manner in Java.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AuthenticationData authenticationData = new AuthenticationData();\nauthenticationData.setUserId(\"123\");\nauthenticationData.setJwtToken(\"abcdefghijklmnopqrstuvwxyz\");\nHttpHeaders headers = createLoginHeaders(authenticationData);\nassertEquals(headers.get(\"userId\"), \"123\");\nassertEquals(headers.get(\"token\"), \"abcdefghijklmnopqrstuvwxyz\");\n",
              "description": ""
            },
            "name": "createLoginHeaders",
            "location": {
              "start": 76,
              "insert": 57,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 56,
                "end": 75
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A Spring Boot RESTful controller implementing the `BookingsApi` interface. The controller has one method, `deleteBooking()`, which takes two path variables and deletes a booking based on those IDs. The method returns a `ResponseEntity` object with a status code indicating whether the deletion was successful or not.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "dcb10d39-3a74-a181-8d4d-98af011a6ef0",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot RESTful controller that implements the BookingsApi interface. It has a single method, deleteBooking(), which takes two path variables (amenityId and bookingId) and deletes a booking based on those IDs. The method returns a ResponseEntity with either NO_CONTENT or NOT_FOUND status code depending on whether the booking was successfully deleted or not.",
            "name": "BookingController",
            "location": {
              "start": 19,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 11,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 34,
            "docLength": 7
          },
          {
            "id": "b1b04498-c771-52aa-8f4b-ff79c38af597",
            "ancestors": [
              "dcb10d39-3a74-a181-8d4d-98af011a6ef0"
            ],
            "type": "function",
            "description": "deletes a booking based on its amenity ID and ID, returning a HTTP status code indicating whether the deletion was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of an amenity for which the booking is to be deleted.",
                "complex_type": false
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "ID of the booking to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a response entity with a status code of either NO_CONTENT or NOT_FOUND, depending on whether the booking was successfully deleted.\n\n* The `ResponseEntity` object is constructed with an HTTP status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted or not.\n* The `status()` method of the `ResponseEntity` object is used to set the HTTP status code.\n* The `build()` method of the `ResponseEntity` object is used to create a new instance of the response entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "//Example use case for deleting a booking with the given amenityId and bookingId\nResponseEntity<Void> response = deleteBooking(\"1234\", \"5678\");\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"Successfully deleted booking with ID 5678 from amenity with ID 1234\");\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"The booking with ID 5678 could not be found in the amenity with ID 1234\");\n}\n",
              "description": ""
            },
            "name": "deleteBooking",
            "location": {
              "start": 42,
              "insert": 26,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 25,
                "end": 41
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 16
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing communities and their respective houses. It handles various CRUD (create, read, update, delete) operations on communities and houses using a dependency injection framework. The code includes functions for adding, reading, updating, and deleting communities and houses, as well as removing admins from communities and deleting communities. The code also uses the `ResponseEntity` class to return HTTP status codes indicating the result of each operation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "b00c2589-e805-3688-244c-edbde26fd8ac",
            "ancestors": [],
            "type": "function",
            "description": "in the provided code handles various operations related to communities, including creating, reading, updating, and deleting communities. The controller also provides methods for removing houses from communities and admins from communities. The methods return response entities with HTTP status codes indicating the result of the operation, such as NO_CONTENT or NOT_FOUND.",
            "name": "CommunityController",
            "location": {
              "start": 64,
              "insert": 56,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 55,
                "end": 63
              }
            },
            "item_type": "class",
            "length": 418,
            "docLength": 8
          },
          {
            "id": "3277077b-e084-c9bd-e746-4bf6b1c04b43",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a `CreateCommunityRequest` from the client, maps it to a `CommunityDto`, creates a new community instance using the `communityService`, and returns a `CreateCommunityResponse` with the created community details.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object passed from the client, containing the necessary data to create a new community.\n\n* `CreateCommunityRequest request`: This is a class that contains fields for community name, description, and image.\n* `log.trace(\"Received create community request\")`: This line logs a message indicating that the method has received a create community request.\n* `CommunityDto requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request)`: This line maps the input request to a `CommunityDto` object, which contains fields for the community name and description.\n* `Community createdCommunity = communityService.createCommunity(requestCommunityDto)`: This line creates a new instance of the `Community` class using the `CommunityDto` object as input.\n* `CreateCommunityResponse createdCommunityResponse = communityApiMapper.communityToCreateCommunityResponse(createdCommunity)`: This line maps the newly created `Community` object to a `CreateCommunityResponse` object, which contains fields for the community ID and URL.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the newly created community details.\n\n* `ResponseEntity`: This is a class that represents an HTTP response entity with a status code and a body. In this case, the status code is `HttpStatus.CREATED`, which indicates that the request was successful and the community was created.\n* `body`: This is the main content of the response entity, which in this case is the `CreateCommunityResponse` object.\n* `CreateCommunityResponse`: This class represents the response to a create community request. It contains information about the created community, such as its ID, name, and description.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\n@RequestMapping(\"/api\")\npublic class CommunityApi {\n    @Autowired private CommunityService communityService;\n    @Autowired private CommunityApiMapper communityApiMapper;\n    \n    @PostMapping(path = \"/communities\", consumes = MediaType.APPLICATION_JSON_VALUE)\n    public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody CreateCommunityRequest request) {\n        log.trace(\"Received create community request\");\n        CommunityDto requestCommunityDto = communityApiMapper.createCommunityRequestToCommunityDto(request);\n        Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n        CreateCommunityResponse createdCommunityResponse = communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n        return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n    }\n}\n",
              "description": "\nThis example uses the @Autowired annotation to inject the CommunityService and CommunityApiMapper objects, which are used in the method createCommunity(). It also uses the @PostMapping annotation to map this method to POST requests at /api/communities. The @Valid annotation is used to validate the request body as per CreateCommunityRequest type.\nTo use this example, one would need to import the necessary libraries and create a new Controller class that extends RestController and implements the CommunityApi interface."
            },
            "name": "createCommunity",
            "location": {
              "start": 103,
              "insert": 71,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 70,
                "end": 102
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 32
          },
          {
            "id": "20d7b9c8-9bfd-2e84-3c45-78aec64e28fc",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a `Pageable` parameter and returns a `GetCommunityDetailsResponse` object containing a list of communities retrieved from the service.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the number of results per page and the current page number, which are used to paginate the list of communities returned by the `communityService.listAll()` method.\n\n* `@PageableDefault(size = 200)`: This annotation sets the default page size to 200 for the list of community details.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetCommunityDetailsResponse",
              "description": "a list of community details responses, containing the communities retrieved from the service and mapped to the REST API response format.\n\n* `GetCommunityDetailsResponse`: This class represents the response to the list community request. It contains a list of `GetCommunityDetailsResponseCommunity` objects, which represent the communities returned by the API.\n* `getCommunities()`: This is a List<GetCommunityDetailsResponseCommunity> that contains all the communities returned by the API.\n* `HttpStatus.OK`: The HTTP status code of the response, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n    @PageableDefault(size = 200) Pageable pageable) {\n  log.trace(\"Received request to list all community\");\n\n  Set<Community> communityDetails = communityService.listAll(pageable);\n  Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n      communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n  GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n  response.getCommunities().addAll(communityDetailsResponse);\n\n  return ResponseEntity.status(HttpStatus.OK).body(response);\n}\n",
              "description": "\nHere, the `PageableDefault` is used to set a default value of 200 for the page size. This means that if no page size is specified in the request, this method will be called with a page size of 200 by default. The method then retrieves all communities from the community service using the `listAll` method and maps them to a set of `GetCommunityDetailsResponseCommunity` objects. Finally, it returns an HTTP status code of OK along with the response body containing the mapped communities in the `GetCommunityDetailsResponse`."
            },
            "name": "listAllCommunity",
            "location": {
              "start": 144,
              "insert": 115,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 114,
                "end": 143
              }
            },
            "item_type": "method",
            "length": 14,
            "docLength": 29
          },
          {
            "id": "9dfa038a-886c-e58c-5140-6844870d7a92",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a community ID and retrieves the details of the corresponding community from the service. It then maps the response to a `GetCommunityDetailsResponse` object and returns it as an `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "id of the community whose details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of community details.\n\n* `ResponseEntity<GetCommunityDetailsResponse>`: This is the type of the output returned by the function, which is a wrapper class around the actual response. It contains an instance of `GetCommunityDetailsResponse` along with any additional metadata that may be present in the response.\n* `GetCommunityDetailsResponse`: This is the inner class contained within `ResponseEntity`, which represents the actual response returned by the function. It contains a list of communities, represented as a `List<Community>` object.\n* `communities(communities)`: This method is called on the `GetCommunityDetailsResponse` instance and returns a `List<Community>` object containing the communities found in the response.\n* `map(Function<? super T, R> mappingFunction)`: This line uses the `map()` method to apply a functional transformation to the output of the function. In this case, the transformation is defined as a lambda expression that takes an instance of `GetCommunityDetailsResponse` and returns a `ResponseEntity<GetCommunityDetailsResponse>` instance with an updated response body containing the list of communities.\n* `orElseGet(() -> ResponseEntity.notFound().build());`: This line provides an alternative to the previous mapping function in case the original response is not found. It creates a new `ResponseEntity` instance with a status code of 404 (Not Found) and builds it using the `build()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n",
              "description": "\nThis method is called when a client sends an HTTP GET request to the /community/{id} endpoint with the communityId as a path variable. This method first calls communityService.getCommunityDetailsById(String communityId) to get the details of the specified community, and then maps the response from that call using several mapping functions in order to return a ResponseEntity object containing an array list of hash sets. The response is finally returned or not found if it fails to find the requested community."
            },
            "name": "listCommunityDetails",
            "location": {
              "start": 182,
              "insert": 159,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 158,
                "end": 181
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 23
          },
          {
            "id": "1c054b56-f187-1b91-b047-5f7ca4c466cc",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a community ID and page number, retrieves the list of admins for that community from the database using the `communityService`, maps them to a REST API response format using `communityApiMapper`, and returns a `ResponseEntity` with the list of admins.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community whose admins are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page parameters that control how the list of community admins is fetched and displayed, such as the number of items per page and the current page number.\n\n* `size`: The number of results to be returned per page.\n* `sort`: The field by which the list should be sorted.\n* `direction`: The direction of the sort (ascending or descending).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of community admins.\n\n* `ResponseEntity`: This is the base class for all response entities in Spring WebFlux. It represents a response entity with an HTTP status code and headers.\n* `ok`: This is a method that creates a ResponseEntity with an HTTP status code of 200 (OK).\n* `notFound`: This is a method that creates a ResponseEntity with an HTTP status code of 404 (Not Found).\n* `map`: This is a method that applies a function to the input data and returns the result as a new ResponseEntity. In this case, it maps the `HashSet` of community admins to a `ListCommunityAdminsResponse` object.\n* `admins`: This is a variable that contains the list of community admins returned by the `findCommunityAdminsById` method. It is of type `List<CommunityAdmin>`.\n* `communityApiMapper`: This is an interface that defines the mapping between the `CommunityAdmin` object and the `RestApiResponseCommunityAdminSet` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListCommunityAdminsResponse> response = communityController.listCommunityAdmins(communityId, pageable);\n",
              "description": "\nHere, we are passing the `communityId` and `pageable` as inputs to the `listCommunityAdmins` method of the `communityController` instance. The method would then use these inputs to retrieve a list of community admins for the specified community, which would be returned in a response entity with an HTTP status code of either `200 (OK)` or `404 (NOT_FOUND)`."
            },
            "name": "listCommunityAdmins",
            "location": {
              "start": 224,
              "insert": 196,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 195,
                "end": 223
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 28
          },
          {
            "id": "9783a4c7-86b4-679f-824c-f07df3bfd678",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a community ID and pageable parameters, queries the community service to retrieve a list of houses, maps them to a HashSet, converts them into a REST API response, and returns it as an `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community for which the user is requesting to list all houses.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page size and sort information for listing community houses.\n\n* `PageableDefault`: This is an annotation that indicates the default page size for the function. The value of 200 indicates that the function will return a page of 200 houses by default.\n* `size`: This is the page size specified in the `PageableDefault` annotation. It can be overridden by passing a different value as an argument to the function.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetHouseDetailsResponse",
              "description": "a `ResponseEntity` object representing a successful response with a list of community houses.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the type of the output returned by the function, which is an entity representing a response to the list community houses request.\n* `GetHouseDetailsResponse`: This is the inner class of the `ResponseEntity`, which contains the details of the houses listed in the community.\n* `houses`: This is a `List` of `CommunityHouseSet` objects, which represent the houses in the community.\n* `map`: This is a method that maps the result of the `findCommunityHousesById` method to a `GetHouseDetailsResponse` object.\n* `orElseGet`: This is a method that returns an alternative response entity if the `findCommunityHousesById` method does not return a valid result.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n",
              "description": "\nIn this example, the `listCommunityHouses` method is being used to list all houses belonging to a specific community. The method takes two arguments:\n\n1. `communityId`: This is the ID of the community whose houses are being listed.\n2. `pageable`: This object encapsulates pagination information, including page number and size.\n\nThe method first calls `communityService.findCommunityHousesById(communityId, pageable)` to retrieve a set of houses belonging to the specified community. It then maps this set to a hash set using `HashSet::new()`. It then maps the set to an instance of `RestApiResponseCommunityHouseSet` using `communityApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet()`. Finally, it maps the instance to an instance of `GetHouseDetailsResponse` using `.houses(houses)` and returns this response as a successful HTTP 200 status code using `.map(ResponseEntity::ok)`. If the community with the specified ID does not exist, the method returns a 404 status code indicating that the community was not found.\n\nIt is important to note that `RestApiResponseCommunityHouseSet` is an instance of `Pageable` and that `HashSet` is an instance of `Collection`. Therefore, it makes sense to map the set to a hash set first before mapping it to an instance of `RestApiResponseCommunityHouseSet`.\n\nThis method would be used in a controller to list all houses belonging to a specific community. The following is an example of how this method might be used:\n"
            },
            "name": "listCommunityHouses",
            "location": {
              "start": 267,
              "insert": 238,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 237,
                "end": 266
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 29
          },
          {
            "id": "fc309fa3-d097-5e88-0a45-d716a97e4378",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a request to add admins to a community, retrieves the community optional, adds the admins to the community, and returns a response entity with the added admins.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which admins are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the details of the admins to be added to the community.\n\n* `@Valid`: This annotation indicates that the input request body must be valid according to the AddCommunityAdminRequest schema defined in the application's configuration.\n* `@PathVariable String communityId`: This specifies the ID of the community for which admins are being added.\n* `@RequestBody AddCommunityAdminRequest request`: This indicates that the input request body contains the `AddCommunityAdminRequest` data structure, which includes information about the admins to be added to the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a body containing an `AddCommunityAdminResponse` object with the added admins.\n\n* `ResponseEntity`: This is the type of the response entity, which is an instance of `ResponseEntity`.\n* `status`: This property holds the HTTP status code of the response entity. The possible values for this property are `CREATED`, `OK`, and others.\n* `body`: This property holds the body of the response entity, which is an instance of `AddCommunityAdminResponse`.\n* `admins`: This property holds a set of strings representing the IDs of the admins added to the community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\npublic void addAdminToCommunity(String communityId) {\n    AddCommunityAdminRequest request = new AddCommunityAdminRequest();\n    // Fill the Set<String> admins with admin IDs to add.\n    request.setAdmins(admins);\n    ResponseEntity<AddCommunityAdminResponse> responseEntity = communityController.addCommunityAdmins(communityId, request);\n    if (responseEntity.getStatusCode() == HttpStatus.CREATED) {\n        AddCommunityAdminResponse response = responseEntity.getBody();\n        // Use the Set<String> returned in the response.\n    } else {\n        // Handle failure.\n    }\n}\n",
              "description": "\nIn this example, an instance of CommunityController is autowired and used to call addCommunityAdmins method. The first argument communityId is a String representing the ID of the community that admins should be added to. A new AddCommunityAdminRequest instance is created with a Set<String> containing the IDs of admins to be added. The method is called and its response is checked. If the status code returned is HttpStatus.CREATED, then the method's response body is obtained and used as a Set<String> containing the newly added admin IDs. Otherwise, a failure has occurred, which needs to be handled appropriately."
            },
            "name": "addCommunityAdmins",
            "location": {
              "start": 318,
              "insert": 281,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 280,
                "end": 317
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 37
          },
          {
            "id": "1834c482-89f5-1b82-374c-d9b8aa392aeb",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "receives a request to add one or more houses to a community, maps the house names to community houses, and then adds the houses to the community. If the addition is successful, it returns a response with the added houses, otherwise it returns a bad request status.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the houses will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddCommunityHouseRequest",
                "description": "AddCommunityHouseRequest object that contains the houses to be added to the community.\n\n* `@Valid`: Indicates that the request body must be valid according to the specified validation rules.\n* `@RequestBody`: Represents the request body as a whole, indicating that it should be serialized and sent in the request message.\n* `AddCommunityHouseRequest`: The class representing the request body, which contains the houses to be added to the community.\n\t+ `getHouses()`: A set of community house names.\n\t+ `setHouses()`: No-argument constructor for setting the houses field.\n\nThe function performs the following operations:\n\n1. Logs a message with the community ID and the received request.\n2. Maps the community house names to a set of community houses using the `communityApiMapper`.\n3. Calls the `addHousesToCommunity` method of the `communityService` to add the community houses to the community.\n4. If the addition was successful, creates an `AddCommunityHouseResponse` object and returns it in the response entity with a status code of `CREATED`.\n5. Otherwise, returns a response entity with a status code of `BAD_REQUEST`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityHouseResponse",
              "description": "a `ResponseEntity` with a `AddCommunityHouseResponse` object containing the IDs of the added houses.\n\n* The response entity is an instance of `ResponseEntity`, which contains the status code and body of the response.\n* The status code is set to `HttpStatus.CREATED`, indicating that the request was successful and the result is a created resource.\n* The body of the response is an instance of `AddCommunityHouseResponse`, which contains the IDs of the added houses.\n\nThe `AddCommunityHouseResponse` object has the following properties:\n\n* `houses`: a set containing the IDs of the added houses.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<AddCommunityHouseResponse> response = communityApiController.addCommunityHouses(\"123\", new AddCommunityHouseRequest(Set.of(new CommunityHouseName(\"house-name\")));\n",
              "description": "\nThis code adds a house to the community with id 123 by creating an instance of `AddCommunityHouseRequest` and passing it as an argument to the method. The method returns a `ResponseEntity<AddCommunityHouseResponse>` object, which represents the response received from the API call. In this case, since the request was successful, the status code is 201 (CREATED) and the body of the response contains an instance of `AddCommunityHouseResponse`. The method returns a response entity with a status code of 201.\nThis example shows how to use the addCommunityHouses method of the CommunityApiController class, passing in a string as the communityId (\"123\") and an AddCommunityHouseRequest instance as the request argument. The method returns a ResponseEntity<AddCommunityHouseResponse> instance, which represents the response received from the API call.\nIn this example, since the request was successful, the status code is 201 (CREATED) and the body of the response contains an instance of AddCommunityHouseResponse. The method returns a response entity with a status code of 201."
            },
            "name": "addCommunityHouses",
            "location": {
              "start": 365,
              "insert": 335,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 334,
                "end": 364
              }
            },
            "item_type": "method",
            "length": 17,
            "docLength": 30
          },
          {
            "id": "47243988-0203-569a-084f-4a425a7be15c",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "deletes a house from a community, logging the request and checking if the house exists before returning an HTTP response.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community that the house to be deleted belongs to.",
                "complex_type": false
              },
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house to be removed from the specified community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a `ResponseEntity` object representing a successful response with a status code of `NO_CONTENT`.\n\n* `ResponseEntity`: This is the base class for all response entities in Spring WebFlux. It contains the status code and headers of the response.\n* `noContent()`: This method builds a response entity with a status code of 204 (No Content), indicating that the operation was successful but there is no content to return.\n* `<Void>`: This is the type parameter for the response entity, indicating that it will contain no data.\n\nThe various attributes of the returned output are:\n\n* `statusCode`: The status code of the response, which in this case is 204 (No Content).\n* `headers`: The headers of the response, which may include information such as the Content-Type header indicating that the response contains no data.\n\nIn summary, the returned output of the `removeCommunityHouse` function is a response entity with a status code of 204 (No Content) and an empty body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class MyController {\n    @Autowired\n    private CommunityService communityService;\n    \n    @DeleteMapping(path = \"/api/communities/{communityId}/houses/{houseId}\")\n    public ResponseEntity<Void> removeCommunityHouse(@PathVariable String communityId, @PathVariable String houseId) {\n        return communityService.removeCommunityHouse(communityId, houseId);\n    }\n}\n",
              "description": "\nThis example would be used by sending a DELETE request to the /api/communities/{communityId}/houses/{houseId} endpoint with the community ID and house ID in the URL path as path variables. The method would then call the removeCommunityHouse method on the CommunityService class, passing in the received community ID and house ID, and returning a ResponseEntity of type Void to the client, indicating whether or not the request was successful."
            },
            "name": "removeCommunityHouse",
            "location": {
              "start": 412,
              "insert": 383,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 382,
                "end": 411
              }
            },
            "item_type": "method",
            "length": 15,
            "docLength": 29
          },
          {
            "id": "3909fd5c-11da-1abc-bb4c-f17d09532b5d",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "removes an admin from a community based on their ID, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community whose admin is to be removed.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of an administrator to be removed from a community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP `NO_CONTENT` status code indicating the admin was successfully removed.\n\n* `ResponseEntity`: This is the class that represents the HTTP response entity, which contains information about the status code and headers.\n* `status`: This is a field of type `HttpStatus` that indicates the status code of the response, which can be either `NO_CONTENT` or `NOT_FOUND`.\n* `build()`: This is a method that builds the HTTP response entity based on the status code and headers.\n\nIn summary, the output of the `removeAdminFromCommunity` function is an HTTP response entity with a status code indicating whether the admin was successfully removed from the community or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> removeAdminFromCommunity(\n    @PathVariable String communityId, @PathVariable String adminId) {\n  log.trace(\"Received request to delete an admin from community with community id[{}] and admin id[{}]\", communityId, adminId);\n  boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n  if (adminRemoved) {\n    return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n  } else {\n    return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n  }\n}\n",
              "description": "\nHere are the inputs:\ncommunityId = \"12345\"\nadminId = \"67890\"\nThe method is being used to remove an admin from a community with ID 12345 and admin ID 67890.\n\nHere is the expected output:\n"
            },
            "name": "removeAdminFromCommunity",
            "location": {
              "start": 444,
              "insert": 428,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 427,
                "end": 443
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 16
          },
          {
            "id": "5c02af54-e1f9-74bd-0c43-bb46c38e460e",
            "ancestors": [
              "b00c2589-e805-3688-244c-edbde26fd8ac"
            ],
            "type": "function",
            "description": "deletes a community identified by the `communityId` parameter, returning a `ResponseEntity` with a status code indicating the result of the operation.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the requested resource has been successfully deleted and no further content is available.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested community with the provided ID could not be found, which may indicate an invalid or missing ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@GetMapping(\"/api/v1/communities/{communityId}\")\npublic ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    return communityController.deleteCommunity(communityId);\n}\n",
              "description": "\nThis code is an example of how a GET mapping to the '/api/v1/communities/' endpoint with a path variable 'communityId' would be used in a controller. The controller calls the deleteCommunity method on the communityController instance, which takes in the communityId as a parameter and returns a ResponseEntity<Void> object that represents either the HTTP status code of 204 (No Content) if successful or 404 (Not Found) if not successful."
            },
            "name": "deleteCommunity",
            "location": {
              "start": 471,
              "insert": 458,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 457,
                "end": 470
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 13
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "a REST API for managing members of a house. The API includes endpoints for listing all members of a house, adding new members to an existing house, and deleting a member from a house. The code uses Java packages such as `org.springframework.web` for building the REST API and `org.mapstruct` for mapping DTOs to and from domain objects. The code also uses the `log4j2` package for logging.\n\nThe `listAllMembersOfHouse()` endpoint retrieves a list of all members of a specified house, along with information such as the member's ID, first name, last name, phone number, and email address. The `addHouseMembers()` endpoint adds new members to an existing house, while the `deleteHouseMember()` endpoint deletes a member from a house based on their ID.\n\nOverall, this code provides a simple RESTful API for managing members of a house, with endpoints for listing all members, adding new members, and deleting members.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "cc22414c-9a49-ca89-764d-ad409e6f3990",
            "ancestors": [],
            "type": "function",
            "description": "in Spring Boot handles various operations related to houses and their members. The controller provides functions for listing all members of a house, adding new members to a house, and deleting members from a house. The functions take the house ID and member details as input and return the updated member list or a response indicating whether the operation was successful or not.",
            "name": "HouseController",
            "location": {
              "start": 50,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 42,
                "end": 49
              }
            },
            "item_type": "class",
            "length": 225,
            "docLength": 7
          },
          {
            "id": "8d1c56cd-1251-43a8-004b-f938b842787b",
            "ancestors": [
              "cc22414c-9a49-ca89-764d-ad409e6f3990"
            ],
            "type": "function",
            "description": "retrieves a list of houses from the service layer and maps them to a response object using API mapper, before returning it as a HTTP OK status response with the list of houses in the body.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "default page size and sort order for listing all houses, which is used by the `houseService.listAllHouses()` method to retrieve a paginated list of community houses from the database.\n\n* `PageableDefault(size = 200)`: This method sets the default page size to 200. The `pageable` object can be used to paginate the result set by calling its `getPageNumber()` and `getPageSize()` methods.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a list of `GetHouseDetailsResponse` objects containing house details.\n\n* `response`: an instance of `GetHouseDetailsResponse`, representing the list of houses with their details.\n* `pageable`: an instance of `Pageable`, used to control the pagination of the house list.\n* `houseService`: a service that provides access to the houses data.\n* `houseApiMapper`: a mapper that converts the house data from the local API format to the REST API format.\n* `CommunityHouse`: an entity representing a house with its details.\n* `GetHouseDetailsResponseCommunityHouseSet`: a set of `GetHouseDetailsResponseCommunityHouse` objects, each representing a single house with its details.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "GetHouseDetailsResponse response = new GetHouseDetailsResponse();\nPageable pageable = PageRequest.of(0, 20);\nresponse = listAllHouses(pageable);\n",
              "description": "\nThis example uses the `listAllHouses` method of `HouseApiController`, passing a `Pageable` object with the page number and size. The response is assigned to an instance of `GetHouseDetailsResponse`."
            },
            "name": "listAllHouses",
            "location": {
              "start": 80,
              "insert": 58,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 57,
                "end": 79
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 22
          },
          {
            "id": "2dda3828-57dc-9590-aa4d-f94a131d8b0b",
            "ancestors": [
              "cc22414c-9a49-ca89-764d-ad409e6f3990"
            ],
            "type": "function",
            "description": "receives a `houseId` and retrieves the details of the corresponding house from the `houseService`. It then maps the house details to a `GetHouseDetailsResponse` object and returns it as a `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a `GetHouseDetailsResponse` object containing a list of houses with their details.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is a generic type that represents an entity with a response body containing the details of a house.\n* `getHouseDetailsResponseCommunityHouses`: This is a list of community houses, which are the details of individual houses returned in the response body.\n* `houses(getHouseDetailsResponseCommunityHouses)`: This is a method that takes a list of community houses as input and returns a list of houses with their details.\n* `map(Function<GetHouseDetailsResponse, ResponseEntity<GetHouseDetailsResponse>> mapper)`: This line uses the `map` method to apply a mapping function to the output of the previous line. The mapping function takes the `getHouseDetailsResponseCommunityHouses` list and returns a `ResponseEntity<GetHouseDetailsResponse>` entity with the details of each house in the list.\n* `orElse(ResponseEntity.notFound().build());`: This line provides an alternative output if the original mapping function fails. It returns a `ResponseEntity.notFound()` entity, which indicates that the requested house could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n            .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n            .map(Collections::singleton)\n            .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n}\n",
              "description": "\nThe above example is a simple implementation of the `getHouseDetails` method using the provided mapper and service classes for demonstration purposes. The method first gets the house details from the service layer, then maps the result to the rest API response object using the mapper's `communityHouseToRestApiResponseCommunityHouse` method. Finally, the `getHouseDetailsResponseCommunityHouses` is collected into a list using the singleton method and converted to an instance of `GetHouseDetailsResponse` class which contains the mapped houses. If the service layer returns null or empty house details for the given `houseId`, then the method returns a response with status code 404 (NOT_FOUND) else it returns a successful response with status code 200 (OK)."
            },
            "name": "getHouseDetails",
            "location": {
              "start": 127,
              "insert": 97,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 96,
                "end": 126
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 30
          },
          {
            "id": "fe7df934-4963-6180-c943-ed1d245ae83c",
            "ancestors": [
              "cc22414c-9a49-ca89-764d-ad409e6f3990"
            ],
            "type": "function",
            "description": "retrieves all members associated with a specific house and returns them as a list in a `ListHouseMembersResponse` object.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which the members are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "Pageable object that specifies the page size and other pagination settings for retrieving the members of the house.\n\nThe `@PageableDefault` annotation specifies the default page size for the response, which is 200 in this case. The `pageable` parameter is a `Pageable` object that represents the pagination settings for the request. It has several properties and attributes, including:\n\n* `size`: The number of elements to fetch per page (default: 200)\n* `sort`: A sort specification in the format `{field}: {order}` (e.g., `'name': 'ASC'`)\n* `direction`: The direction of the sort (e.g., `'ASC'` or `'DESC')`\n* `pageable`: A `Pageable` object that represents the current page and can be used to navigate through pages\n\nIn summary, the `pageable` parameter is a pagination object that provides information about the number of elements to fetch per page, the sort specification, and the direction of the sort.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "OkResponse",
              "description": "a `List<HouseMember>` object containing all members of the specified house.\n\n* `ResponseEntity`: This is the top-level entity of the response, representing either a successful response or an error.\n* `ok`: This is a subfield of the `ResponseEntity`, indicating that the request was successful and the response contains the expected data.\n* `members`: This is a list of `HouseMember` objects, which represent the members of the house requested in the function parameters.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListHouseMembersResponse> response = houseController.listAllMembersOfHouse(\"houseId\");\nif (response.getStatusCode().is2xxSuccessful()) {\n    ListHouseMembersResponse listHouseMembersResponse = response.getBody();\n    // handle the returned ListHouseMembersResponse object\n} else {\n    // handle a non-success status code (e.g., return an error message)\n}\n",
              "description": "\nThe response object will be `null` if the response is not successful, and the body will be `null` if no members are found in the house with ID \"houseId\"."
            },
            "name": "listAllMembersOfHouse",
            "location": {
              "start": 164,
              "insert": 138,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 137,
                "end": 163
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 26
          },
          {
            "id": "a30492c9-03ce-2084-e24a-0647d7378e0f",
            "ancestors": [
              "cc22414c-9a49-ca89-764d-ad409e6f3990"
            ],
            "type": "function",
            "description": "receives a request to add members to a house, validates the request, adds the members to the house database, and returns the updated member list in response.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which members are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object containing the member information to be added to the specified house.\n\n* `houseId`: A string representing the ID of the house for which members are being added.\n* `request.getMembers()`: A set of `HouseMemberDTO` objects that contain the details of the members to be added to the house.\n* `houseService.addHouseMembers(houseId, members)`: A call to the `addHouseMembers` method of the `houseService` class, which adds the members provided in the `request` to the house with the specified ID. The method returns a set of `HouseMember` objects representing the newly added members.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object with a status code and a body containing an `AddHouseMemberResponse` object.\n\n* `response`: This is an instance of `AddHouseMemberResponse`, which contains the updated member list for the specified house ID.\n* `savedHouseMembers`: This is a set of `HouseMember` objects that represent the members added to the house.\n* `size()`: This is the number of members added to the house. If no members were added, this will be 0.\n\nIn summary, the function returns an instance of `AddHouseMemberResponse` containing the updated member list for the specified house ID, along with information on the number of members added.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AddHouseMemberRequest request = new AddHouseMemberRequest();\nrequest.setMembers(new HashSet<HouseMemberDto>() {{\n  add(new HouseMemberDto(\"member1\", \"ROLE_HOUSEHOLD\"));\n  add(new HouseMemberDto(\"member2\", \"ROLE_GUEST\"));\n}});\nResponseEntity<AddHouseMemberResponse> response = houseController.addHouseMembers(\"houseId\", request);\n",
              "description": "\nThe above code will create a new `AddHouseMemberRequest` object with two `HouseMemberDto` objects, and add them to the set of members in the request. The method call to add `HouseMember`s to the house will be made on the controller class with the parameters `\"houseId\"` and the request object created above.\n\nIf the method call is successful, it will return a response entity with an HTTP status code of 201 (CREATED) along with the added members in the body of the response. The `AddHouseMemberResponse` contains the set of `HouseMember`s that were successfully added to the house, which are then mapped back into `HouseMemberDto` objects and returned as part of the response entity's body.\n\nOn the other hand, if there is a failure in adding members to the house, the method call will return a response entity with an HTTP status code of 404 (NOT FOUND) along with an empty set of `HouseMember`s. This indicates that no members were successfully added to the house and therefore, no members were returned as part of the response entity's body.\n\nIn summary, this is how you would use addHouseMembers method: 1. Create a new `AddHouseMemberRequest` object with the set of members to be added. 2. Call the `addHouseMembers` method on the controller class passing in the required parameters. 3. If successful, the response will contain an HTTP status code of 201 (CREATED) along with the set of `HouseMember`s that were successfully added to the house. The `AddHouseMemberResponse` contains the set of members that were successfully added to the house, which are then mapped back into `HouseMemberDto` objects and returned as part of the response entity's body."
            },
            "name": "addHouseMembers",
            "location": {
              "start": 223,
              "insert": 178,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 177,
                "end": 222
              }
            },
            "item_type": "method",
            "length": 18,
            "docLength": 45
          },
          {
            "id": "c0c93397-5ab9-16b5-0449-3808a9d442f7",
            "ancestors": [
              "cc22414c-9a49-ca89-764d-ad409e6f3990"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the provided house ID and member ID, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house for which the member is being deleted.",
                "complex_type": false
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a HTTP status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the member was successfully deleted.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a status code and a body, which in this case is an empty `Void` value.\n* `HttpStatus`: This is the HTTP status code associated with the response, which indicates whether the request was successful (NO_CONTENT) or not found (NOT_FOUND).\n* `build()`: This is a method that creates a new instance of the `ResponseEntity` class based on the properties of the output.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testDeleteHouseMember() {\n    String houseId = \"123\";\n    String memberId = \"456\";\n    ResponseEntity<Void> response = this.houseController.deleteHouseMember(houseId, memberId);\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n}\n",
              "description": "\nThe test method tests the deleteHouseMember method of the HouseController class. It sets the houseId and memberId to \"123\" and \"456\", respectively, and asserts that the status code of the ResponseEntity returned by the deleteHouseMember method is HttpStatus.NO_CONTENT (204), which indicates that the member was successfully deleted from the specified house."
            },
            "name": "deleteHouseMember",
            "location": {
              "start": 263,
              "insert": 242,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 241,
                "end": 262
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "a web service for managing house member documents. It handles various operations such as creating, updating, and deleting documents for different members. The code uses Spring WebFlux and Spring Data JPA packages, and includes functions for validating requests, handling exceptions, and returning response entities with appropriate status codes.\n\nThe code defines several endpoints for these operations, including a single endpoint for uploading a new document, an endpoint for updating an existing document, and an endpoint for deleting a document. Each endpoint takes in relevant parameters such as the member ID or file content, and uses JPA queries to perform the necessary database updates.\n\nOverall, this code provides a simple web service for managing house member documents, with features such as request validation, exception handling, and status codes for successful operations.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6ed4b29a-645a-bd9b-7945-4406b007f50f",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to house member documents, including creating, updating, and deleting them. The controller uses dependency injection to inject the HouseMemberDocumentService interface, which provides methods for creating, updating, and deleting house member documents. The controller also returns response entities with status codes indicating whether the operation was successful or not.",
            "name": "HouseMemberDocumentController",
            "location": {
              "start": 44,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 38,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 144,
            "docLength": 5
          },
          {
            "id": "44f72d0b-f70c-0889-f543-8dd6f18b1e59",
            "ancestors": [
              "6ed4b29a-645a-bd9b-7945-4406b007f50f"
            ],
            "type": "function",
            "description": "receives a `memberId` parameter and retrieves the corresponding house member document from the service. It then returns the document content as a byte array with appropriate HTTP headers.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "identifier of the member for whom the house member document is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing the requested document content as a byte array, with appropriate headers and status code.\n\n* `HttpHeaders headers`: This object represents the HTTP headers that will be used to send the response. The `CacheControl` header is set to `noCache()` to indicate that the document should not be cached by the client. The `ContentType` header is set to `MediaType.IMAGE_JPEG` to specify the content type of the document.\n* `byte[] content`: This is the actual document content, which is a byte array representing the image data.\n* `ContentDisposition contentDisposition`: This object represents the content disposition of the response, which specifies the filename and other attributes of the document. The `filename` attribute is set to the name of the document file.\n\nThe function returns a `ResponseEntity` object that contains the document content and HTTP headers. The `ResponseEntity` object has three properties: the document content, the HTTP headers, and the response status code. In this case, the status code is set to `HttpStatus.OK`, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class HouseMemberDocumentController {\n    @Autowired\n    private HouseMemberDocumentService houseMemberDocumentService;\n\n    @GetMapping(\"/house-member-documents/{memberId}\")\n    public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n        return houseMemberDocumentService.getHouseMemberDocument(memberId);\n    }\n}\n",
              "description": "\nIn this example, the method is called with the parameter 'memberId', which is a `String`. The method then calls on the service to find the House Member Document using that ID, and returns it if found. If not, an empty ResponseEntity is returned with a NOT_FOUND status code."
            },
            "name": "getHouseMemberDocument",
            "location": {
              "start": 67,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 66
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 16
          },
          {
            "id": "4bb1e794-98d3-b3ae-5843-c0f3e2598cbf",
            "ancestors": [
              "6ed4b29a-645a-bd9b-7945-4406b007f50f"
            ],
            "type": "function",
            "description": "receives a request to upload a member document and creates a new house member document if successful, otherwise returns a `NOT_FOUND` response.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is being uploaded.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the document to be added as a member of a house, which is being passed through the `@RequestParam` annotation.\n\n* `memberId`: The ID of the member whose document is being uploaded.\n* `memberDocument`: A MultipartFile object containing the document to be uploaded for the specified member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the operation was successful or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)`: This indicates that the operation was successful and no content was returned to the client.\n* `map()`: This method is used to map a single `Optional` value to a `ResponseEntity`. If the `Optional` contains a value, it returns a `ResponseEntity` with a status code of `NO_CONTENT`. If the `Optional` is empty, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.\n* `orElseGet()`: This method is used to provide an alternative value if the `map()` method does not produce a valid response. In this case, it returns a `ResponseEntity` with a status code of `NOT_FOUND` if the `Optional` is empty.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class HouseMemberController {\n  @Autowired\n  private HouseMemberDocumentService houseMemberDocumentService;\n\n  @PostMapping(\"/member/{memberId}/document\")\n  public ResponseEntity<String> uploadHouseMemberDocument(@PathVariable(\"memberId\") String memberId,\n      @RequestParam(\"file\") MultipartFile file) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(file, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n}\n",
              "description": ""
            },
            "name": "uploadHouseMemberDocument",
            "location": {
              "start": 115,
              "insert": 92,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 91,
                "end": 114
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 23
          },
          {
            "id": "c381b981-ee8a-3eb2-d54c-c47fa0b54f7b",
            "ancestors": [
              "6ed4b29a-645a-bd9b-7945-4406b007f50f"
            ],
            "type": "function",
            "description": "updates a house member's document based on the provided ID and multipart file. It returns a response entity with a NO_CONTENT status code if the update is successful, or a NOT_FOUND status code otherwise.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the member whose document is being updated.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the updated house member document to be saved into the database.\n\n* `memberId`: A String representing the member's ID.\n* `memberDocument`: A MultipartFile object containing the member's document to be updated.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the update was successful or not.\n\n* The `ResponseEntity` object represents the response to the update request, with a status code indicating whether the operation was successful or not. In this case, the status code is either `HttpStatus.NO_CONTENT`, indicating that the operation was successful and no additional content was returned, or `HttpStatus.NOT_FOUND`, indicating that the member document could not be found.\n* The `map` method is used to transform the `Optional<HouseMemberDocument>` return value into a `ResponseEntity` object. If the `Optional` is present, it contains the updated house member document, and the response entity has a status code of `HttpStatus.NO_CONTENT`. Otherwise, the response entity has a status code of `HttpStatus.NOT_FOUND`.\n* The `orElseGet` method is used to provide an alternative response entity if the `Optional` is empty. In this case, the alternative response entity has a status code of `HttpStatus.NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": "\nHere is an explanation of the code:\n\n* `log.trace(\"Received request to update house member documents\");` : This line logs a message indicating that a request has been received to update a house member document.\n* `Optional<HouseMemberDocument> houseMemberDocumentOptional = houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);`: This line updates the house member document using the provided file and member ID and returns an optional containing either a HouseMemberDocument object or no value if the operation failed.\n* `return houseMemberDocumentOptional.map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build()).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line returns a response entity with a status code of either NO_CONTENT or NOT_FOUND, depending on whether the document was successfully deleted or not. If there is no document, then an empty optional is returned and a NOT_FOUND status code is used. Otherwise, the operation is successful and a NO_CONTENT status code is used.\n\nIt's important to note that this method uses Java 8 features like Optional and lambda expressions. It may not be appropriate for all use cases but it provides an elegant way of handling a possible null value returned by the houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId) method call."
            },
            "name": "updateHouseMemberDocument",
            "location": {
              "start": 151,
              "insert": 127,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 126,
                "end": 150
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 24
          },
          {
            "id": "f6575cab-895e-819e-b741-d607ddc80e13",
            "ancestors": [
              "6ed4b29a-645a-bd9b-7945-4406b007f50f"
            ],
            "type": "function",
            "description": "deletes a house member document based on the provided `memberId`. If successful, it returns a `ResponseEntity` with a status code of `NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the house member whose document is to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: indicates that the document was successfully deleted\n* `HttpStatus.NOT_FOUND`: indicates that the document could not be found or was not deletable",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "deleteHouseMemberDocument(\"12345\");\n",
              "description": "\nThis would send a DELETE request to /house-member-documents/12345 and return the response with a status code of 204 if successful. If the document is not found, the status code would be 404."
            },
            "name": "deleteHouseMemberDocument",
            "location": {
              "start": 177,
              "insert": 162,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 161,
                "end": 176
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "A PaymentService and CommunityService classes that handle payment and community-related operations, respectively. The PaymentService class provides endpoints for creating, updating, and listing payments, as well as scheduling payments for an admin based on their membership in a community. The CommunityService class retrieves community details and admins based on the community ID, and checks if an admin is present in a given community using their 12-digit ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "c70e9325-f737-c9b5-ed41-deb9c65db697",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to payments in the application. It provides functions to list all payments for a specified member ID, list all payments scheduled by an admin, and check if an administrator is an admin of a given community based on their details and admins stream. These functions return response entities containing lists of payment objects or Boolean values indicating whether an administrator exists in the given community.",
            "name": "PaymentController",
            "location": {
              "start": 59,
              "insert": 51,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 50,
                "end": 58
              }
            },
            "item_type": "class",
            "length": 263,
            "docLength": 8
          },
          {
            "id": "f845612e-8c6a-0c9d-e44f-756a802b8a94",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "processes a schedule payment request from a community member, verifies the user's admin role in the community house, and schedules the payment if the user is an admin.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "SchedulePaymentRequest object containing information necessary for scheduling a payment, such as the member ID and admin ID of the community house.\n\n* `request.getMemberId()` - returns the member ID of the house member to be paid.\n* `request.getAdminId()` - returns the ID of the community admin who is authorizing the payment.\n\nThe function then checks if the user admin of the community house is the same as the one specified in the request, and proceeds accordingly.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response message with a status code and a body. In this case, the status code is set to `HttpStatus.CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: The `body` attribute contains the `SchedulePaymentResponse` object, which provides information about the scheduled payment.\n* `SchedulePaymentResponse`: This class represents the response message for the scheduled payment. It contains fields for the payment ID, the member ID, the community house ID, and a flag indicating whether the payment was successful or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setAmount(10);\nrequest.setMemberId(\"12345\");\nrequest.setAdminId(\"67890\");\nrequest.setCommunityHouseId(\"23456\");\nresponseEntity = paymentService.schedulePayment(request);\n",
              "description": "\nThe response entity would contain the status code `HttpStatus.CREATED` and a body containing the response object with all the fields filled in, including the id of the new payment. The function returns `ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse)`.\n\nThe method calls other methods to validate whether an admin exists for the given community house and if it is an admin for that community. If the admin does not exist or the admin is not an admin of the community, the function returns `ResponseEntity.notFound().build()`. Otherwise, it proceeds to map the request object to a payment DTO and calls the method schedulePayment on the payment service to create a new payment and maps the response object returned from the payment service back to the SchedulePaymentResponse object that is contained in the response entity."
            },
            "name": "schedulePayment",
            "location": {
              "start": 99,
              "insert": 67,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 66,
                "end": 98
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 32
          },
          {
            "id": "05bc375b-f94b-35b0-5949-e54179acd9b8",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "verifies if a specified User is an admin of a CommunityHouse by checking if the User's name appears in the CommunityHouse's Admin list.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "community house whose admins are being checked against to see if the given user is an admin of that community house.\n\n* `communityHouse`: A `CommunityHouse` object that represents a community house with various attributes and methods.\n* `getCommunity()`: Returns the community associated with the `communityHouse` object.\n* `getAdmins()`: Returns a list of users who are admins of the community associated with the `communityHouse` object.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object to be checked for admin status in relation to the CommunityHouse.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, which likely contains information about a community and its administration.\n* `getAdmins()`: This method returns a list of `User` objects, representing the admins of the community.\n* `contains()`: This method checks if a specific `User` object is present in the list returned by `getAdmins()`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the specified user is an admin of the community house.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        CommunityService communityService = new CommunityService();\n        User admin = new User(\"admin\");\n        CommunityHouse communityHouse = new CommunityHouse();\n        communityHouse.setCommunity(new Community());\n        \n        boolean isAdmin = communityService.isUserAdminOfCommunityHouse(communityHouse, admin);\n    }\n}\n",
              "description": ""
            },
            "name": "isUserAdminOfCommunityHouse",
            "location": {
              "start": 151,
              "insert": 125,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 124,
                "end": 150
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 26
          },
          {
            "id": "8e6a0284-bfcb-e693-1a4e-94e15681d755",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "receives a payment ID and retrieves payment details from the service, mapping them to a `SchedulePaymentResponse` object and returning it as an `ResponseEntity`.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "id of the payment to retrieve details about.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing a payment detail response.\n\n* `paymentId`: The identifier of the payment being retrieved.\n* `paymentService`: An instance of the `PaymentService` class, which is responsible for managing payments.\n* `schedulePaymentApiMapper`: A mapping function that converts a `Payment` object to a `SchedulePaymentResponse` object.\n* `ResponseEntity`: A class that represents a response entity, which can be either `ok` or `notFound`.\n\nThe function returns an `Optional` instance of `ResponseEntity`, which contains either the converted `SchedulePaymentResponse` object or an error message indicating that the payment does not exist.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public ResponseEntity<SchedulePaymentResponse> getPaymentDetails(String paymentId) {\n    return schedulePaymentsService.listPaymentDetails(paymentId);\n}\n",
              "description": "\nIn the above example, `schedulePaymentsService` is an instance of the class implementing this method, and it is used to call the method. The method's output is then assigned to a variable called `responseEntity`, which can be used later in the program."
            },
            "name": "listPaymentDetails",
            "location": {
              "start": 181,
              "insert": 157,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 156,
                "end": 180
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 24
          },
          {
            "id": "ac31713f-2d32-bc9c-4e43-3ed4940bae90",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "retrieves all payments for a specified house member and maps them to a response entity with a list of `MemberPayment` objects.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the house member for whom the payments are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of member payments.\n\n* `ResponseEntity<ListMemberPaymentsResponse>`: This is the overall response entity that contains the list of member payments.\n* `paymentService.getHouseMember(memberId)`: This method returns a `Optional<HouseMember>` object, which contains information about the house member with the given `memberId`.\n* `paymentService.getPaymentsByMember(memberId)`: This method returns a list of `Payment` objects, which represent the payments made by the house member with the given `memberId`.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()`: This method maps the `Payment` objects to a list of `MemberPayment` objects, which are then included in the response entity.\n* `new ListMemberPaymentsResponse().payments(memberPayments)`: This method creates a new instance of the `ListMemberPaymentsResponse` class and sets the `payments` field to the list of `MemberPayment` objects returned by the previous method calls.\n* `ResponseEntity.ok()`: This method builds a response entity with a status code of 200 (OK) and returns it as part of the overall response entity.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This method provides an alternative way to handle non-existent house members, by returning a response entity with a status code of 404 (NOT FOUND).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate PaymentService paymentService;\n\n@Override\npublic ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\", memberId);\n    \n    return paymentService.getHouseMember(memberId)\n            .map(payments -> paymentService.getPaymentsByMember(memberId))\n            .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n            .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n            .map(ResponseEntity::ok)\n            .orElseGet(() -> ResponseEntity.notFound().build());\n}\n",
              "description": "\nThis method would first get the member from the paymentService using the `getHouseMember` method and if successful, it would retrieve all payments for that member using the `getPaymentsByMember` method and map those to a list of `RestApiResponseMemberPayment` objects using the `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet` method. The resulting list of `RestApiResponseMemberPayment` objects would then be converted into a `ListMemberPaymentsResponse` object and returned as an HTTP response entity with the status code 200 (OK) if successful. If no member was found for the given ID, the function would return a response entity with a status of 404 (Not Found)."
            },
            "name": "listAllMemberPayments",
            "location": {
              "start": 218,
              "insert": 191,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 190,
                "end": 217
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 27
          },
          {
            "id": "b6b0b990-c4fc-e689-894f-1daefaec1598",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "receives a community ID and an admin ID, and lists all payments scheduled by the admin with the given ID.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community that the admin belongs to, which is used to filter the list of payments scheduled by the admin.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "identifier of the admin for whom the scheduled payments are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for the payments, which allows the function to retrieve only a subset of the payments that match the given criteria and to provide the page number and size of the response.\n\n* `communityId`: A string representing the ID of the community for which the payments are to be listed.\n* `adminId`: A string representing the ID of the admin for whom the payments are to be listed.\n* `isAdminInGivenCommunity`: A boolean indicating whether the given admin is present in the specified community.\n\nThe `pageable` object has several properties and attributes, including:\n\n* `pageNumber`: An integer representing the current page number being accessed.\n* `pageSize`: An integer representing the number of payments to be listed per page.\n* `sort`: A string representing the field by which the payments are sorted.\n* `direction`: A string representing the sorting direction (either \"asc\" or \"desc\").",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPaymentsResponse",
              "description": "a `ResponseEntity` object containing a `ListAdminPaymentsResponse` body with a list of `AdminPayment` objects and pagination metadata.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the specified admin.\n* `pageInfo`: A `PageInfo` object containing information about the pagination of the results, such as the total number of results and the current page being displayed.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Example 1\nString communityId = \"123456789\";\nString adminId = \"123456789\";\nPageable pageable = PageRequest.of(0, 10);\nResponseEntity<ListAdminPaymentsResponse> response = paymentApiController.listAllAdminScheduledPayments(communityId, adminId, pageable);\nListAdminPaymentsResponse listAdminPaymentsResponse = response.getBody();\nSet<AdminPayment> adminPayments = listAdminPaymentsResponse.getPayments();\nPageInfo pageInfo = listAdminPaymentsResponse.getPageInfo();\n\n// Example 2\nString communityId = \"123456789\";\nString adminId = \"098765432\";\nPageable pageable = PageRequest.of(0, 10);\nResponseEntity<ListAdminPaymentsResponse> response = paymentApiController.listAllAdminScheduledPayments(communityId, adminId, pageable);\n",
              "description": "\nIn the first example, an admin with the ID \"123456789\" is listed in the community with the ID \"123456789\". The method returns a `ListAdminPaymentsResponse` object containing a set of payments made by that admin and its page information.\n\nIn the second example, an admin with the ID \"098765432\" is not listed in any community. Therefore, the method returns a `ResponseEntity<ListAdminPaymentsResponse>` object with a status code of 404 (Not Found)."
            },
            "name": "listAllAdminScheduledPayments",
            "location": {
              "start": 265,
              "insert": 231,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 230,
                "end": 264
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 34
          },
          {
            "id": "5833a0cd-85dc-4c8d-4140-cdc9128a5f69",
            "ancestors": [
              "c70e9325-f737-c9b5-ed41-deb9c65db697"
            ],
            "type": "function",
            "description": "determines if a user is an admin in a specified community by querying the community details and admins, and then checking if the user ID matches that of an admin.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "id of the community whose details and admins are to be retrieved for checking if the given `adminId` is an admin in that community.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "12-digit unique identifier of an admin to be checked if they are an admin in the given community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* `communityId`: The ID of the community being checked for admin status.\n* `adminId`: The ID of the admin being checked for membership in the community.\n* `Boolean`: Returns a boolean value indicating whether the admin is an administrator in the given community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Boolean adminIsInCommunity = isAdminInGivenCommunity(\"community-id\", \"admin-user-id\");\nif (adminIsInCommunity) {\n    // do something if the admin user is in the community with given ID\n} else {\n    // do something else if the admin user is not in the community with given ID\n}\n",
              "description": "\nThis code first calls the method isAdminInGivenCommunity, passing the values \"community-id\" and \"admin-user-id\". If this function returns true, then it means that the admin user is in the community with the given ID. Otherwise, if the function returns false, it means that the admin user is not in the community with the given ID.\n\nThe method's implementation can be written as follows:\n"
            },
            "name": "isAdminInGivenCommunity",
            "location": {
              "start": 314,
              "insert": 288,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 287,
                "end": 313
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 26
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "a20e19aa-0ee6-42ba-9d94-a0f853db2ec2",
            "ancestors": [],
            "type": "function",
            "name": "signUp",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 68,
              "start": 95
            },
            "returns": "ResponseEntity<CreateUserResponse>",
            "params": [
              {
                "name": "request",
                "type": "CreateUserRequest"
              }
            ],
            "skip": false,
            "docLength": 27,
            "length": 12,
            "comment": {
              "description": "Handles the creation of a new user account. It receives a `CreateUserRequest` object, converts it to a `UserDto`, creates a new user using the `userService`, and returns the created user's details in a `CreateUserResponse`.",
              "params": [
                {
                  "name": "request",
                  "type": "CreateUserRequest",
                  "description": "CreateUserRequest object passed in from the client, providing the necessary information for creating a new user account."
                }
              ],
              "returns": {
                "type": "ResponseEntity<CreateUserResponse>",
                "description": "a `ResponseEntity` with a status of `CREATED` and the created user's details in the body."
              }
            }
          },
          {
            "id": "fefdb1ce-6654-43d9-b11d-184db9c98df2",
            "ancestors": [],
            "type": "function",
            "name": "listAllUsers",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 108,
              "start": 139
            },
            "returns": "ResponseEntity<GetUserDetailsResponse>",
            "params": [
              {
                "name": "pageable",
                "type": "Pageable"
              }
            ],
            "skip": false,
            "docLength": 31,
            "length": 13,
            "comment": {
              "description": "Receives a pageable request from the client and returns a list of users in the form of a `GetUserDetailsResponse`. It uses the `userService` to retrieve the list of users, and then maps them to the corresponding REST API response using `userApiMapper`.",
              "params": [
                {
                  "name": "pageable",
                  "type": "Pageable",
                  "description": "page request parameters, such as the number of users to be listed and the sorting criteria."
                }
              ],
              "returns": {
                "type": "ResponseEntity<GetUserDetailsResponse>",
                "description": "a list of user details in the form of a `GetUserDetailsResponse`."
              }
            }
          },
          {
            "id": "ed81e636-7981-4c82-933e-9281ed84491b",
            "ancestors": [],
            "type": "function",
            "name": "getUserDetails",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 153,
              "start": 181
            },
            "returns": "ResponseEntity<GetUserDetailsResponseUser>",
            "params": [
              {
                "name": "userId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 28,
            "length": 9,
            "comment": {
              "description": "Receives a user ID as input and retrieves the corresponding user details from the service, mapping them to a `GetUserDetailsResponse` object, and returning it as an HTTP response entity.",
              "params": [
                {
                  "name": "userId",
                  "type": "String",
                  "description": "unique identifier of the user for whom details are to be retrieved."
                }
              ],
              "returns": {
                "type": "ResponseEntity<GetUserDetailsResponseUser>",
                "description": "a `ResponseEntity` object with a status code of HTTP 200 and a body containing the details of the user with the specified ID."
              }
            }
          },
          {
            "id": "8edbc6e1-cdd0-4303-b74c-e82483835b24",
            "ancestors": [],
            "type": "function",
            "name": "usersPasswordPost",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 191,
              "start": 230
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "action",
                "type": "String"
              },
              {
                "name": "forgotPasswordRequest",
                "type": "ForgotPasswordRequest"
              }
            ],
            "skip": false,
            "docLength": 39,
            "length": 16,
            "comment": {
              "description": "Processes password reset requests. It checks the action type and performs the corresponding operation: sending a password reset link or resetting the password. If successful, it returns an `OK` response entity; otherwise, it returns a `BAD_REQUEST` response entity.",
              "params": [
                {
                  "name": "action",
                  "type": "String",
                  "description": "password action to be performed, which is either FORGOT or RESET, and is used to determine the appropriate password reset process."
                },
                {
                  "name": "forgotPasswordRequest",
                  "type": "ForgotPasswordRequest",
                  "description": "Forgot Password Request object containing the user's email address and other information needed to initiate the password reset process."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "an `ResponseEntity` object with a status code of either `ok` or `badRequest`, depending on whether the password reset was successful or not."
              }
            }
          },
          {
            "id": "337d6541-af71-48fe-8b0d-9b59dbb9d42b",
            "ancestors": [],
            "type": "function",
            "name": "listAllHousemates",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 247,
              "start": 273
            },
            "returns": "ResponseEntity<ListHouseMembersResponse>",
            "params": [
              {
                "name": "userId",
                "type": "String"
              },
              {
                "name": "pageable",
                "type": "Pageable"
              }
            ],
            "skip": false,
            "docLength": 26,
            "length": 11,
            "comment": {
              "description": "Retrieves a list of members for all houses associated with a user, maps them to a response entity, and returns it.",
              "params": [
                {
                  "name": "userId",
                  "type": "String",
                  "description": "unique identifier of the user for whom the list of housemates is being requested."
                },
                {
                  "name": "pageable",
                  "type": "Pageable",
                  "description": "page number and page size of the list of house members that the user wants to view, which allows for pagination of the list."
                }
              ],
              "returns": {
                "type": "ResponseEntity<ListHouseMembersResponse>",
                "description": "a `ResponseEntity` object representing the list of house members for the specified user."
              }
            }
          },
          {
            "id": "f65892df-ed7b-47db-a625-016ec3368111",
            "ancestors": [],
            "type": "function",
            "name": "confirmEmail",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 285,
              "start": 305
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "userId",
                "type": "String"
              },
              {
                "name": "emailConfirmToken",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 20,
            "length": 9,
            "comment": {
              "description": "Confirms an email address for a user by checking the confirmation token provided, and returns a response entity indicating whether the confirmation was successful or not.",
              "params": [
                {
                  "name": "userId",
                  "type": "String",
                  "description": "ID of the user whose email is being confirmed."
                },
                {
                  "name": "emailConfirmToken",
                  "type": "String",
                  "description": "confirmation token provided to the user for email verification, which is used by the `userService.confirmEmail()` method to verify the email address of the user."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "an `ResponseEntity` object with a status of either `ok` or `badRequest`, depending on whether the email confirmation was successful."
              }
            }
          },
          {
            "id": "a3e4d8f7-08d3-4b25-9d35-71af4209f014",
            "ancestors": [],
            "type": "function",
            "name": "resendConfirmEmailMail",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 315,
              "start": 333
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "userId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 18,
            "length": 9,
            "comment": {
              "description": "Resends an email confirmation request to a user if one was previously sent and failed, returning a `ResponseEntity` with a status code indicating success or failure.",
              "params": [
                {
                  "name": "userId",
                  "type": "String",
                  "description": "user for whom the email confirmation status is to be checked and resent if necessary."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "an `OK` response entity indicating successful resending of the email confirmation to the user."
              }
            }
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "A class called `AmenityDto` that represents an amenity, including its unique identifier, name, description, price, and community ID. The class uses various constructors, builders, and data annotations to provide flexibility in how the class can be created and used.",
        "items": [
          {
            "id": "4fd71ac7-75f2-0fab-144e-925dee948ec4",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity with a unique identifier (id), along with other relevant attributes such as amenityId, name, description, price, and communityId, using various constructors, builders, and data annotations.\nFields:\n\t- id (Long): in the AmenityDto class represents a unique identifier for each amenity.\n\t- amenityId (String): represents a unique identifier for a specific amenity within a community.\n\t- name (String): represents the name of an amenity.\n\t- description (String): is a string representing a brief summary or description of an amenity.\n\t- price (BigDecimal): represents a decimal value for the cost of an amenity.\n\t- communityId (String): represents a unique identifier for a specific community or neighborhood associated with an amenity.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a unique identifier for each amenity."
              },
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for a specific amenity within a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "is a string representing a brief summary or description of an amenity."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a decimal value for the cost of an amenity."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for a specific community or neighborhood associated with an amenity."
              }
            ],
            "name": "AmenityDto",
            "location": {
              "start": 40,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 39
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityDto` class with fields for an ID, community ID, name, district, and a set of user objects representing admins in the community. The class uses Lombok's `@AllArgsConstructor` and `@NoArgsConstructor` annotations to control the constructor behavior, and `@Data` annotation to mark the class as data-only.",
        "items": [
          {
            "id": "cb901681-26cc-fe86-b141-c84ead8fe563",
            "ancestors": [],
            "type": "function",
            "description": "represents a community object containing an identifier and other relevant details such as name, district, and a set of user objects representing admins in the community, all with no or optional constructors.\nFields:\n\t- id (Long): represents an identifier for each communityDto instance in the system.\n\t- communityId (String): represents a unique identifier for a community.\n\t- name (String): in the CommunityDto class represents a string value that identifies the name of a community.\n\t- district (String): represents a string value representing a geographic area or district associated with the community object in the `CommunityDto` class.\n\t- admins (Set<UserDto>): in the CommunityDto class is a set of UserDtos representing community administrators.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents an identifier for each communityDto instance in the system."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a unique identifier for a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a string value that identifies the name of a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a string value representing a geographic area or district associated with the community object in the `CommunityDto` class."
              },
              {
                "name": "admins",
                "type_name": "Set<UserDto>",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class is a set of UserDtos representing community administrators."
              }
            ],
            "name": "CommunityDto",
            "location": {
              "start": 38,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 37
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) class called `CommunityHouseDto` with attributes `houseId` and `name`. The `AllArgsConstructor` and `NoArgsConstructor` annotations indicate that these constructors are used to initialize the class fields.",
        "items": [
          {
            "id": "028edd63-7a9a-0488-594e-22509db38edb",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for a community house with an ID and name attributes.\nFields:\n\t- houseId (String): represents an identifier for a specific community house.\n\t- name (String): in the CommunityHouseDto class represents a string value representing the name of a house.\n\n",
            "fields": [
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "represents an identifier for a specific community house."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "in the CommunityHouseDto class represents a string value representing the name of a house."
              }
            ],
            "name": "CommunityHouseDto",
            "location": {
              "start": 32,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 31
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 9
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A `PaymentDto` class with several fields and methods for representing payment information. The class includes fields for payment ID, charge amount, payment type, description, recurrence status, due date, and user and member information. It also includes methods for building and getting the object's fields, as well as setting and retrieving specific fields.",
        "items": [
          {
            "id": "43409d37-43a5-a9ae-1146-c84aecb79402",
            "ancestors": [],
            "type": "function",
            "description": "represents a payment record with various details such as payment ID, charge amount, type, description, recurrence status, due date, and user and member information in a structured format.\nFields:\n\t- paymentId (String): in the PaymentDto class represents a unique identifier for a payment transaction.\n\t- charge (BigDecimal): in the PaymentDto class represents a monetary value, specifically a BigDecimal object, used to represent a payment amount.\n\t- type (String): in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\".\n\t- description (String): in the PaymentDto class represents a brief textual description of the payment.\n\t- recurring (boolean): in the PaymentDto class represents whether a payment is a recurring one.\n\t- dueDate (String): represents a string value representing the date on which a payment is due or has to be made.\n\t- admin (UserDto): in the PaymentDto class represents an entity of type `UserDto`.\n\t- member (HouseMemberDto): in the PaymentDto class represents an association with a HouseMemberDto object containing information about a member of a household.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a unique identifier for a payment transaction."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a monetary value, specifically a BigDecimal object, used to represent a payment amount."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a brief textual description of the payment."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents whether a payment is a recurring one."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a string value representing the date on which a payment is due or has to be made."
              },
              {
                "name": "admin",
                "type_name": "UserDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an entity of type `UserDto`."
              },
              {
                "name": "member",
                "type_name": "HouseMemberDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an association with a HouseMemberDto object containing information about a member of a household."
              }
            ],
            "name": "PaymentDto",
            "location": {
              "start": 44,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A `UserDto` class that represents a data transfer object (DTO) for a user in a system. The class includes fields for the user's unique identifier, user ID, name, email, password, and community IDs, as well as a boolean flag indicating whether their email has been confirmed. The class uses Lombok libraries to implement builder, getter, and setter methods for ease of use.",
        "items": [
          {
            "id": "33ee8c38-dcb5-cfb4-fc4f-c10caffd8206",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for a user containing their unique identifier, user ID, name, email, password, community IDs, and an email confirmed status.\nFields:\n\t- id (Long): represents a unique identifier for a user in the system.\n\t- userId (String): in the UserDto class represents a unique identifier for a user within the system.\n\t- name (String): in the UserDto class represents a string value containing the user's name.\n\t- email (String): in the UserDto class represents a string value containing the user's email address.\n\t- password (String): in the UserDto class stores a string value representing a user's password.\n\t- encryptedPassword (String): in the UserDto class stores an encrypted version of the user's password.\n\t- communityIds (Set<String>): in the UserDto class represents a set of strings indicating the user's membership in various communities.\n\t- emailConfirmed (boolean): in the UserDto class indicates whether a user's email address has been confirmed through a verification process.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a unique identifier for a user within the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing the user's email address."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores a string value representing a user's password."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores an encrypted version of the user's password."
              },
              {
                "name": "communityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a set of strings indicating the user's membership in various communities."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class indicates whether a user's email address has been confirmed through a verification process."
              }
            ],
            "name": "UserDto",
            "location": {
              "start": 43,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 42
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between `CommunityDto` and `Community` entities using the `Mapper` interface from the `org.mapstruct` package. The `CommunityMapper` interface maps `CommunityDto` to `Community` through a single method, `communityDtoToCommunity()`.",
        "items": [
          {
            "id": "febe825c-1de9-aa90-4146-ac17a8f96ed1",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between the CommunityDto and Community entities using Mapper functionality.",
            "name": "CommunityMapper",
            "location": {
              "start": 26,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseMemberMapper` that provides methods for mapping between sets of HouseMembers and related data structures. The methods include converting between HouseMember objects and their corresponding DTOs, adding new HouseMembers to a response, and mapping between different sets of HouseMembers. The interface uses the `MapStruct` package for defining mappings between classes.",
        "items": [
          {
            "id": "17748e9a-93db-e68a-be49-b52b6187bc88",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mapping methods between sets of HouseMembers and related data structures, including converting between House Member objects and their corresponding DTOs, as well as adding new HouseMembers to a response.",
            "name": "HouseMemberMapper",
            "location": {
              "start": 29,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "An interface `PaymentMapper` that provides mapping between `PaymentDto` and `Payment` objects using MapStruct. The interface includes two methods: `paymentDtoToPayment()` converts a `PaymentDto` to a `Payment` object, and `paymentToPaymentDto()` converts a `Payment` object to a `PaymentDto` object. The mapping is done by specifying the fields of both objects that need to be mapped, using the `@Mapping` annotation.",
        "items": [
          {
            "id": "c670db1c-9158-3b83-a542-d5db38e8c0f9",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between a DTO (PaymentDto) and an entity object (Payment).",
            "name": "PaymentMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 7,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides a mapping between `UserDto` and `User` objects using MapStruct, a dependency injection framework for Java. The interface has two methods: `userDtoToUser` that converts a `UserDto` object to a `User` object, and `userToUserDto` that converts a `User` object to a `UserDto` object.",
        "items": [
          {
            "id": "fb12f059-804c-e6a1-6248-dd96250f0839",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for user data.",
            "name": "UserMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 6,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "An exception handler class called `FileUploadExceptionAdvice` that handles two types of exceptions: `MaxUploadSizeExceededException` and `IOException`. The class uses Spring Boot's `@ControllerAdvice` annotation to define custom exception handlers for these exceptions. When an exception occurs, the handler returns a `ResponseEntity` object with a custom message for the user. The class uses the `HttpStatus` class to set the status code of the response entity and the `HashMap` class to create a map containing the custom message.",
        "items": [
          {
            "id": "dc48a804-a80f-dbbe-ff4f-96aea1799be2",
            "ancestors": [],
            "type": "function",
            "description": "is a controller advice that handles exceptions related to file uploads, specifically the `MaxUploadSizeExceededException` and `IOException`. The class returns a response entity with an error message for the `MaxUploadSizeExceededException`, and a custom message for the `IOException`.",
            "name": "FileUploadExceptionAdvice",
            "location": {
              "start": 34,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 33
              }
            },
            "item_type": "class",
            "length": 58,
            "docLength": 7
          },
          {
            "id": "cf675a74-6602-209c-3e48-097cfe5af841",
            "ancestors": [
              "dc48a804-a80f-dbbe-ff4f-96aea1799be2"
            ],
            "type": "function",
            "description": "processes a request that exceeds the maximum file size limit by returning a custom error response with a descriptive message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException object passed to the function.\n\n* `MaxUploadSizeExceededException`: This is the class that `exc` instance belongs to.\n* `HttpStatus`: The HTTP status code associated with the exception, which is `PAYLOAD_TOO_LARGE`.\n* `body`: A map containing a single key-value pair, where the key is \"message\" and the value is a string representing the error message for the user.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` with a status code of `PAYLOAD_TOO_LARGE` and a body containing a message indicating that the file size exceeds the limit.\n\n* `HttpStatus`: The HTTP status code of the response entity, which is set to `PAYLOAD_TOO_LARGE`.\n* `body`: A map containing a single key-value pair, where the key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\t@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n}\n",
              "description": "\nIn this example, the method handleMaxSizeException is being used to handle an exception of type MaxUploadSizeExceededException. When an exception occurs in a method that is annotated with @ExceptionHandler, the method will be called and given the exception as an argument. In this case, the method returns a response entity with a status code of PAYLOAD_TOO_LARGE and a body containing a map with a single key-value pair, where the key is \"message\" and the value is a string containing the error message \"File size exceeds limit!\"."
            },
            "name": "handleMaxSizeException",
            "location": {
              "start": 57,
              "insert": 37,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 36,
                "end": 56
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 20
          },
          {
            "id": "d088e18e-009f-34bd-c34e-2823c60f7bbe",
            "ancestors": [
              "dc48a804-a80f-dbbe-ff4f-96aea1799be2"
            ],
            "type": "function",
            "description": "handles  an `IOException` exception by returning a response entity with a CONFLICT status code and a custom message in the body.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` exception that is being handled by the `@ExceptionHandler` annotation.\n\nThe `MaxUploadSizeExceededException` object provided to the function has several attributes, including:\n\n* `exc`: The original exception object that was caught and transformed into a response entity.\n* `HttpStatus`: The HTTP status code associated with the response entity. In this case, it is set to `CONFLICT`.\n* `body`: A map containing a single key-value pair: `message`, which holds the error message to be returned in the response body.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` object with a status code of `CONFLICT` and a body containing a map with a single key-value pair, where the key is \"message\" and the value is a custom message indicating that something went wrong with document saving.\n\n* The HTTP status code in the response entity is `HttpStatus.CONFLICT`, indicating that an error occurred during document saving.\n* The body of the response entity contains a map with a single key-value pair, where the key is \"message\" and the value is a string containing the error message (\"Something went wrong with document saving!\").",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n",
              "description": "\nIn this example, handleIOException is a method annotated with `@ExceptionHandler`. It handles IOExceptions and returns a `ResponseEntity` with the status code of `HttpStatus.CONFLICT` and a body containing a map with a single key-value pair, where the key is \"message\" and the value is a string containing the message \"Something went wrong with document saving!\".\nThe example code should be as short as possible and work correctly without any explanation."
            },
            "name": "handleIOException",
            "location": {
              "start": 85,
              "insert": 64,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 63,
                "end": 84
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationException` class that provides a customized response status for unauthorized requests with a predefined error message. The class uses Lombok's `@Slf4j` annotation to log errors and Spring's `@ResponseStatus` annotation to set the HTTP status code. The `super()` method is used to create a new instance of the `RuntimeException` class with the error message stored in a static final field.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "61e78042-4338-9b8e-9e4e-fdce6698afda",
            "ancestors": [],
            "type": "function",
            "description": "provides a customized response status for unauthorized requests with a predefined error message.\nFields:\n\t- ERROR_MESSAGE (String): in the AuthenticationException class represents a message indicating that the user's credentials are incorrect or they do not exist.\n\n",
            "fields": [
              {
                "name": "ERROR_MESSAGE",
                "type_name": "String",
                "value": "\"Credentials are incorrect or user does not exists\"",
                "constant": true,
                "class_name": "AuthenticationException",
                "description": "in the AuthenticationException class represents a message indicating that the user's credentials are incorrect or they do not exist."
              }
            ],
            "name": "AuthenticationException",
            "location": {
              "start": 14,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "A custom exception class named CredentialsIncorrectException that extends AuthenticationException and has a constructor to log an error message for incorrect credentials of a specific user ID. The class uses Lombok's @Slf4j annotation to enable logging through SLF4J.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "aa940fc3-5969-2fb4-204c-591b9f1ad313",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of AuthenticationException with a constructor logging an error message for incorrect credentials of a specified user ID using Lombok's @Slf4j annotation to log the error message.\n",
            "fields": [],
            "name": "CredentialsIncorrectException",
            "location": {
              "start": 9,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 8
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "An exception class called UserNotFoundException that extends AuthenticationException. The class provides additional logging information when a user cannot be found using their email address. The class uses Lombok's @Slf4j annotation to enable logging.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "dae6c269-35e3-cc9b-f949-0907d1bcc6fa",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and adds additional logging information when a user cannot be found using their email address.\n",
            "fields": [],
            "name": "UserNotFoundException",
            "location": {
              "start": 9,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 8
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityApiMapper` that provides mapping between various types of data related to amenities. The interface includes four methods: `amenityToAmenityDetailsResponse`, `amenitiesSetToAmenityDetailsResponseSet`, `amenityDtoToAmenity`, and `amenityDtoToAmenityDto`. These methods convert between different data structures, such as converting an `Amenity` object to a `GetAmenityDetailsResponse` object, or vice versa. The interface uses the `Mapper` framework to perform these mappings.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "44dbb428-78cb-8997-4f43-79abc5da8971",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mapping methods between various data types related to amenities, including converting from an Amenity object to a GetAmenityDetailsResponse object, and vice versa.",
            "name": "AmenityApiMapper",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "interface",
            "length": 13,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between various data structures related to communities in a MyHome platform using Mapstruct. The code provides mappings for creating community requests, retrieving community details, and setting community admins. It also includes mappings for converting community house names into sets, as well as retrieving house details for community houses.",
        "items": [
          {
            "id": "0980cc65-a147-1d94-b54f-35db64ff0718",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures related to communities in a MyHome platform, including creating and retrieving community details, administrators, houses, and house details.",
            "name": "CommunityApiMapper",
            "location": {
              "start": 37,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 36
              }
            },
            "item_type": "interface",
            "length": 24,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that provides two methods for transforming data between `CommunityHouse` objects and `GetHouseDetailsResponseCommunityHouse` sets. The first method, `communityHouseSetToRestApiResponseCommunityHouseSet`, takes a set of `CommunityHouse` objects and maps them to a set of `GetHouseDetailsResponseCommunityHouse` objects. The second method, `communityHouseToRestApiResponseCommunityHouse`, takes a single `CommunityHouse` object and maps it to a `GetHouseDetailsResponseCommunityHouse` object.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "313cd807-acb4-db82-4a4f-c03f837c38a3",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapper for transforming data between CommunityHouse objects and RestApiResponseCommunityHouse sets.",
            "name": "HouseApiMapper",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "A set of utility classes for working with payment requests in a fictional application. Specifically, it provides classes for building `PaymentRequestDto`, `UserDto`, and `HouseMemberDto` objects from `EnrichedSchedulePaymentRequest` inputs, as well as methods for transforming an `EnrichedSchedulePaymentRequest` into these different types of DTOs. The code also includes a `getEnrichedRequestAdmin` method for building a `UserDto` object representing the administrator associated with the enriched schedule payment request, and a `getEnrichedRequestMember` method for transforming an `EnrichedSchedulePaymentRequest` into a `HouseMemberDto` object.",
        "items": [
          {
            "id": "e0176e0d-dbe0-17a2-d741-e668062d5321",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of methods for transforming and enriching Schedule Payment Requests, as well as retrieving Administrator details based on an enriched schedule payment request.",
            "name": "SchedulePaymentApiMapper",
            "location": {
              "start": 47,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 40,
                "end": 46
              }
            },
            "item_type": "interface",
            "length": 311,
            "docLength": 6
          },
          {
            "id": "6e6ba110-25f3-cdb6-3b42-b802a1e8fe1f",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "converts a given admin ID into a `UserDto` object representing an administrator with the same ID.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "user ID of an administrator for which an `AdminDto` object is to be constructed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object with the specified `adminId`.\n\n* `userId`: A String that represents the admin ID used to build the `UserDto`.",
              "complex_type": true
            },
            "name": "adminIdToAdminDto",
            "location": {
              "start": 61,
              "insert": 50,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 49,
                "end": 60
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 11
          },
          {
            "id": "d53f2b8e-a2d9-e7a0-6541-fab16f735303",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "converts a given member ID string into a corresponding `HouseMemberDto` object, with the member ID field already populated.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of a member to be converted into a `HouseMemberDto` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the `memberId`.\n\n* `memberId`: This is a String attribute that contains the member ID passed in as input.\n* No other attributes or properties have been defined for this object.",
              "complex_type": true
            },
            "name": "memberIdToMemberDto",
            "location": {
              "start": 83,
              "insert": 68,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 67,
                "end": 82
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 15
          },
          {
            "id": "65c218fc-6a5f-0ca3-8b43-5a9619746dec",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "transforms a `UserDto` object into a string representing the user ID.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "user object containing information about the user for which the `adminToAdminId` function is being called.\n\n* `getUserId()`: returns the user ID of the `UserDto`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the user ID of the admin.",
              "complex_type": false
            },
            "name": "adminToAdminId",
            "location": {
              "start": 99,
              "insert": 89,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 88,
                "end": 98
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 10
          },
          {
            "id": "907f3b8a-4741-bfa2-404d-23b369cdd8cb",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "returns the `MemberId` field from the `HouseMemberDto` object passed as an argument.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "House Member object that contains the member ID to be converted into a string.\n\n* `getMemberId()`: Returns the member ID of the House Member object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the ` MemberId` of the input `HouseMemberDto`.",
              "complex_type": false
            },
            "name": "memberToMemberId",
            "location": {
              "start": 115,
              "insert": 104,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 103,
                "end": 114
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 11
          },
          {
            "id": "f797bdf6-5c9d-359f-a841-51cca524fe06",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "maps the user fields of a payment request to their administrative and house member counterparts using MapStruct and Lombok's `@Builder` annotation.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto object to be modified with user details.\n\n* `paymentDto`: The PaymentDto class is annotated with `@MappingTarget`, indicating that it is the target of a mapping operation.\n* `PaymentDtoBuilder`: The `PaymentDtoBuilder` instance is passed as an argument to the `setUserFields` function, which suggests that this class is used for building instances of the `PaymentDto` class.\n* `enrichedSchedulePaymentRequest`: This parameter represents the enriched schedule payment request, which contains additional information beyond what is provided in the original payment request.\n* `getEnrichedRequestMember()` and `getEnrichedRequestAdmin()`: These methods are used to extract specific fields or attributes from the enriched schedule payment request, specifically the member and admin details.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "enriched payment request with additional user details, which are then mapped to administrative and member fields in the resulting `PaymentDto`.\n\n* `getEnrichedRequestMember`: This method extracts the member details from the enriched payment request.\n* `getEnrichedRequestAdmin`: This method extracts the admin details from the enriched payment request.\n\nThe `paymentDto` object is updated with the member and admin details using the `member()` and `admin()` methods, respectively.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n",
              "description": "\nThe example code is a method called `setUserFields` that uses the `@AfterMapping` annotation to modify the target object, in this case the `paymentDto`, after the source object, which is an `EnrichedSchedulePaymentRequest`, has been mapped. This method first calls the `getEnrichedRequestAdmin()` and `getEnrichedRequestMember()` methods to convert the user details of the payment request into `UserDto` objects representing the admin and house member respectively. These converted objects are then passed to the builder of the target object, `PaymentDto`, using the `member()` and `admin()` methods, respectively, to set the member and admin fields of the `paymentDto`.\n\nIt is important to note that the `EnrichedSchedulePaymentRequest` object should be annotated with `@Builder` for this method to work. Additionally, the target object's builder class should also be annotated with `@Builder`, otherwise it will not be possible to use the `mappingTarget()` expression in the lambda expression."
            },
            "name": "setUserFields",
            "location": {
              "start": 159,
              "insert": 129,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 128,
                "end": 158
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 30
          },
          {
            "id": "3d28229a-ea6a-02bb-294d-df928e5718ed",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "enriches a `SchedulePaymentRequest` object by adding additional information such as community IDs, admin and member details, and house membership documents.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request to be enriched, providing its type, description, recurring status, charge amount, due date, and other relevant details.\n\n* `type`: The type of schedule payment request (e.g., \"one-time\" or \"recurring\").\n* `description`: A brief description of the payment request.\n* `isRecurring`: Indicates whether the payment request is recurring.\n* `charge`: The amount of the payment request.\n* `dueDate`: The due date of the payment request.\n* `adminId`: The ID of the admin who created or modified the payment request.\n* `adminName`: The name of the admin who created or modified the payment request.\n* `adminEmail`: The email address of the admin who created or modified the payment request.\n* `encryptedPassword`: The encrypted password of the admin who created or modified the payment request (only included if the admin has an encrypted password).\n* `communityIds`: A set of community IDs associated with the payment request.\n* `memberId`: The ID of the member for whom the payment request is being made.\n* `memberName`: The name of the member for whom the payment request is being made.\n* `memberCommunityHouseId`: The ID of the community house associated with the member (only included if the member has a community house).",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "user who is authorizing the payment request, providing their ID, name, email, and encrypted password to enrich the request.\n\n* `getCommunities()` returns a stream of community IDs associated with the admin.\n* `map()` transforms the stream into a set of community IDs.\n* `getAdminId()` and `getId()` return the ID of the admin.\n* `getName()` and `getEmail()` return the name and email address of the admin, respectively.\n* `getEncryptedPassword()` returns the encrypted password of the admin.\n* `communityIds` is a set of community IDs associated with the admin.\n* `getHouseMemberDocument()` returns a document filename associated with the member.\n* `getName()`, `getId()`, and `getCommunityHouse()` return information about the member.",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object that provides additional information about the payment request, including the member's ID, name, community house ID, and document filename.\n\n* `member.getMemberId()` - The member's ID.\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"` - The filename of the member's House Member document, or an empty string if none is present.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object containing additional community and member information.\n\n* `type`: The type of schedule payment request, which could be either \"one-time\" or \"recurring\".\n* `description`: A brief description of the schedule payment request.\n* `isRecurring`: A boolean indicating whether the schedule payment request is recurring or not.\n* `charge`: The charge amount for the schedule payment request.\n* `dueDate`: The due date of the schedule payment request.\n* `adminId`: The ID of the admin who created the schedule payment request.\n* `adminName`: The name of the admin who created the schedule payment request.\n* `adminEmail`: The email address of the admin who created the schedule payment request.\n* `encryptedPassword`: The encrypted password of the admin who created the schedule payment request.\n* `communityIds`: A set of community IDs associated with the schedule payment request.\n* `memberId`: The ID of the member whose schedule payment request is being enriched.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the member, or an empty string if no document exists.\n* `memberName`: The name of the member whose schedule payment request is being enriched.\n* `communityHouseId`: The ID of the community house associated with the member, or an empty string if no community house exists.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest request = enrichSchedulePaymentRequest(new SchedulePaymentRequest(), new User(\"admin-id\", \"admin-name\", \"admin-email\", \"encrypted-password\"), new HouseMember(\"member-id\", \"house-member-name\"));\n",
              "description": "\nThis would create a new instance of EnrichedSchedulePaymentRequest with the following data:\n* Type: The type of payment (e.g. MONTHLY)\n* Description: A description of the payment (e.g. \"Monthly rent\")\n* Recurring: Whether or not the payment is recurring (e.g. true)\n* Charge: The amount to charge for the payment (e.g. 1250)\n* DueDate: When the payment is due (e.g. LocalDateTime.now())\n* AdminId: The admin user's ID (e.g. \"admin-id\")\n* AdminEntityId: The admin user's entity ID (e.g. 1234)\n* AdminName: The admin user's name (e.g. \"Admin McAdminson\")\n* AdminEmail: The admin user's email address (e.g. \"admin@email.com\")\n* AdminEncryptedPassword: The admin user's encrypted password (e.g. \"$2a$10$.Y..ZpUoQEt/c6LB9mJnjf3e1uIrXqkJTf5O7MGW38H45h\")\n* CommunityIds: The community IDs that the admin user is a part of (e.g. [1, 2, 3])\n* MemberId: The member's ID (e.g. \"member-id\")\n* Id: The member's entity ID (e.g. 5678)\n* Name: The member's name (e.g. \"Member McMemberson\")\n* DocumentFilename: The filename of the document associated with the member, or an empty string if there is no such document (e.g. \"\")\n* HouseId: The ID of the house that the member lives in, or an empty string if the member does not live in a house (e.g. \"house-id\")"
            },
            "name": "enrichSchedulePaymentRequest",
            "location": {
              "start": 263,
              "insert": 185,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 184,
                "end": 262
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 78
          },
          {
            "id": "7ed6ad12-68d5-9abd-da47-cc72a5931f87",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "creates a `UserDto` object representing an admin associated with a schedule payment request, using the provided `EnrichedSchedulePaymentRequest`.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative user for whom the request is being enriched, providing their user ID, entity ID, name, email, and encrypted password.\n\n* `adminId`: The ID of the admin user associated with the schedule payment request.\n* `adminEntityId`: The entity ID of the admin user associated with the schedule payment request.\n* `adminName`: The name of the admin user associated with the schedule payment request.\n* `adminEmail`: The email address of the admin user associated with the schedule payment request.\n* `adminEncryptedPassword`: The encrypted password of the admin user associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object with enriched administrative details.\n\n* `userId`: The ID of the admin user associated with the enriched schedule payment request.\n* `id`: The entity ID of the admin in the system.\n* `name`: The name of the admin user.\n* `email`: The email address of the admin user.\n* `encryptedPassword`: The encrypted password of the admin user.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// EnrichedSchedulePaymentRequest containing the request details with additional data, such as the member entity ID and name\nEnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\n\n// Create a UserDto object using the getEnrichedRequestAdmin method\nUserDto adminDetails = this.getEnrichedRequestAdmin(enrichedSchedulePaymentRequest);\n",
              "description": "\nIn this example, we create an instance of EnrichedSchedulePaymentRequest and pass it as an argument to the getEnrichedRequestAdmin method. The method then returns a UserDto object containing the administrator's details, such as their ID, name, email address, and encrypted password. We assign this returned value to the adminDetails variable so that we can use the values in it for further processing."
            },
            "name": "getEnrichedRequestAdmin",
            "location": {
              "start": 318,
              "insert": 288,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 287,
                "end": 317
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 30
          },
          {
            "id": "59a952fc-01b8-689f-7f48-a09292f617ed",
            "ancestors": [
              "e0176e0d-dbe0-17a2-d741-e668062d5321"
            ],
            "type": "function",
            "description": "transforms an `EnrichedSchedulePaymentRequest` object into a `HouseMemberDto` object, including member ID, name, and entity ID.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "House Member entity details, which are used to populate the `HouseMemberDto` output object with the member's ID, name, and member ID.\n\n* `getMemberEntityId`: an integer representing the member entity ID.\n* `getMemberId`: a string representing the member ID.\n* `getHouseMemberName`: a string representing the house member name.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the member's ID, name, and membership ID.\n\n* `id`: A string representing the ID of the house member entity.\n* `memberId`: An integer representing the member ID of the house member.\n* `name`: A string representing the name of the house member.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest(\n    \"memberEntityId\", \n    1, \n    \"houseMemberName\", \n    \"adminEntityId\", \n    2, \n    \"adminName\", \n    \"adminEmail\", \n    \"adminEncryptedPassword\"\n);\nHouseMemberDto houseMemberDto = getEnrichedRequestMember(enrichedSchedulePaymentRequest);\n",
              "description": "\nThe resulting HouseMemberDto object would have the following fields:\n"
            },
            "name": "getEnrichedRequestMember",
            "location": {
              "start": 351,
              "insert": 328,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 327,
                "end": 350
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 23
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` that provides automatic conversions between Java domain models and RESTful API responses using Mapstruct's functionality. The interface includes four methods: `createUserRequestToUserDto`, `userSetToRestApiResponseUserSet`, `userDtoToCreateUserResponse`, and `userDtoToGetUserDetailsResponse`. These methods map various data structures, such as `CreateUserRequest` and `Set<User>`, to corresponding RESTful API responses, such as `UserDto` and `Set<GetUserDetailsResponseUser>`.",
        "items": [
          {
            "id": "2d41d07a-3eb7-8890-8c47-7a9b20378603",
            "ancestors": [],
            "type": "function",
            "description": "provides automatic conversions between Java domain models and RESTful API responses using Mapstruct's functionality.",
            "name": "UserApiMapper",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 12,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An `EnrichedSchedulePaymentRequest` class that extends the `SchedulePaymentRequest` class and adds additional fields to enrich the request with details related to an admin and a house member for successful mapping to user and house member fields in payment. The new fields include `adminEntityId`, `adminName`, `adminEmail`, `adminEncryptedPassword`, `adminCommunityIds`, `memberEntityId`, `houseMemberDocumentName`, `houseMemberName`, and `houseMemberHouseID`. These fields are used to provide additional information about the admin and house member associated with the payment request.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.request.EnrichedSchedulePaymentRequest Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.request.EnrichedSchedulePaymentRequest</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.request.</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">EnrichedSchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"164,-85 21,-85 21,-66 164,-66 164,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "f0b13c4c-ba8e-10b1-eb42-f8a63618881f",
            "ancestors": [],
            "type": "function",
            "description": "extends the SchedulePaymentRequest and provides additional fields to enrich the request with details relating to an admin and a house member for successful mapping to user and house member fields in payment.\nFields:\n\t- adminEntityId (Long): represents an identifier for an administrative entity associated with the payment request.\n\t- adminName (String): represents the name of an administrative user associated with the payment request.\n\t- adminEmail (String): represents an email address associated with an administrative entity in the system.\n\t- adminEncryptedPassword (String): represents an encrypted password for an administrative user associated with the payment request.\n\t- adminCommunityIds (Set<String>): represents an unordered set of strings that identify communities to which the admin and house member belong.\n\t- memberEntityId (Long): represents an identifier for a member entity associated with the payment request.\n\t- houseMemberDocumentName (String): represents the name of a document used to identify the member in the house.\n\t- houseMemberName (String): in the EnrichedSchedulePaymentRequest class represents the name of the member of a house to whom the payment request relates.\n\t- houseMemberHouseID (String): in the EnrichedSchedulePaymentRequest class represents a unique identifier of the member's house within the system.\n\n",
            "fields": [
              {
                "name": "adminEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an identifier for an administrative entity associated with the payment request."
              },
              {
                "name": "adminName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of an administrative user associated with the payment request."
              },
              {
                "name": "adminEmail",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an email address associated with an administrative entity in the system."
              },
              {
                "name": "adminEncryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an encrypted password for an administrative user associated with the payment request."
              },
              {
                "name": "adminCommunityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an unordered set of strings that identify communities to which the admin and house member belong."
              },
              {
                "name": "memberEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an identifier for a member entity associated with the payment request."
              },
              {
                "name": "houseMemberDocumentName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of a document used to identify the member in the house."
              },
              {
                "name": "houseMemberName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class represents the name of the member of a house to whom the payment request relates."
              },
              {
                "name": "houseMemberHouseID",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class represents a unique identifier of the member's house within the system."
              }
            ],
            "name": "EnrichedSchedulePaymentRequest",
            "location": {
              "start": 59,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 58
              }
            },
            "item_type": "class",
            "length": 34,
            "docLength": 26
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A class `ForgotPasswordRequest` that represents a request for a password reset link. The class has three fields: `email`, `token`, and `newPassword`. The `email` field is a required string parameter for entering the user's email address, while the `token` field is meant to hold a unique validation token generated by the system. Finally, the `newPassword` field is a String object representing the password entered by the user for resetting their account.",
        "items": [
          {
            "id": "e02a0a20-c7a0-9898-284f-2f506245bcec",
            "ancestors": [],
            "type": "function",
            "description": "represents a request for a password reset link with email and token fields, and newPassword field.\nFields:\n\t- email (String): in the ForgotPasswordRequest class is required to be a valid email address for the purpose of sending a password reset token to the user.\n\t- token (String): in the ForgotPasswordRequest class represents a unique validation token generated by the system for the user's forgotten password request.\n\t- newPassword (String): in the ForgotPasswordRequest class represents the password entered by the user for resetting their account.\n\n",
            "fields": [
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class is required to be a valid email address for the purpose of sending a password reset token to the user."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class represents a unique validation token generated by the system for the user's forgotten password request."
              },
              {
                "name": "newPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class represents the password entered by the user for resetting their account."
              }
            ],
            "name": "ForgotPasswordRequest",
            "location": {
              "start": 20,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 8,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A `CreateUserResponse` class with three fields: `userId`, `name`, and `email`. These fields are declared using the `@Getter` and `@Setter` annotations, indicating that they should be accessed and modified through getters and setters respectively. The class also uses the `@AllArgsConstructor` and `@NoArgsConstructor` annotations to specify how the fields should be initialized when the class is constructed. Additionally, the package `lombok` is used for generating getters and setters, as well as for providing other functionality.",
        "items": [
          {
            "id": "5a2033d0-776f-8b84-754e-d8af5af851f7",
            "ancestors": [],
            "type": "function",
            "description": "represents a response model for creating a user, with three fields: userId, name, and email.\nFields:\n\t- userId (String): represents an identifier for a user created in response to a create user request.\n\t- name (String): in the CreateUserResponse class represents a string value containing the user's name.\n\t- email (String): represents an email address associated with the user created in response to the create user request.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents an identifier for a user created in response to a create user request."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "in the CreateUserResponse class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents an email address associated with the user created in response to the create user request."
              }
            ],
            "name": "CreateUserResponse",
            "location": {
              "start": 40,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 39
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that encapsulates an instance of the `CommunityHouseDto` class, which likely represents a detailed summary of a specific house. The class uses Lombok, an automated programming tool, to implement no-args constructor and all-args constructor, as well as data and @Data annotation to mark the class as a data class.",
        "items": [
          {
            "id": "e46f0eeb-df30-9d91-0042-6e1bbb19bc00",
            "ancestors": [],
            "type": "function",
            "description": "encapsulates a CommunityHouseDto object for storing and retrieving house details.\nFields:\n\t- house (CommunityHouseDto): in the HouseDetailResponse class stores an instance of the CommunityHouseDto class, which encapsulates detailed information about a specific house.\n\n",
            "fields": [
              {
                "name": "house",
                "type_name": "CommunityHouseDto",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "in the HouseDetailResponse class stores an instance of the CommunityHouseDto class, which encapsulates detailed information about a specific house."
              }
            ],
            "name": "HouseDetailResponse",
            "location": {
              "start": 31,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 6,
            "docLength": 7
          }
        ]
      }
    }
  }
]