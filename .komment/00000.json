[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that provides information about the current page and total pages of a paginated dataset. The class has four fields: currentPage, pageLimit, totalPages, and totalElements. It also has four constructors that create a `PageInfo` object based on a `Pageable` object and a `Page` object. The class provides a high-level summary of the page number, page size, total pages, and total elements in the dataset.",
        "items": [
          {
            "id": "2413c0a3-58f4-58ae-f045-d86ea36e5cc5",
            "ancestors": [],
            "type": "function",
            "description": "from the file provides a structure for storing and manipulating pagination-related metrics. It contains four fields: currentPage, pageLimit, totalPages, and totalElements. The class offers a `of()` method for constructing a `PageInfo` object based on a `Pageable` and a `Page` parameter.",
            "name": "PageInfo",
            "location": {
              "start": 18,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 10,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 51,
            "docLength": 7
          },
          {
            "id": "ba0f0b03-2d0d-f796-f749-1b754954025f",
            "ancestors": [
              "2413c0a3-58f4-58ae-f045-d86ea36e5cc5"
            ],
            "type": "function",
            "description": "creates a `PageInfo` object containing information about the number of pages, page size, total pages, and total elements for a given `Pageable` and `Page`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pageable object that contains information about the current page of data to be processed, including the page number and size.\n\n* `getPageNumber()` - Returns the current page number being rendered.\n* `getPageSize()` - Returns the maximum number of elements that can be displayed per page.\n* `getTotalPages()` - Returns the total number of pages in the dataset.\n* `getTotalElements()` - Returns the total number of elements in the dataset.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing information on its position within the overall set of pages and the total number of pages and elements available.\n\n* The first property is `pageable.getPageNumber()`, which represents the page number of the paginated result.\n* The second property is `pageable.getPageSize()`, which signifies the number of elements per page in the paginated result.\n* The third property is `page.getTotalPages()`, which indicates the total number of pages in the result set.\n* Finally, the fourth property is `page.getTotalElements()` which represents the total number of elements in the result set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing information about the page number, size, total pages, and total elements of a given `Pageable` and `Page`.\n\n* The `PageNumber` field represents the current page being accessed. \n* The `PageSize` field denotes the number of elements displayed per page.\n* The `TotalPages` field indicates the total number of pages available in the collection.\n* The `TotalElements` field displays the sum of all elements in the collection.",
              "complex_type": true
            },
            "name": "of",
            "location": {
              "start": 60,
              "insert": 28,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 27,
                "end": 59
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 32
          }
        ]
      }
    }
  },
  {
    "name": "UserControllerIntegrationTest.java",
    "path": "integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java",
    "content": {
      "structured": {
        "description": "An integration test for a user registration feature in a Spring Boot application. It creates a request body with name, email, and password and posts it to the registration URL using the `TestRestTemplate`. The response status code is checked, and the created user's details are verified to match the input parameters. Additionally, the returned user ID is checked to refer to a user stored in the database.",
        "items": [
          {
            "id": "c97c6b30-aa10-6d9a-454c-2b58a87eb5f3",
            "ancestors": [],
            "type": "function",
            "description": "tests the successful creation of a new user through a REST API, verifying the response status code, created user details, and corresponding values in the database. The test creates a request body with name, email, and password and posts it to the registration URL, asserting that the response status code is HTTP 201 Created and the returned user ID refers to a user stored in the database with matching input values.",
            "name": "UserControllerIntegrationTest",
            "location": {
              "start": 31,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 58,
            "docLength": 8
          },
          {
            "id": "082a6a2d-180f-dea0-5940-c1d63bdd8b1b",
            "ancestors": [
              "c97c6b30-aa10-6d9a-454c-2b58a87eb5f3"
            ],
            "type": "function",
            "description": "tests the successful creation of a new user through a REST API. It checks the status code of the response, verifies that the created user's name and email match the input parameters, and confirms that the returned user ID refers to a user stored in the database.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n",
              "description": ""
            },
            "name": "shouldSignUpSuccessful",
            "location": {
              "start": 57,
              "insert": 52,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 51,
                "end": 56
              }
            },
            "item_type": "method",
            "length": 31,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that provides a password encoder using BCrypt. The `main` method launches the application, and the `@Bean` annotation defines a bean for the password encoder. The `getPasswordEncoder()` method returns an instance of the `BCryptPasswordEncoder` class, which is used to encrypt passwords securely.",
        "items": [
          {
            "id": "1b8b42e6-6062-5db7-684b-af5684ea5a36",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a password encoder using BCrypt. The main method starts the application and the `@Bean` annotation defines a bean for the password encoder.",
            "name": "MyHomeServiceApplication",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 41,
            "docLength": 5
          },
          {
            "id": "56a6052a-8f1c-e58c-9644-9da0a41f55a7",
            "ancestors": [
              "1b8b42e6-6062-5db7-684b-af5684ea5a36"
            ],
            "type": "function",
            "description": "runs the `MyHomeServiceApplication` by using the `SpringApplication.run()` method, passing the class and argument array as arguments.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "array of command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\nThe `SpringApplication.run()` method takes two arguments: `MyHomeServiceApplication.class` and `args`. The first argument is a class that implements the `SpringApplication` interface, which represents the application context. The second argument is an array of strings called `args`, which contains the command-line arguments passed to the application.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 49,
              "insert": 35,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 34,
                "end": 48
              }
            },
            "item_type": "method",
            "length": 3,
            "docLength": 14
          },
          {
            "id": "e6a7a004-0967-b481-2643-a0e678cd5ced",
            "ancestors": [
              "1b8b42e6-6062-5db7-684b-af5684ea5a36"
            ],
            "type": "function",
            "description": "returns a `BCryptPasswordEncoder` instance, which is used to hash and verify passwords in a secure manner.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a `BCryptPasswordEncoder` instance, which is used to encrypt passwords using the bcrypt algorithm.\n\n* The `BCryptPasswordEncoder` class is used to generate password hashes using bcrypt hashing algorithm.\n* This class provides methods for generating salt values and computing passwords hashes.\n* The `new BCryptPasswordEncoder()` statement creates an instance of this class, which can then be used to generate password hashes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// In another class\n@Bean\npublic PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n}\n",
              "description": ""
            },
            "name": "getPasswordEncoder",
            "location": {
              "start": 67,
              "insert": 53,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 52,
                "end": 66
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "A WebMvcConfigurer bean that adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials. The addCorsMappings method is used to add these mappings to the existing configuration, which can be accessed through the CorsRegistry object. Specifically, it allows any origin to access any resource using any HTTP method and includes certain exposed headers in responses. Additionally, it specifies that credentials (such as cookies or authentication tokens) are allowed for the CORS configuration.",
        "items": [
          {
            "id": "0090cd5d-5394-7196-3349-5214a1a8ee52",
            "ancestors": [],
            "type": "function",
            "description": "is a configuration class for handling Cross-Origin Resource Sharing (CORS) requests in a web application. It allows incoming requests from any origin and specifies allowed methods, headers, and credentials. The class provides a method to add CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "name": "CorsConfig",
            "location": {
              "start": 37,
              "insert": 31,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 30,
                "end": 36
              }
            },
            "item_type": "class",
            "length": 115,
            "docLength": 6
          },
          {
            "id": "9ba0d471-dc47-beac-264e-ed9635fc568a",
            "ancestors": [
              "0090cd5d-5394-7196-3349-5214a1a8ee52"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "void",
              "description": "a set of CORS mappings that allow requests from any origin and specify allowed methods, headers, and credentials.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of `CorsRegistry`, which represents the set of\n       * CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new mapping to the existing set of mappings\n       * in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the\n       * mapping applies to all URLs.\n       * \t- `allowedOrigins`: An array of allowed origins, which specifies the domains or\n       * subdomains that are allowed to make CORS requests to the server.\n       * \t- `allowedMethods`: An array of allowed HTTP methods, which specifies the methods\n       * that are allowed to be used in CORS requests to the server. The value `\"*\" means\n       * that all methods are allowed.\n       * \t- `allowedHeaders`: An array of allowed headers, which specifies the headers that\n       * can be included in CORS responses from the server. The value `\"*\" means that all\n       * headers are allowed.\n       * \t- `exposedHeaders`: An array of exposed headers, which specifies the headers that\n       * can be included in CORS responses from the server and are visible to clients. The\n       * values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n       * \t- `allowCredentials`: A boolean value that indicates whether CORS requests with\n       * credentials (such as cookies or authentication tokens) are allowed.\n       */\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: A `CorsRegistry` object that represents the configuration for\n       * handling Cross-Origin Resource Sharing (CORS) requests.\n       * \t- `addMapping`: Adds a mapping to the CORS configuration, allowing certain resources\n       * to be accessed from specified origins using specific methods and headers.\n       * \t- `allowedOrigins`: An array of allowed origins, which are IP addresses or\n       * subdomains that can access the resources.\n       * \t- `allowedMethods`: An array of allowed HTTP methods (GET, POST, PUT, DELETE,\n       * etc.) that can be used to access the resources.\n       * \t- `allowedHeaders`: An array of allowed headers that can be used with the accessed\n       * resources.\n       * \t- `exposedHeaders`: An array of exposed headers, which are headers that can be\n       * accessed by clients in responses.\n       * \t- `allowCredentials`: A boolean value indicating whether credentials (such as\n       * cookies or Authorization headers) should be allowed for the CORS configuration.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(\"*\")\n            .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n",
              "description": "\nThis method would enable any origin to make requests to the server using GET, POST, PUT, and DELETE methods. It would also allow all headers to be included in CORS responses from the server and are visible to clients. Additionally, this method allows credentials (such as cookies or authentication tokens) to be allowed for the CORS configuration."
            },
            "name": "corsConfigurer",
            "location": {
              "start": 91,
              "insert": 65,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 64,
                "end": 90
              }
            },
            "item_type": "method",
            "length": 60,
            "docLength": 26
          },
          {
            "id": "8443f2a0-e5ab-1d8f-ac41-97c50ba8e5c3",
            "ancestors": [
              "0090cd5d-5394-7196-3349-5214a1a8ee52",
              "9ba0d471-dc47-beac-264e-ed9635fc568a"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying which methods, headers, and credentials are allowed for all resources.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that the method adds mappings to.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which contains metadata about CORS (Cross-Origin Resource Sharing) settings for a particular resource.\n* `addMapping`: This method adds a mapping to the registry, specifying the URL pattern that the mapping applies to. In this case, the mapping is applied to all URLs (`\"/**\"`).\n* `allowedOrigins`: An array of strings representing the origins (domain names or IP addresses) from which the requested resource can be accessed.\n* `allowedMethods`: An array of strings representing the HTTP methods (such as GET, POST, PUT, DELETE, etc.) that are allowed to access the resource. In this case, all methods are allowed.\n* `allowedHeaders`: An array of strings representing the headers that are allowed to be exposed in responses from the resource. In this case, two headers (`token` and `userId`) are allowed.\n* `allowCredentials`: A boolean value indicating whether the resource supports CORS credentials (such as cookies, tokens, or HTTP authorization). In this case, the value is `true`.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n",
              "description": "\nIn this example, the method `addCorsMappings` is overridden from the abstract class WebMvcConfigurerAdapter. The method takes in a single parameter of type CorsRegistry, which represents the configuration for handling Cross-Origin Resource Sharing (CORS) requests.\n\nThe mapping `\"/**\"` indicates that the mapping applies to all URLs. The `.allowedOrigins(allowedOrigins)` method specifies an array of allowed origins, which are IP addresses or subdomains that can access the resources. The `.allowedMethods(\"*\")` method specifies an array of allowed HTTP methods (GET, POST, PUT, DELETE, etc.) that can be used to access the resources. The `.allowedHeaders(\"*\")` method specifies an array of allowed headers that can be used with the accessed resources.\n\nThe `.exposedHeaders(\"token\", \"userId\")`, which are headers that can be included in CORS responses from the server and are visible to clients. The `.allowCredentials(true)` method indicates whether credentials (such as cookies or Authorization headers) should be allowed for the CORS configuration."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 140,
              "insert": 119,
              "offset": " ",
              "indent": 6,
              "comment": {
                "start": 118,
                "end": 139
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "An email message source for rendering emails using Spring's template engine and configures a Thymeleaf-specific instance of the SpringTemplateEngine with customized settings for template resolution, including a template resolver and an email message source. The template resolver sets the prefix, suffix, mode, encoding, and caching properties for Thymeleaf template resolution, while the email message source provides messages related to emails used by the Spring Template Engine.",
        "items": [
          {
            "id": "2fd12a27-4c90-e8a2-a343-24cd4edf3e8a",
            "ancestors": [],
            "type": "function",
            "description": ":\nThe EmailTemplateConfig class is a custom configuration class for Spring's email template engine. It provides several properties and methods for configuring the email message source, including the basename, default locale, default encoding, and cache seconds. Additionally, it provides a method to create a Spring Template Engine instance with Thymeleaf-specific settings and an email message source.\n\nThe thymeleafTemplateEngine Method:\nThe thymeleafTemplateEngine method creates a Spring Template Engine instance configured to use Thymeleaf as the template engine and email message source. It sets the template resolver, template engine message source, and other configuration properties using the `thymeleafTemplateProperties` instance.",
            "name": "EmailTemplateConfig",
            "location": {
              "start": 28,
              "insert": 21,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 20,
                "end": 27
              }
            },
            "item_type": "class",
            "length": 164,
            "docLength": 7
          },
          {
            "id": "072e3078-7b4e-10b4-d94f-2f3d2aac71b5",
            "ancestors": [
              "2fd12a27-4c90-e8a2-a343-24cd4edf3e8a"
            ],
            "type": "function",
            "description": "creates a `ResourceBundleMessageSource` instance that retrieves email messages from a specified location based on the application's locale and encoding.",
            "params": [],
            "returns": {
              "type_name": "ResourceBundleMessageSource",
              "description": "a `ResourceBundleMessageSource` object configured to handle email-related messages.\n\n* `basename`: The path to the resource bundle file.\n* `defaultLocale`: The default locale for the message source.\n* `defaultEncoding`: The default encoding for the message source.\n* `cacheSeconds`: The number of seconds the message source will cache messages.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n",
              "description": "\n This example shows how to create a Spring Template Engine instance using Thymeleaf-specific settings, such as the template resolver and the message source for email messages. The `emailMessageSource` parameter is an instance of the `ResourceBundleMessageSource` class that provides messages related to emails. The `thymeleafTemplateResolver()` method creates a new instance of the `ThymeleafTemplateResolver` class, which resolves Thymeleaf templates at runtime. The `SpringTemplateEngine` class is used to provide common functionality for handling templates and template resolution.\n\nIt's important to note that this example does not include an actual email message source implementation, as it has already been provided by the user in the example code."
            },
            "name": "emailMessageSource",
            "location": {
              "start": 68,
              "insert": 51,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 50,
                "end": 67
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 17
          },
          {
            "id": "29288fe5-8e40-69bc-3048-4a4fb7143f07",
            "ancestors": [
              "2fd12a27-4c90-e8a2-a343-24cd4edf3e8a"
            ],
            "type": "function",
            "description": "creates a Spring Template Engine instance and sets its template resolver and message source to enable Thymeleaf template engine functionality.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for email-related messages, which is used by the `SpringTemplateEngine` to retrieve templates for email rendering.\n\n* `ResourceBundleMessageSource`: This is an interface that provides message source functionality for Thymeleaf. It allows for the retrieval of messages from a resource bundle.\n* `emailMessageSource`: This is an implementation of the `ResourceBundleMessageSource` interface, providing email-specific message sources.\n\nTherefore, the input `emailMessageSource` has properties such as the location of the resource bundle and any additional parameters required for message source functionality.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance configured with Thymeleaf templates and an email message source.\n\n* `SpringTemplateEngine`: The template engine is an instance of the Spring Template Engine class, which provides the functionality for rendering Thymeleaf templates.\n* `templateResolver`: The `templateResolver` attribute is a reference to a `ThymeleafTemplateResolver` object, which manages the resolution of Thymeleaf templates based on their names and locations.\n* `emailMessageSource`: The `emailMessageSource` attribute is a reference to an implementation of the `MessageSource` interface, which provides the message sources for email-related messages.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n",
              "description": "\nThis example shows how to use method `thymeleafTemplateEngine` with a `ResourceBundleMessageSource` instance as its argument. The method instantiates a new Spring Template Engine, sets the prefix for resolving Thymeleaf templates by calling `setPrefix()` on the template engine's template resolver, and then sets the suffix of the template file by calling `setSuffix()`. It also sets the mode in which the template should be processed using `setTemplateMode()`, the character encoding of the template using `setCharacterEncoding()`, and whether the template should be cached or not using `setCacheable()`. Finally, it returns the instantiated Spring Template Engine."
            },
            "name": "thymeleafTemplateEngine",
            "location": {
              "start": 122,
              "insert": 95,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 94,
                "end": 121
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 27
          },
          {
            "id": "c99811ee-2481-4283-6045-08f15c302179",
            "ancestors": [
              "2fd12a27-4c90-e8a2-a343-24cd4edf3e8a"
            ],
            "type": "function",
            "description": "creates a `ITemplateResolver` instance that resolves Thymeleaf templates based on the properties provided. It sets the prefix, suffix, template mode, character encoding, and caching behavior of the resolver.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` instance with configured template properties.\n\n* `ClassLoaderTemplateResolver`: This is the class that implements the `ITemplateResolver` interface and provides the functionality for resolving Thymeleaf templates.\n* `setPrefix()`: This method sets the prefix of the template path. If the template path ends with the file separator, the prefix will be the same as the template path. Otherwise, it will be the template path concatenated with the file separator.\n* `setSuffix()`: This method sets the suffix of the template path. It specifies the format of the template.\n* `setTemplateMode()`: This method sets the mode of the template. It can be one of the following values: `HTML`, `XML`, or `TEXT`.\n* `setCharacterEncoding()`: This method sets the character encoding of the template. It determines how the template will be interpreted and rendered.\n* `setCacheable()`: This method specifies whether the template is cacheable or not. If it is set to `true`, the template will be cached, otherwise it will not be cached.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = \"templates\";\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(\".html\");\n    templateResolver.setTemplateMode(ITemplateMode.HTML);\n    templateResolver.setCharacterEncoding(\"UTF-8\");\n    templateResolver.setCacheable(true);\n    return templateResolver;\n}\n",
              "description": "\nThis example would create a `ClassLoaderTemplateResolver` instance with the following properties:\n* Path prefix for the template file (with optional trailing separator character).  *`templatePath`*.endsWith()`*`fileSeparator`* Returns true if this string ends with the specified suffix, otherwise false. The case-sensitivity of the test depends on the boolean argument passed to this method.\n* Suffix for the template file (`.html` in this case). This value is appended to the *`templatePath`* value and used to locate the template file.\n* Template mode (HTML in this case). The value can be any of the predefined `ITemplateMode` enum values, such as: `ITemplateMode.HTML`, `ITemplateMode.XML`, `ITemplateMode.TEXT`, `ITemplateMode.JAVASCRIPT`, or `ITemplateMode.CSS`.\n* Template character encoding (UTF-8 in this case). This value is used to interpret the content of the template file and its resulting output.\n* Whether the templates should be cached (true in this case). If set to true, the template will be cached; otherwise, it will not be cached.\nThis example would create a `ClassLoaderTemplateResolver` instance with the following properties:\n\n* Prefix for the template file (with optional trailing separator character). The *`templatePath`* value is appended with the *`fileSeparator`* value if necessary.\n* Suffix for the template file (.html in this case). This value is appended to the *`templatePath`* value and used to locate the template file.\n* Template mode (HTML in this case). The value can be any of the predefined `ITemplateMode` enum values, such as: `ITemplateMode.HTML`, `ITemplateMode.XML`, `ITemplateMode.TEXT`, `ITemplateMode.JAVASCRIPT`, or `ITemplateMode.CSS`.\n* Template character encoding (UTF-8 in this case). This value is used to interpret the content of the template file and its resulting output.\n* Whether the templates should be cached (true in this case). If set to true, the template will be cached; otherwise, it will not be cached.\nThe example code should as short as possible as possible. The example code should work correctly without any issues or errors. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code."
            },
            "name": "thymeleafTemplateResolver",
            "location": {
              "start": 177,
              "insert": 156,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 155,
                "end": 176
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `FileUploadConfig` that sets maximum file size and request size limits for multipart requests in a Spring Boot application. The class creates a `MultipartConfig` instance with customized maximum file and request sizes using the `MultipartConfigFactory` bean, which is annotated with `@Bean`. The `multipartConfigElement()` method returns a `MultipartConfig` object that can be used to configure multipart form data processing in the application.",
        "items": [
          {
            "id": "d893d506-8f39-2ca2-3544-312e871309d1",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot configuration class that sets maximum file and request size limits for multipart requests. The class creates a `MultipartConfig` instance with customized maximum file and request sizes, allowing efficient handling of multipart requests in a Spring Boot application.",
            "name": "FileUploadConfig",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 27,
            "docLength": 5
          },
          {
            "id": "0916eb12-e9ce-09b7-ea4e-e8cea225e545",
            "ancestors": [
              "d893d506-8f39-2ca2-3544-312e871309d1"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` object with customized settings for maximum file and request sizes, returning the created instance.",
            "params": [],
            "returns": {
              "type_name": "MultipartConfig",
              "description": "a `MultipartConfig` object that configures the maximum file size and request size for multipart requests.\n\n* `MultipartConfigFactory`: This is the class that creates and manages multipart requests in Spring WebFlux.\n* `setMaxFileSize()`: This sets the maximum file size allowed in a multipart request, measured in kilobytes (KB).\n* `setMaxRequestSize()`: This sets the maximum request size allowed in a multipart request, also measured in KB.\n* `createMultipartConfig()`: This method creates a new instance of `MultipartConfig` with the specified maximum file and request sizes.\n\nOverall, this function is used to configure the maximum size of multipart requests in Spring WebFlux.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n}\n",
              "description": ""
            },
            "name": "multipartConfigElement",
            "location": {
              "start": 50,
              "insert": 37,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 36,
                "end": 49
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 13
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "An email localization properties class named EmailTemplateLocalizationProperties. It contains fields for path, encoding, and cache seconds, which are used to store configuration values for email templates. The class is marked with various annotations such as @Data, @Component, @ConfigurationProperties, and @Prefix, indicating its role in the application.",
        "items": [
          {
            "id": "63fe1367-3058-688f-0344-8988da21afcc",
            "ancestors": [],
            "type": "function",
            "description": "represents a configuration class for email localization properties, including path, encoding, and cache seconds.\nFields:\n\t- path (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file.\n\t- encoding (String): represents a string value specifying the character encoding used for email templates.\n\t- cacheSeconds (int): in the EmailTemplateLocalizationProperties class represents the number of seconds an email template's location data is cached before it is refreshed.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "represents a string value specifying the character encoding used for email templates."
              },
              {
                "name": "cacheSeconds",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateLocalizationProperties",
                "description": "in the EmailTemplateLocalizationProperties class represents the number of seconds an email template's location data is cached before it is refreshed."
              }
            ],
            "name": "EmailTemplateLocalizationProperties",
            "location": {
              "start": 19,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An EmailTemplateProperties class that stores email template settings such as file path, format, encoding, mode, and cache status using Spring Boot's ConfigurationProperties annotation. The class has five fields: path, format, encoding, mode, and cache, which are used to store the email template settings.",
        "items": [
          {
            "id": "11e699d0-b431-ce9d-784e-8666832a4af2",
            "ancestors": [],
            "type": "function",
            "description": "stores email template settings such as file path, format, encoding, mode, and cache status in a Spring Boot configuration property class.\nFields:\n\t- path (String): in the EmailTemplateProperties class represents the file path for storing email templates.\n\t- format (String): in the EmailTemplateProperties class is of type String and represents a string value specifying the format of an email template.\n\t- encoding (String): in the EmailTemplateProperties class represents a string variable specifying the character encoding to be used for email template rendering.\n\t- mode (String): in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\".\n\t- cache (boolean): in the EmailTemplateProperties class represents whether email templates should be cached or not.\n\n",
            "fields": [
              {
                "name": "path",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents the file path for storing email templates."
              },
              {
                "name": "format",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class is of type String and represents a string value specifying the format of an email template."
              },
              {
                "name": "encoding",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents a string variable specifying the character encoding to be used for email template rendering."
              },
              {
                "name": "mode",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents the template rendering mode, which can be either \"HTML\" or \"TEXT\"."
              },
              {
                "name": "cache",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "EmailTemplateProperties",
                "description": "in the EmailTemplateProperties class represents whether email templates should be cached or not."
              }
            ],
            "name": "EmailTemplateProperties",
            "location": {
              "start": 23,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 7,
                "end": 22
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "A class named MailProperties that contains properties related to sending emails using Spring Boot. These properties include host, username, password, port, protocol, debug, and dev mode. The class uses Lombok and ConfigurationProperties to define these properties.",
        "items": [
          {
            "id": "0f0bbe55-83c3-0da6-f348-f8d964b3dc79",
            "ancestors": [],
            "type": "function",
            "description": "defines properties related to sending emails using Spring Boot, including host, username, password, port, protocol, debug, and dev mode.\nFields:\n\t- host (String): in the MailProperties class represents the mail server's hostname.\n\t- username (String): in MailProperties represents a string value used to authenticate mail server connections.\n\t- password (String): in MailProperties represents a string value used for authenticating mail server connections.\n\t- port (int): in MailProperties represents an integer value indicating the mail server's port number for communication.\n\t- protocol (String): in the MailProperties class represents the mail protocol used for sending and receiving emails.\n\t- debug (boolean): in MailProperties represents a boolean flag indicating whether the mail server's debugging capabilities are enabled.\n\t- devMode (boolean): in the MailProperties class indicates whether the mail server settings are for development use or not.\n\n",
            "fields": [
              {
                "name": "host",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents the mail server's hostname."
              },
              {
                "name": "username",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a string value used to authenticate mail server connections."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a string value used for authenticating mail server connections."
              },
              {
                "name": "port",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents an integer value indicating the mail server's port number for communication."
              },
              {
                "name": "protocol",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class represents the mail protocol used for sending and receiving emails."
              },
              {
                "name": "debug",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in MailProperties represents a boolean flag indicating whether the mail server's debugging capabilities are enabled."
              },
              {
                "name": "devMode",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "MailProperties",
                "description": "in the MailProperties class indicates whether the mail server settings are for development use or not."
              }
            ],
            "name": "MailProperties",
            "location": {
              "start": 25,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 24
              }
            },
            "item_type": "class",
            "length": 11,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enumeration class `MailTemplatesNames` with four constants representing different email templates names. Each constant has a corresponding filename associated with it.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "a RESTful API for managing amenities in a community. The API provides endpoints for adding, updating, and deleting amenities, as well as retrieving a list of all amenities in a community. The code uses Spring WebFlux and Spring Data JPA packages to handle HTTP requests and database operations, respectively. The following functions are defined:\n\n* `addAmenityToCommunity()`: Adds an amenity to a community using the provided ID and request body data. It returns a response entity with a status code indicating whether the operation was successful.\n* `deleteAmenity()`: Deletes an amenity from the database based on its ID, returning a response entity with a status code indicating the outcome of the operation.\n* `updateAmenity()`: Updates an amenity using the provided request body data and returns a response entity with a status code indicating whether the update was successful.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "a1d61402-f929-bbb8-f844-440f063506b0",
            "ancestors": [],
            "type": "function",
            "description": "in the provided codebase handles API endpoints related to amenities in a community. The controller provides methods for adding, deleting, and updating amenities, as well as returning response entities with HTTP status codes indicating the outcome of the operations. The methods use the `amenitySDJpaService` class to interact with the database.",
            "name": "AmenityController",
            "location": {
              "start": 44,
              "insert": 38,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 37,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 170,
            "docLength": 6
          },
          {
            "id": "bea2ec00-59d2-6687-5346-4b449a6ddd5e",
            "ancestors": [
              "a1d61402-f929-bbb8-f844-440f063506b0"
            ],
            "type": "function",
            "description": "retrieves details for an amenity with the given ID from the database using `amenitySDJpaService`, maps the result to a `AmenityDetailsResponse` object, and returns a `ResponseEntity` with a status of `OK` or an alternative response if the amenity is not found.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of an amenity for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an `ok` status and the requested amenity details.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is a generic response entity that represents a response to a request for amenity details. It has an `ok` field that indicates whether the response was successful or not. If the response was successful, the `ok` field will be set to `true`, otherwise it will be set to `false`.\n* `GetAmenityDetailsResponse`: This is a class that represents the response to a request for amenity details. It has fields for the amenity ID, name, and description, as well as an `amenities` field that contains a list of amenities associated with the specified amenity ID.\n* `amenitySDJpaService`: This is a JPA service that provides methods for interacting with the amenity data storage. It is used to retrieve the amenity details in the function.\n* `amenityApiMapper`: This is a mapper class that maps the response from the amenity data storage to the `GetAmenityDetailsResponse` class. It is used to convert the raw data returned by the amenity data storage into the desired response format.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": "\nHere, the method takes in a string value for amenityId and maps it to an AmenityDto object using the AmenityApiMapper class provided. If the AmenityDto object is not null, the responseEntity is built with the ok() method. Otherwise, a ResponseEntity with status NOT_FOUND is returned.\n\nHere is a unit test for this method:\n"
            },
            "name": "getAmenityDetails",
            "location": {
              "start": 73,
              "insert": 52,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 51,
                "end": 72
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 21
          },
          {
            "id": "96d3e6da-1472-689c-9f4e-c824381938bb",
            "ancestors": [
              "a1d61402-f929-bbb8-f844-440f063506b0"
            ],
            "type": "function",
            "description": "retrieves a set of amenities from the database using `JPA`, and then maps them to a set of `GetAmenityDetailsResponse` objects using `ApiMapper`. Finally, it returns an `ResponseEntity` with the mapped response.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community for which the list of amenities is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a set of `GetAmenityDetailsResponse` objects containing the details of all amenities for a given community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that can contain a body and a status code.\n* `ok`: This is a tag indicating that the response is successful (i.e., the status code is 200).\n* `Set<GetAmenityDetailsResponse>`: This is a set of `GetAmenityDetailsResponse` objects, which represent the list of amenities for the given community ID.\n* `amenitySDJpaService`: This is a Java class that provides methods for listing all amenities, likely implementing some sort of database access layer.\n* `amenityApiMapper`: This is a Java class that maps the list of amenities to a set of `GetAmenityDetailsResponse` objects, likely implementing some sort of data transformation or mapping layer.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenityApiController amenityApiController;\n\npublic void testListAllAmenities() {\n    String communityId = \"community-id\"; // This is just an example value, you should replace it with a real ID.\n    Set<GetAmenityDetailsResponse> result =\n            amenityApiController.listAllAmenities(communityId);\n\n    assertThat(result).isNotNull();\n}\n",
              "description": ""
            },
            "name": "listAllAmenities",
            "location": {
              "start": 102,
              "insert": 82,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 81,
                "end": 101
              }
            },
            "item_type": "method",
            "length": 8,
            "docLength": 20
          },
          {
            "id": "904328c4-1dc8-1abf-9a45-f8710dde4dff",
            "ancestors": [
              "a1d61402-f929-bbb8-f844-440f063506b0"
            ],
            "type": "function",
            "description": "adds amenities to a community by creating them through the `amenitySDJpaService` and returning a `ResponseEntity` object indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the amenities will be added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to the community.\n\n* `communityId`: A String representing the ID of the community to which the amenities will be added.\n* `request`: An instance of the `AddAmenityRequest` class, containing a list of `Amenity` objects that will be added to the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddAmenityResponse",
              "description": "a `ResponseEntity` object with an `ok` status and a list of created amenities.\n\n* `ResponseEntity`: This is the generic type of the output, which is an instance of `ResponseEntity`.\n* `ok`: This is a method that returns a `ResponseEntity` instance with a status code of 200 (OK).\n* `notFound`: This is another method that returns a `ResponseEntity` instance with a status code of 404 (Not Found) if the communityId provided in the request does not exist.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\nvoid testAddAmenityToCommunity() {\n  // given\n  String communityId = \"123\";\n  List<String> amenities = Arrays.asList(\"amenity_1\", \"amenity_2\");\n  AddAmenityRequest request = new AddAmenityRequest().amenities(amenities);\n  AmenitySDJpaService amenitySDJpaService = mock(AmenitySDJpaService.class);\n  AmenityApiMapper amenityApiMapper = mock(AmenityApiMapper.class);\n  \n  // when\n  ResponseEntity<AddAmenityResponse> responseEntity =\n      new AmenityServiceImpl(amenitySDJpaService, amenityApiMapper)\n          .addAmenityToCommunity(communityId, request);\n  \n  // then\n  assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n  verify(amenitySDJpaService).createAmenities(amenities, communityId);\n  verify(amenityApiMapper).createAddAmenityResponseFromAmenityList(any());\n}\n",
              "description": "\nThis test demonstrates that the method adds the provided amenities to the database and returns a response entity with an HTTP status code of OK (200) if it succeeds in adding them. It also verifies that the `createAmenities` method was called on the `AmenitySDJpaService` instance, passing in the amenities list and community ID. Additionally, it verifies that the `createAddAmenityResponseFromAmenityList` method of the `AmenityApiMapper` was called with a non-null argument.\n\nThis test is helpful because it ensures that the method is able to handle an input request correctly and returns the expected response entity object."
            },
            "name": "addAmenityToCommunity",
            "location": {
              "start": 143,
              "insert": 111,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 110,
                "end": 142
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 32
          },
          {
            "id": "556d218b-fe58-a5b5-b045-b62ed98fb200",
            "ancestors": [
              "a1d61402-f929-bbb8-f844-440f063506b0"
            ],
            "type": "function",
            "description": "deletes an amenity from the database based on its ID, returning a HTTP status code indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "identifier of an amenity to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted and no content was returned.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found or was not present in the database, which means it was not deleted.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenityApi amenityApi;\n\n//...\n\npublic void deleteAmenity(String amenityId) {\n  ResponseEntity<Void> response = amenityApi.deleteAmenity(amenityId);\n}\n",
              "description": "\nThis method would call the `deleteAmenity` method on an instance of `AmenityApi` with a parameter of `amenityId`, which is a string, and expect a response entity with a status code indicating whether the amenity was successfully deleted or not. The method will return a `ResponseEntity<Void>` object that contains the HTTP status code, which indicates whether the delete operation was successful (204 - NO_CONTENT) or if the amenity could not be found (404 - NOT_FOUND)."
            },
            "name": "deleteAmenity",
            "location": {
              "start": 167,
              "insert": 153,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 152,
                "end": 166
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 14
          },
          {
            "id": "15d22dae-f7ef-6dac-714a-ac264293994c",
            "ancestors": [
              "a1d61402-f929-bbb8-f844-440f063506b0"
            ],
            "type": "function",
            "description": "updates an amenity's details using the `amenitySDJpaService`. It returns a response entity indicating whether the update was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity being updated.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "UpdateAmenityRequest object containing the updated amenity details, which is converted to an AmenityDto object through the amenityApiMapper before being passed to the amenitySDJpaService for updating the amenity in the database.\n\n* `@Valid`: Indicates that the input request body must be validated according to the specified validation rules.\n* `@RequestBody`: Marks the `request` parameter as a request body, indicating that it should be deserialized from the request body.\n* `UpdateAmenityRequest`: The class of the request body, which contains fields for updating an amenity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a response entity with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully updated or not.\n\n* `ResponseEntity`: This is an entity object that represents the HTTP response status and body. In this case, it has a status code of `HttpStatus.NO_CONTENT`, indicating that the amenity was successfully updated.\n* `build()`: This is a method that creates a new `ResponseEntity` object with the specified status code and body.\n* `isUpdated`: This is a boolean flag that indicates whether the amenity was successfully updated or not. If it's `true`, the amenity was updated, otherwise it was not found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Call the updateAmenity endpoint with the ID of the amenity to be updated, and its new name and description as a request body.\n@RestController\npublic class MyController {\n    @Autowired\n    private AmenitiesServiceImpl amenitiesService;\n    \n    @PutMapping(\"/amenities/{amenityId}\")\n    public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId, @RequestBody UpdateAmenityRequest request) {\n        return amenitiesService.updateAmenity(amenityId, request);\n    }\n}\n",
              "description": "\nThe example code above uses the Spring `@Autowired` annotation to inject a dependency on an instance of AmenitiesServiceImpl, and then uses this instance to call the updateAmenity method with the ID of the amenity to be updated and its new name and description as a request body. The updateAmenity method will return a response entity indicating whether or not the update was successful."
            },
            "name": "updateAmenity",
            "location": {
              "start": 201,
              "insert": 177,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 176,
                "end": 200
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 24
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An AuthenticationController class that implements the AuthenticationApi interface. The controller handles login requests by authenticating users using the AuthenticationService and returning an HTTP entity with user ID and JWT token in the headers based on the authentication data generated by the AuthenticationService. The class uses Lombok to reduce boilerplate code and Spring Web Flux to handle HTTP requests and responses.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "ed593d31-f43c-6988-1745-f0882a186c13",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling login requests and returning an OK response with custom headers based on the authentication data. The class uses the `AuthenticationService` to authenticate the user and create HTTP headers with the user's ID and JWT token. The `createLoginHeaders()` method generates the custom headers by adding user-defined headers to an instance of the `HttpHeaders` class.",
            "name": "AuthenticationController",
            "location": {
              "start": 18,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 12,
                "end": 17
              }
            },
            "item_type": "class",
            "length": 70,
            "docLength": 5
          },
          {
            "id": "49ccd416-36b9-cda7-ce47-8531dea457f4",
            "ancestors": [
              "ed593d31-f43c-6988-1745-f0882a186c13"
            ],
            "type": "function",
            "description": "authenticates a user by calling the `loginService`. It creates headers based on the authentication data and returns an `OK` response.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request sent by the client, which includes the user credentials and other necessary details for the authentication process.\n\n* `@Valid LoginRequest loginRequest`: This indicates that the object passed as an argument to the function is serialized from a JSON request body and has been validated by the `@Validation` annotation.\n* `authenticationService.login(loginRequest)`: This line of code calls the `login` method of the `authenticationService` class, which performs authentication using an unknown implementation. The returned `AuthenticationData` object is then returned as part of the response entity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an `OK` status and custom headers containing authentication data.\n\n* `ResponseEntity`: This is the class that represents the response entity, which contains information about the login request and its outcome.\n* `ok()`: This method returns a ResponseEntity with a status code of 200, indicating that the login was successful.\n* `headers()`: This method allows for the creation of custom HTTP headers based on the authentication data returned by the `authenticationService`. These headers can be used to provide additional information about the login request and its outcome.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n",
              "description": ""
            },
            "name": "login",
            "location": {
              "start": 50,
              "insert": 24,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 23,
                "end": 49
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 26
          },
          {
            "id": "d952980f-55a5-cfa2-3449-35be45d42b69",
            "ancestors": [
              "ed593d31-f43c-6988-1745-f0882a186c13"
            ],
            "type": "function",
            "description": "creates HTTP headers with user ID and JWT token obtained from `AuthenticationData`.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "user information and JWT token required for authentication.\n\n* `userId`: an integer value representing the user ID associated with the authentication data.\n* `token`: a string value representing the JWT token issued to the user for authentication.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "an HTTP headers object containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java `HttpClient` package, which contains headers for an HTTP request.\n* `userId`: This is a header added to the HTTP request with the value of `authenticationData.getUserId()`.\n* `token`: This is a header added to the HTTP request with the value of `authenticationData.getJwtToken()`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "AuthenticationData authenticationData = new AuthenticationData(1, \"testToken\");\nHttpHeaders loginHeaders = createLoginHeaders(authenticationData);\n",
              "description": "\nIn this example, the `createLoginHeaders` method takes in an `AuthenticationData` object as its argument and returns a `HttpHeaders` object. The `HttpHeaders` object contains two headers: `userId` with the value of the `getUserId()` method in the `AuthenticationData` object, and `token` with the value of the `getJwtToken()` method.\nThe `authenticationData` object is created and then passed as an argument to the `createLoginHeaders` method. The returned `HttpHeaders` object is stored in the `loginHeaders` variable."
            },
            "name": "createLoginHeaders",
            "location": {
              "start": 81,
              "insert": 58,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 57,
                "end": 80
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 23
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A Spring Boot RESTful controller named BookingController that implements the BookingsApi interface. The controller has one method, deleteBooking(), which takes two path variables (amenityId and bookingId) and deletes a booking based on those IDs. The method returns a ResponseEntity with either NO_CONTENT or NOT_FOUND status code depending on whether the booking was successfully deleted or not.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e6e0f6c7-d931-9bb4-d84f-f73682349ca4",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot RESTful controller that implements the BookingsApi interface. It has a single method, deleteBooking(), which takes two path variables (amenityId and bookingId) and deletes a booking based on those IDs. The method returns a ResponseEntity with either NO_CONTENT or NOT_FOUND status code depending on whether the booking was successfully deleted or not.",
            "name": "BookingController",
            "location": {
              "start": 19,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 11,
                "end": 18
              }
            },
            "item_type": "class",
            "length": 37,
            "docLength": 7
          },
          {
            "id": "d718a3da-5f5c-1c92-374b-13a4abbe5f62",
            "ancestors": [
              "e6e0f6c7-d931-9bb4-d84f-f73682349ca4"
            ],
            "type": "function",
            "description": "deletes a booking based on its amenity ID and booking ID, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of an amenity that is associated with the booking to be deleted.",
                "complex_type": false
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "ID of the booking to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP NO_CONTENT status code indicating that the booking was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: indicates that the booking was successfully deleted\n* `HttpStatus.NOT_FOUND`: indicates that the booking could not be found\n\nThe function returns a `ResponseEntity` object with the status code as its property. The `build()` method is used to create the response entity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = bookingController.deleteBooking(\"amenity_id\", \"booking_id\");\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"The booking was successfully deleted.\");\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"The booking was not found, so it could not be deleted.\");\n}\n",
              "description": "\nIn this example, the method deleteBooking is called with two path variables \"amenityId\" and \"bookingId\". The method then returns a response entity with either a HTTP status code of NO_CONTENT or NOT_FOUND depending on whether the booking was successfully deleted or not. If the response entity has a status code of NO_CONTENT, it means that the booking was successfully deleted. If the response entity has a status code of NOT_FOUND, it means that the booking was not found and could not be deleted."
            },
            "name": "deleteBooking",
            "location": {
              "start": 45,
              "insert": 26,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 25,
                "end": 44
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "447bc9c1-3c6b-4dd5-ab0b-f4b5fcb7742e",
            "ancestors": [],
            "type": "function",
            "name": "createCommunity",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 70,
              "start": 105
            },
            "returns": "ResponseEntity<CreateCommunityResponse>",
            "params": [
              {
                "name": "request",
                "type": "CreateCommunityRequest"
              }
            ],
            "skip": false,
            "docLength": 35,
            "length": 11,
            "comment": {
              "description": "Takes a `CreateCommunityRequest` object as input, maps it to a `CommunityDto`, creates a new community using the `communityService`, and then maps the created community back to a `CreateCommunityResponse`. The response is then returned with a status code of `HttpStatus.CREATED`.",
              "params": [
                {
                  "name": "request",
                  "type": "CreateCommunityRequest",
                  "description": "CreateCommunityRequest object containing the details of the community to be created, which is used by the function to create the corresponding Community entity and return the response."
                }
              ],
              "returns": {
                "type": "ResponseEntity<CreateCommunityResponse>",
                "description": "a `CreateCommunityResponse` object containing the created community details."
              }
            }
          },
          {
            "id": "12b14a9c-742e-4625-b777-7644116706a0",
            "ancestors": [],
            "type": "function",
            "name": "listAllCommunity",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 117,
              "start": 139
            },
            "returns": "ResponseEntity<GetCommunityDetailsResponse>",
            "params": [
              {
                "name": "pageable",
                "type": "Pageable"
              }
            ],
            "skip": false,
            "docLength": 22,
            "length": 14,
            "comment": {
              "description": "Receives a `Pageable` object and lists all communities from the database using the `communityService`. It then maps the community details to a REST API response format using `communityApiMapper`, and returns a `ResponseEntity` with the list of communities in the response body.",
              "params": [
                {
                  "name": "pageable",
                  "type": "Pageable",
                  "description": "page number and the page size for fetching community details from the service."
                }
              ],
              "returns": {
                "type": "ResponseEntity<GetCommunityDetailsResponse>",
                "description": "a list of community details in REST API format."
              }
            }
          },
          {
            "id": "ed8f40ba-ecee-4ca1-ab48-bc0c8598c06b",
            "ancestors": [],
            "type": "function",
            "name": "listCommunityDetails",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 154,
              "start": 183
            },
            "returns": "ResponseEntity<GetCommunityDetailsResponse>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 29,
            "length": 13,
            "comment": {
              "description": "Receives a community ID from the path variable and retrieves the details of that community from the service layer using the `communityService`. It then maps the result to a `GetCommunityDetailsResponse` object and returns it as a response entity.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "ID of the community to retrieve details for."
                }
              ],
              "returns": {
                "type": "ResponseEntity<GetCommunityDetailsResponse>",
                "description": "a `ResponseEntity` object representing a successful response with the list of community details."
              }
            }
          },
          {
            "id": "af0181b3-59e0-4cf6-b571-609331a29217",
            "ancestors": [],
            "type": "function",
            "name": "listCommunityAdmins",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 197,
              "start": 229
            },
            "returns": "ResponseEntity<ListCommunityAdminsResponse>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "pageable",
                "type": "Pageable"
              }
            ],
            "skip": false,
            "docLength": 32,
            "length": 13,
            "comment": {
              "description": "Receives a community ID and a pageable request parameter, queries the community service to retrieve a list of admins for that community, maps the result to a `HashSet`, converts it to a REST API response, and returns an `ResponseEntity` with the list of admins.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "ID of the community for which the admins are to be listed."
                },
                {
                  "name": "pageable",
                  "type": "Pageable",
                  "description": "page number and the number of admins per page to be retrieved from the database for listing all admins of a community."
                }
              ],
              "returns": {
                "type": "ResponseEntity<ListCommunityAdminsResponse>",
                "description": "a `ResponseEntity` object of type `ListCommunityAdminsResponse`, containing a list of community admins."
              }
            }
          },
          {
            "id": "fbc2fe68-22b2-49cc-b5cd-4d41b792cd6d",
            "ancestors": [],
            "type": "function",
            "name": "listCommunityHouses",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 243,
              "start": 274
            },
            "returns": "ResponseEntity<GetHouseDetailsResponse>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "pageable",
                "type": "Pageable"
              }
            ],
            "skip": false,
            "docLength": 31,
            "length": 13,
            "comment": {
              "description": "Receives a community ID and a pageable parameter, retrieves the list of houses associated with that community from the community service, maps the results to a hash set, converts the hash set to a REST API response, and returns it as a `GetHouseDetailsResponse`.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "unique identifier of the community for which the user wants to retrieve all houses."
                },
                {
                  "name": "pageable",
                  "type": "Pageable",
                  "description": "page number and page size for fetching the community houses, allowing for pagination of the results."
                }
              ],
              "returns": {
                "type": "ResponseEntity<GetHouseDetailsResponse>",
                "description": "a `ResponseEntity` object containing a list of houses belonging to a specific community."
              }
            }
          },
          {
            "id": "8a4b7152-0bad-4e11-932c-122698f4186b",
            "ancestors": [],
            "type": "function",
            "name": "addCommunityAdmins",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 288,
              "start": 317
            },
            "returns": "ResponseEntity<AddCommunityAdminResponse>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "request",
                "type": "AddCommunityAdminRequest"
              }
            ],
            "skip": false,
            "docLength": 29,
            "length": 16,
            "comment": {
              "description": "Adds administrators to a community based on a request. It first checks if the community exists, then it adds the admins to the community and returns the updated community with the added admins.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "ID of the community to which admins are being added."
                },
                {
                  "name": "request",
                  "type": "AddCommunityAdminRequest",
                  "description": "AddCommunityAdminRequest object that contains the information about the admins to be added to the community."
                }
              ],
              "returns": {
                "type": "ResponseEntity<AddCommunityAdminResponse>",
                "description": "a `ResponseEntity` with a status of `CREATED` and a body containing an `AddCommunityAdminResponse` object with the added admins' user IDs."
              }
            }
          },
          {
            "id": "7c5c13c9-d17d-4c7a-87e7-948af53f133f",
            "ancestors": [],
            "type": "function",
            "name": "addCommunityHouses",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 334,
              "start": 378
            },
            "returns": "ResponseEntity<AddCommunityHouseResponse>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "request",
                "type": "AddCommunityHouseRequest"
              }
            ],
            "skip": false,
            "docLength": 44,
            "length": 17,
            "comment": {
              "description": "Adds houses to a community by converting house names to CommunityHouse objects, adding them to the community, and returning the updated list of houses for the community.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "id of the community to which the houses will be added."
                },
                {
                  "name": "request",
                  "type": "AddCommunityHouseRequest",
                  "description": "AddCommunityHouseRequest object containing the house names to be added to the specified community."
                }
              ],
              "returns": {
                "type": "ResponseEntity<AddCommunityHouseResponse>",
                "description": "a `ResponseEntity` object with a `HttpStatus` code of `CREATED` and a `AddCommunityHouseResponse` object as its body."
              }
            }
          },
          {
            "id": "8ad03fbf-acc3-4be9-b11d-e997079ef87c",
            "ancestors": [],
            "type": "function",
            "name": "removeCommunityHouse",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 396,
              "start": 424
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "houseId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 28,
            "length": 15,
            "comment": {
              "description": "Receives a request to delete a house from a community, retrieves the community details and houses associated with the given community ID, and returns a response entity indicating whether the house was successfully removed.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "unique identifier of a community that the house belongs to."
                },
                {
                  "name": "houseId",
                  "type": "String",
                  "description": "12-digit unique identifier of the house to be removed from the specified community."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "a `ResponseEntity` object with a `statusCode` of `NO_CONTENT`, indicating that the house has been successfully removed from the community."
              }
            }
          },
          {
            "id": "8d5d1fc6-28f2-4d1e-a0f2-84a75c908dfa",
            "ancestors": [],
            "type": "function",
            "name": "removeAdminFromCommunity",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 440,
              "start": 461
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              },
              {
                "name": "adminId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 21,
            "length": 13,
            "comment": {
              "description": "Deletes an admin from a community based on their ID, returning a status code indicating success or failure.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "identifier of the community to which the admin belongs."
                },
                {
                  "name": "adminId",
                  "type": "String",
                  "description": "ID of the admin to be removed from the community."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community."
              }
            }
          },
          {
            "id": "cbeed697-a70c-4e85-8c49-69c693a90895",
            "ancestors": [],
            "type": "function",
            "name": "deleteCommunity",
            "location": {
              "offset": " ",
              "indent": 2,
              "insert": 475,
              "start": 490
            },
            "returns": "ResponseEntity<Void>",
            "params": [
              {
                "name": "communityId",
                "type": "String"
              }
            ],
            "skip": false,
            "docLength": 15,
            "length": 10,
            "comment": {
              "description": "Deletes a community with the given ID using the `communityService`. If the delete is successful, it returns a `ResponseEntity` with status code `NO_CONTENT`. If the delete fails, it returns a `ResponseEntity` with status code `NOT_FOUND`.",
              "params": [
                {
                  "name": "communityId",
                  "type": "String",
                  "description": "ID of the community to be deleted."
                }
              ],
              "returns": {
                "type": "ResponseEntity<Void>",
                "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted."
              }
            }
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "a RESTful API for managing members of a house. It provides endpoints for listing all members of a specified house, adding new members to a house, and deleting members from a house. The code uses Spring WebFlux as the web application framework and JPA 2.2 as the persistence framework.\n\nThe `HouseMemberService` class provides methods for listing members, adding new members, and deleting members from a house. These methods are annotated with various @Bean annotations to specify default values for pagination and sorting parameters. The `ListAllMembersOfHouse` method takes a house ID and a pageable parameter as input and returns a list of all members of the specified house. The `addHouseMembers` method takes a house ID and an add member request as input and adds the members to the house database, returning the updated member list in response. Finally, the `deleteHouseMember` method takes a house ID and a member ID as input and deletes the member from the house database, returning a HTTP status code indicating the result of the operation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to houses and their members. The class provides methods for listing all members of a house, adding members to a house, and deleting members from a house. These methods use the `houseService` class to interact with the database and return responses in the form of `ResponseEntity` objects.",
            "name": "HouseController",
            "location": {
              "start": 50,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 42,
                "end": 49
              }
            },
            "item_type": "class",
            "length": 217,
            "docLength": 7
          },
          {
            "id": "10de0a5b-d008-ec98-5940-fe7b932bc70f",
            "ancestors": [
              "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1"
            ],
            "type": "function",
            "description": "receives a pageable parameter and returns a response entity containing a list of houses, which have been converted from a set of community house objects to a list of REST API response community house objects using the `houseApiMapper`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the number of houses to display per page and the total number of pages, which are used to paginate the list of houses returned by the method.\n\n* `@PageableDefault(size = 200)`: This annotation specifies the default page size for the list of houses returned in the response. The value `200` indicates that the default page size is 200 houses.\n* `Pageable`: This is an interface that provides methods for pagination, such as `getTotalElements()` (returning the total number of houses), `getNumberOfElements()` (returning the number of houses in the current page), and `getPageNumber()/setPageNumber()` (allowing the client to navigate through the pages).\n* `size`: This property is a double value that represents the number of houses per page. It is used by the `Pageable` interface to determine the total number of pages required to display all the houses.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a list of house details in a REST API response format.\n\n* `response`: An instance of `GetHouseDetailsResponse`, which contains a list of `CommunityHouse` objects in its `houses` field.\n* `pageable`: A `Pageable` object that represents the pagination settings for the list of houses.\n* `houseService`: An instance of a service class that provides methods for interacting with the house data.\n* `houseApiMapper`: An instance of a mapping class that converts the `CommunityHouse` objects returned by the `houseService` to the corresponding REST API response format.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n",
              "description": "\nPageable is a default parameter when using spring pagination. It's used to get the next page of items from a list. Pageable also has properties like `pageSize` and `pageNumber`. For example, if we want to retrieve the third page of a list with 10 items per page, we can use the following code:\n"
            },
            "name": "listAllHouses",
            "location": {
              "start": 84,
              "insert": 58,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 57,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 26
          },
          {
            "id": "b7e5fe76-0c71-e887-5e48-35438fce213a",
            "ancestors": [
              "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1"
            ],
            "type": "function",
            "description": "retrieves the details of a house based on its ID and maps them to a `GetHouseDetailsResponse` object, which is then returned as an `OK` response entity or an empty response entity if the house is not found.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of houses with their details.\n\n* `ResponseEntity<GetHouseDetailsResponse>` represents an entity that contains a response object for the `getHouseDetails` method.\n* `getHouseDetailsResponseCommunityHouses` is a list of community houses associated with the given house ID.\n* `houses(getHouseDetailsResponseCommunityHouses)` returns a list of houses in the response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class HouseController {\n    @Autowired private HouseService houseService;\n    @Autowired private HouseApiMapper houseApiMapper;\n    @GetMapping(\"/houses/{houseId}\")\n    public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(@PathVariable String houseId) {\n        return houseService.getHouseDetailsById(houseId)\n                .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n                .map(Collections::singleton)\n                .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n                .map(ResponseEntity::ok)\n                .orElse(ResponseEntity.notFound().build());\n    }\n}\n",
              "description": "\nIn the example, the @Autowired annotation is used to inject the HouseService and HouseApiMapper objects. The getHouseDetails method of HouseController class is mapped using the @GetMapping annotation with a path variable (\"/houses/{houseId}\") that accepts a house ID as input. The HouseService and HouseApiMapper are then used in the method to retrieve details about a specific house based on the provided house ID. If the service returns a valid house, it is converted into a response object using the HouseApiMapper class, and returned with a HTTP 200 status code (OK). Otherwise, the response will be a not found error with a HTTP 404 status code (NOT FOUND)."
            },
            "name": "getHouseDetails",
            "location": {
              "start": 126,
              "insert": 101,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 100,
                "end": 125
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 25
          },
          {
            "id": "0cfdfe15-0565-74a1-5d44-b58a2c892fdf",
            "ancestors": [
              "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1"
            ],
            "type": "function",
            "description": "retrieves the members of a house with a given ID and returns them as a list of `HouseMember` objects in a `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house for which the members are to be listed.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "default page size and sort order for the list of house members returned in the response, allowing for pagination of the result set.\n\n* `size`: The number of members to be returned per page (default is 200)\n\nThe function processes the input parameters and returns a response entity with the list of members of the specified house.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListHouseMembersResponse",
              "description": "a `ListHouseMembersResponse` object containing a list of house members.\n\n* `ResponseEntity`: This is the type of response entity that is returned, which indicates whether the request was successful or not. In this case, it is `ok`, indicating a successful response.\n* `ListHouseMembersResponse`: This is the type of response object that contains a list of members of the house.\n* `members`: This is a list of `HouseMember` objects, which contain information about each member of the house.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListHouseMembersResponse> response = houseController.listAllMembersOfHouse(\"123\", PageRequest.of(0, 25));\n",
              "description": "\nIn this example, the `houseId` is \"123\", and we request a page of size 25. The method would first retrieve all members of the house using the `getHouseMembersById` method of the `HouseService`, followed by converting the resulting `Set<HouseMember>` to a new `HashSet<HouseMember>`. Next, we convert the resulting `HashSet<HouseMember>` to a new `List<HouseMemberResponse>`. Finally, we return an HTTP 200 status code response with the newly constructed `List<HouseMemberResponse>`, wrapped in a `ResponseEntity` instance. This would result in a JSON response like this:\n"
            },
            "name": "listAllMembersOfHouse",
            "location": {
              "start": 171,
              "insert": 137,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 136,
                "end": 170
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 34
          },
          {
            "id": "5bbd6c0c-a2ee-f9ac-8641-ae0935ca860d",
            "ancestors": [
              "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1"
            ],
            "type": "function",
            "description": "adds members to a house identified by the provided `houseId`. It takes in the request containing the members to add, processes it, and returns a response indicating whether the addition was successful or not.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house for which members are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object containing the member details to be added to the specified house.\n\n* `houseId`: A string representing the unique identifier of the house to which members will be added.\n* `request.getMembers()`: A set of HouseMember objects containing the new members to be added to the house.\n\nThe function performs several operations, including logging a trace message and adding new members to the house using the `houseService`. If the addition is successful, the function returns a `ResponseEntity` with a status code of `CREATED` and the updated member list in the response body. Otherwise, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object with a status code of either `NOT_FOUND` or `CREATED`, depending on whether any members were added successfully.\n\n* `response`: A `AddHouseMemberResponse` object that contains the added members in a list format.\n* `savedHouseMembers`: A set of `HouseMember` objects that represent the successfully saved members in the database.\n\nThe function first logs a trace message to indicate the receipt of the request and then processes the request by converting the `AddHouseMemberRequest` object into a list of `HouseMember` objects using the `houseMemberMapper`. It then adds the members to the house using the `houseService`, and if any errors occur, it returns a `ResponseEntity` with a status code of `NOT_FOUND`. If the addition is successful, it creates a new `AddHouseMemberResponse` object and populates it with the saved members in a list format. Finally, it returns the response entity with a status code of `CREATED`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  void testAddHouseMember() {\n    // Setup\n    HouseService houseService = new HouseService();\n    AddHouseMemberRequest request = new AddHouseMemberRequest();\n    request.setMembers(new HashSet<HouseMemberDto>());\n    \n    HouseMemberDto houseMemberDto1 = new HouseMemberDto();\n    houseMemberDto1.setName(\"Test\");\n    houseMemberDto1.setRole(\"OWNER\");\n    request.getMembers().add(houseMemberDto1);\n    \n    HouseMemberDto houseMemberDto2 = new HouseMemberDto();\n    houseMemberDto2.setName(\"Test2\");\n    houseMemberDto2.setRole(\"MEMBER\");\n    request.getMembers().add(houseMemberDto2);\n    \n    // Execution\n    ResponseEntity<AddHouseMemberResponse> response = \n                              houseService.addHouseMembers(\"1\", request);\n\n    // Verification\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(response.getBody().getMembers().size()).isEqualTo(2);\n    assertThat(response.getBody().getMembers().containsAll(request.getMembers()))\n                              .isTrue();\n  }\n",
              "description": "\nIn this example, we have a test class with a test method for the addHouseMember method in the HouseService class. We setup the request object and set its members to two new HouseMemberDto objects, then we call the addHouseMembers method on the house service and pass it \"1\" as the house ID and the request object as arguments. We then verify that the response status code is HttpStatus.CREATED and that the response body contains all the members in the request set."
            },
            "name": "addHouseMembers",
            "location": {
              "start": 217,
              "insert": 185,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 184,
                "end": 216
              }
            },
            "item_type": "method",
            "length": 18,
            "docLength": 32
          },
          {
            "id": "c660c7e1-5886-358c-3f45-815984f1bc31",
            "ancestors": [
              "14baf52b-0193-dda8-7b46-3b2d9ef3b8a1"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the provided house ID and member ID. It first logs the request, then checks if the member was successfully deleted using the `houseService`. If successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`. Otherwise, it returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which a member is being deleted.",
                "complex_type": false
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the member was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the member was successfully deleted and no additional content is provided in the response.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the member could not be found in the house, possibly because it does not exist or has already been deleted.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate HouseService houseService;\n\n@Test\npublic void testDeleteHouseMember() {\n    ResponseEntity<Void> response = houseService.deleteHouseMember(\"1234\", \"5678\");\n    assertThat(response, is(notNullValue()));\n    assertThat(response.getStatusCode(), is(HttpStatus.NO_CONTENT));\n}\n",
              "description": "\nThe @Test annotation indicates to JUnit that this method should be run as a unit test. The @Autowired annotation indicates that the houseService dependency should be injected into the test method. The test method calls the deleteHouseMember method with \"1234\" and \"5678\" as input parameters, which results in a ResponseEntity<Void> response being returned. The assertThat method is used to verify that the response object is not null, and that the HTTP status code of the response is HttpStatus.NO_CONTENT (204)."
            },
            "name": "deleteHouseMember",
            "location": {
              "start": 255,
              "insert": 236,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 235,
                "end": 254
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing house member documents. It includes endpoints for getting and uploading member documents, updating member documents, deleting member documents, and returning a status code indicating whether an operation was successful or not. The code uses Java's Spring WebFlux framework and its built-in functionality to handle HTTP requests and responses, as well as the Optional type to manage the result of an operation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "857d0c45-2366-a5b1-8f45-adbca2e40ca4",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling requests related to house member documents. The controller receives requests to get, upload, update, and delete house member documents. It uses the `HouseMemberDocumentService` class to perform these operations and returns response entities with a status code indicating whether the operation was successful or not.",
            "name": "HouseMemberDocumentController",
            "location": {
              "start": 47,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 38,
                "end": 46
              }
            },
            "item_type": "class",
            "length": 162,
            "docLength": 8
          },
          {
            "id": "874661e6-b4f3-98b2-3345-eca660b21a86",
            "ancestors": [
              "857d0c45-2366-a5b1-8f45-adbca2e40ca4"
            ],
            "type": "function",
            "description": "receives a member ID as path variable and retrieves the corresponding house member document from the service. It then returns the document content as byte array with appropriate headers.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member for whom the document is being retrieved.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntitybyte",
              "description": "a response entity with the requested house member document content.\n\n* The input parameter `memberId` represents the unique identifier of a house member.\n* The `Optional<HouseMemberDocument>` object returned by the `houseMemberDocumentService.findHouseMemberDocument()` method contains the document associated with the provided `memberId`, if found.\n* The `HttpHeaders` object `headers` is set with various properties:\n\t+ `CacheControl`: sets the cache control to `no-cache`.\n\t+ `ContentType`: sets the content type to `image/jpeg`.\n\t+ `ContentDisposition`: sets the content disposition to `inline`, with a filename of the document's original name.\n* The `ResponseEntity` object returned by the `orElseGet()` method contains the following properties:\n\t+ `content`: contains the actual document content as a byte array.\n\t+ `headers`: contains the set of headers described above.\n\t+ `statusCode`: contains the HTTP status code `OK`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testGetHouseMemberDocument() throws Exception {\n    // Setup\n    String memberId = \"123456789\";\n\n    // Call method\n    ResponseEntity<byte[]> response = houseController.getHouseMemberDocument(memberId);\n\n    // Verify\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.hasBody()).isTrue();\n}\n",
              "description": "\nIn this example, we are testing the getHouseMemberDocument method by sending a request to retrieve a house member document with id = \"123456789\". We verify that the response has a status code of 200 (OK) and that it has a body."
            },
            "name": "getHouseMemberDocument",
            "location": {
              "start": 80,
              "insert": 54,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 53,
                "end": 79
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 26
          },
          {
            "id": "0b2b49a6-0325-19bf-104c-9793a533267b",
            "ancestors": [
              "857d0c45-2366-a5b1-8f45-adbca2e40ca4"
            ],
            "type": "function",
            "description": "receives a request to add a house member document, creates a new document using the provided multipart file and member ID, and returns a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the member whose document is being uploaded.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "document to be added or updated for the specified house member.\n\n* `memberId`: The identifier of the house member whose document is being uploaded.\n* `memberDocument`: A `MultipartFile` object representing the document to be uploaded.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a response entity with a HTTP status code of NO_CONTENT or NOT_FOUND, depending on whether a house member document was successfully created.\n\n* The first part of the output is `ResponseEntity`, which represents an HTTP response entity. This entity has a status code that indicates whether the request was successful or not. In this case, if the house member document is created successfully, the status code will be `HttpStatus.NO_CONTENT`. Otherwise, it will be `HttpStatus.NOT_FOUND`.\n* The `map` method is used to transform the `Optional<HouseMemberDocument>` into a `ResponseEntity` object. This method takes a function that returns a `ResponseEntity` object, and applies it to the `Optional` object if it is present. If the `Optional` object is empty, the method returns an empty `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND`.\n* The `orElseGet` method is used as a fallback in case the `map` method does not produce a valid response entity. It takes a function that returns a `ResponseEntity` object, and applies it to an empty `Optional` object. This means that if there is no house member document to return, the function will return an empty `ResponseEntity` object with a status code of `HttpStatus.NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class HouseMemberController {\n\n  @PostMapping(\"/api/v1/house-member/{memberId}/document\")\n  public ResponseEntity<Void> uploadHouseMemberId(\n      @PathVariable(\"memberId\") String memberId,\n      @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    return houseMemberDocumentController.uploadHouseMemberDocument(memberId, memberDocument);\n}\n",
              "description": "\nThe following is an example on how method uploadHouseMemberDocument would be used:\n"
            },
            "name": "uploadHouseMemberDocument",
            "location": {
              "start": 131,
              "insert": 105,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 104,
                "end": 130
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 26
          },
          {
            "id": "6cf12f68-4f07-da9c-a040-f2d66d25dbf2",
            "ancestors": [
              "857d0c45-2366-a5b1-8f45-adbca2e40ca4"
            ],
            "type": "function",
            "description": "updates a house member's document based on the provided ID and multipart file. It first checks if the update was successful using the `houseMemberDocumentService`, and then returns a response entity indicating whether the update was successful or not.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "identifier of the house member whose document is being updated.",
                "complex_type": false
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the updated house member document to be saved into the database by the `houseMemberDocumentService`.\n\n* `memberId`: A String representing the unique identifier of the member whose document is being updated.\n* `memberDocument`: A MultipartFile object containing the document to be updated for the specified member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the update was successful or not.\n\n* `map`: This method is used to map the `Optional<HouseMemberDocument>` result to a `ResponseEntity`. If the `Optional` is present, it contains the updated House Member Document, and the response entity is created with a status code of `NO_CONTENT`. If the `Optional` is absent, the response entity is created with a status code of `NOT_FOUND`.\n* `orElseGet`: This method is used to provide an alternative implementation of the `map` method if the `Optional` is empty. In this case, the alternative implementation creates a `ResponseEntity` with a status code of `NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RequestMapping(method = RequestMethod.PUT, path = \"/{memberId}/document\")\npublic ResponseEntity updateHouseMemberDocument(@PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    // update the house member document with the given member ID and file\n    return ResponseEntity.noContent().build();\n}\n",
              "description": "\nThe example uses a RequestMethod of PUT (to update a resource), which is used to modify existing resources or create new ones. The path variable {memberId} specifies the resource to be modified, in this case, the house member document. The @RequestParam(\"memberDocument\") MultipartFile indicates that the request will contain a file that should be uploaded as the member document. \nThe example returns a ResponseEntity with no content, which means that the operation was successful and there is no further information to provide."
            },
            "name": "updateHouseMemberDocument",
            "location": {
              "start": 173,
              "insert": 143,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 142,
                "end": 172
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 30
          },
          {
            "id": "798a9004-05ee-6e8d-f14a-7b53bd41b361",
            "ancestors": [
              "857d0c45-2366-a5b1-8f45-adbca2e40ca4"
            ],
            "type": "function",
            "description": "deletes a house member document based on the provided `memberId`. If successful, it returns a `ResponseEntity` with a status code of `NO_CONTENT`. If unsuccessful, it returns a `ResponseEntity` with a status code of `NOT_FOUND`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of a house member whose document will be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a `NO_CONTENT` status code if the document was successfully deleted, or a `NOT_FOUND` status code otherwise.\n\n* `isDocumentDeleted`: This boolean variable indicates whether the house member document has been deleted successfully or not. If it is true, the document has been deleted. Otherwise, it means that the document could not be deleted for some reason.\n* `HttpStatus`: The status code of the response entity, which can be either NO_CONTENT (204) if the document was deleted successfully or NOT_FOUND (404) if the document could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = \ndeleteHouseMemberDocument(\"e3c58126-40f3-478a-83b2-433655f19df1\");\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"Document Deleted\");\n} else {\n    System.out.println(\"Document Not Found\");\n}\n",
              "description": ""
            },
            "name": "deleteHouseMemberDocument",
            "location": {
              "start": 198,
              "insert": 184,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 183,
                "end": 197
              }
            },
            "item_type": "method",
            "length": 10,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "a Rest API endpoint that allows users to retrieve a list of payments scheduled by an admin for a specific community. The code uses various dependencies from Spring Web and JPA packages to handle HTTP requests, map responses, and perform database queries. The endpoint retrieves payments for the specified admin based on their ID and filters them according to the given community ID. It then returns a paginated list of payments along with metadata.\n\nThe code also includes a utility method isAdminInGivenCommunity() that checks if an admin is present in a specific community by querying the community details and admins. This method is used in the endpoint to verify if the given admin exists in the specified community before retrieving payments for them.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "7e56c659-2451-1c98-ba42-fce6be1d6378",
            "ancestors": [],
            "type": "function",
            "description": "in Spring Boot handles payments-related functionality, including listing all member payments for a given house member ID, listing all payments scheduled by an admin with a given ID, and determining if an admin is present in a specified community. The controller utilizes the `schedulePaymentApiMapper` to map between the REST API response and the required Java classes.",
            "name": "PaymentController",
            "location": {
              "start": 59,
              "insert": 51,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 50,
                "end": 58
              }
            },
            "item_type": "class",
            "length": 246,
            "docLength": 8
          },
          {
            "id": "1ebc3b44-582d-8fa0-794b-b07fc893f7bd",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "handles schedule payment requests from admins for a community house. It retrieves the member and admin information, checks if the admin is an admin of the community house, enriches the request with additional data, schedules the payment, and returns the response to the client.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request sent by the user, which contains information about the payment and the member to be paid.\n\n* `request.getMemberId()`: The ID of a house member to be paid.\n* `request.getAdminId()`: The ID of an admin responsible for scheduling the payment.\n* `paymentService.getHouseMember(request.getMemberId())`: Returns a `HouseMember` object representing the house member with the given ID, or throws an exception if not found.\n* `communityService.findCommunityAdminById(request.getAdminId())`: Returns a `User` object representing the admin with the given ID, or throws an exception if not found.\n* `isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)`: A boolean value indicating whether the admin is an admin of the community house associated with the house member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is the generic type of the response entity, which is an instance of the class `ResponseEntity`.\n* `status`: This is a field of type `HttpStatus`, which indicates the HTTP status code of the response. In this case, it is set to `CREATED`.\n* `body`: This is a field of type `SchedulePaymentResponse`, which contains the detailed response data.\n\nThe `SchedulePaymentResponse` object has several attributes, including:\n\n* `paymentId`: This is a field of type `UUID`, which represents the unique identifier of the scheduled payment.\n* `memberId`: This is a field of type `UUID`, which represents the ID of the member whose payment is being scheduled.\n* `adminId`: This is a field of type `UUID`, which represents the ID of the community admin who scheduled the payment.\n* `paymentDate`: This is a field of type `Instant`, which represents the date and time when the payment will be processed.\n* `paymentAmount`: This is a field of type `BigDecimal`, which represents the amount of the scheduled payment.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setMemberId(\"1234567890\");\nrequest.setAdminId(\"2345678901\");\nrequest.setAmount(BigDecimal.valueOf(10.0));\nrequest.setDescription(\"test description\");\nrequest.setPaymentDate(LocalDateTime.now());\n\nSchedulePaymentResponse response = service.schedulePayment(request);\n",
              "description": "\nIn this example, the method schedulePayment is called with a SchedulePaymentRequest object as its parameter, which contains information about the payment to be scheduled, including the user ID of the member who will receive the payment, the admin ID of the admin that initiates the payment, the amount of the payment, a description of the payment, and the date on which the payment is scheduled. The method will check if the user with the given user ID exists as a house member in the community with the given community ID, and if the user with the given admin ID exists as an administrator in the community with the given community ID. If both conditions are met, the payment is initiated, and the service returns a SchedulePaymentResponse object containing information about the scheduled payment.\n\nThis example assumes that the HouseMember and User classes have getter methods for their attributes, such as getCommunityHouse() and getUserId(), respectively. The method schedulePayment also uses the isUserAdminOfCommunityHouse() method to check if a given user is an administrator of the community house associated with a given house member."
            },
            "name": "schedulePayment",
            "location": {
              "start": 92,
              "insert": 67,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 66,
                "end": 91
              }
            },
            "item_type": "method",
            "length": 25,
            "docLength": 25
          },
          {
            "id": "bdfed3b5-1404-8cbf-dc49-1d4e6dd0b5a9",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "determines if a given user is an administrator of a community house by checking if their username is present in the community house's admin list.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "CommunityHouse object that is being checked for admin status.\n\n* `communityHouse`: A `CommunityHouse` object representing the community house being checked for administration rights.\n* `getCommunity()`: A method on the `CommunityHouse` class that returns a `Community` object, which is the main entity of interest in the system.\n* `getAdmins()`: A method on the `Community` object that returns a list of `User` objects representing the admins of the community house.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object to be checked for admin status in relation to the `communityHouse`.\n\n* `admin`: A `User` object representing a user in the community house.\n* `CommunityHouse`: An object representing the community house where the user is being checked for admin status.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the specified user is an admin of the community house.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "boolean isAdmin = isUserAdminOfCommunityHouse(communityHouse, admin);\n",
              "description": "\nHere, `communityHouse` and `admin` are the inputs to the method. The method returns a boolean indicating whether the admin is an administrator of the community that owns the house or not. This would allow you to use it in a conditional statement such as:\n"
            },
            "name": "isUserAdminOfCommunityHouse",
            "location": {
              "start": 143,
              "insert": 118,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 117,
                "end": 142
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 25
          },
          {
            "id": "16b0da41-53ce-6d97-8d4e-271f27041858",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "retrieves payment details with the given ID from the payment service and maps them to a `SchedulePaymentResponse`. If no payment details are found, it returns a `ResponseEntity` with a status code of `404`.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "identifier of the payment for which details are requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing a payment details response.\n\n* `paymentId`: The unique identifier for the payment being retrieved.\n* `paymentService`: A service that provides payment-related functionality.\n* `schedulePaymentApiMapper`: A mapper used to transform payment data into a Schedule Payment response object.\n* `ResponseEntity`: An entity that represents a response, indicating whether the request was successful or not. In this case, it is either `ok` or `notFound`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<SchedulePaymentResponse> response = this.paymentService.listPaymentDetails(\"5f3a670e-c8d2-47a9-aa52-6b159cf52ec5\");\nif (response.hasBody()) {\n    SchedulePaymentResponse paymentResponse = response.getBody();\n    // Use the payment details from the response to perform a task or take an action on the payment\n} else {\n    // Handle the case where no payment with the given ID exists\n}\n",
              "description": "\nThis method would first retrieve the details of the payment with the provided payment ID using the payment service. If the response has a body, it would map that payment to a SchedulePaymentResponse object and return an Ok status code along with the response body. Otherwise, if there is no payment with the given ID, it returns a 404 Not Found status code. The example shows how to handle both cases by checking if the response has a body before proceeding to use the payment details from the response."
            },
            "name": "listPaymentDetails",
            "location": {
              "start": 169,
              "insert": 149,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 148,
                "end": 168
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 20
          },
          {
            "id": "f930015c-7cf8-e69c-8049-b3fbb6ca67dd",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "receives a member ID and returns a response entity containing a list of payments associated with that member.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "house member for whom all payments are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of `MemberPayment` objects.\n\n* `ResponseEntity<ListMemberPaymentsResponse>`: This is the type of the returned response entity, which contains a list of member payments.\n* `listAllMemberPayments()`: This is the method that returns the response entity.\n* `log.trace()`: This line logs a trace message indicating that the function has received a request to list all the payments for a specific house member.\n* `paymentService.getHouseMember(memberId)`: This line retrieves the member object associated with the given `memberId`.\n* `paymentService.getPaymentsByMember(memberId)`: This line retrieves the list of payments associated with the retrieved member object.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()`: This line maps the list of payments to a response entity containing the list of member payments.\n* `new List Member Payments Response().payments(memberPayments)`: This line creates a new instance of the `ListMemberPaymentsResponse` class and sets its `payments` field to the list of payments retrieved from the API.\n* `map(ResponseEntity::ok) ||ElseGet(() -> ResponseEntity.notFound().build())`: This line maps the response entity to either `OK` or `NOT FOUND`, depending on whether a valid response was received from the API.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<ListMemberPaymentsResponse> response = paymentService.listAllMemberPayments(\"1234567890\");\nassertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\nListMemberPaymentsResponse body = response.getBody();\n// Check that the response contains at least one payment entry and has the expected pageInfo metadata\nassertThat(body.getPageInfo().getTotalElements() >= 1).isTrue();\n",
              "description": "\nThe example input for this method would be 'memberId', which is a string representing the member's unique identifier, e.g., \"1234567890\". The method returns a `ResponseEntity` object containing a `ListMemberPaymentsResponse` body with a list of `MemberPayment` objects and pagination metadata. In this case, the response is expected to be an HTTP 200 OK response.\n\nThe method first checks if the provided member ID exists in the system using `paymentService.getHouseMember(memberId)`. If it does not exist, then the method returns a 404 Not Found error. Otherwise, it retrieves the payments for that member using `paymentService.getPaymentsByMember(memberId)` and maps them to `MemberPayment` objects using `schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet`. Finally, it creates a new instance of `ListMemberPaymentsResponse` and sets the list of `MemberPayment`s as its payments attribute.\n\nThe method returns a 200 OK response with the constructed `ListMemberPaymentsResponse` object in the body."
            },
            "name": "listAllMemberPayments",
            "location": {
              "start": 207,
              "insert": 179,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 178,
                "end": 206
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 28
          },
          {
            "id": "7a248535-7530-b992-b845-528dfb65636a",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "retrieves all scheduled payments for a given admin in a community, checks if the admin is present in the community, and returns the list of payments in a response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community that the admin belongs to, which is used to filter the payments listed in the response.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin for whom the payments are being listed, and is used to filter the payments returned in the response.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and the number of payments to be displayed per page for the list of payments scheduled by the admin.\n\n* `communityId`: The ID of the community that the admin belongs to.\n* `adminId`: The ID of the admin who is requesting the list of scheduled payments.\n* `pageable`: A `Pageable` object representing the pagination information for the list of scheduled payments. It contains the page number, page size, and total number of payments.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPaymentsResponse",
              "description": "a `ResponseEntity` object containing a `ListAdminPaymentsResponse` body with the scheduled payments for the admin.\n\n* `payments`: A list of `AdminPayment` objects, representing the scheduled payments for the given admin.\n* `pageInfo`: Represents the pagination information of the payment list, including the total number of payments and the current page number.\n\nThe function returns a `ResponseEntity` object with the `body` containing the `ListAdminPaymentsResponse` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@GetMapping(path = \"/schedules/payments\")\npublic ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n    @RequestParam String communityId,\n    @RequestParam String adminId,\n    Pageable pageable) {\n  log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\", adminId);\n  \n  final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n  \n  if (isAdminInGivenCommunity) {\n    final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n    final List<Payment> payments = paymentsForAdmin.getContent();\n    final Set<AdminPayment> adminPayments =\n        schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(new HashSet<>(payments));\n    final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n        .payments(adminPayments)\n        .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n    return ResponseEntity.ok().body(response);\n  }\n  \n  return ResponseEntity.notFound().build();\n}\n",
              "description": "\nThis method would be used in the controller by making a request to the listAllAdminScheduledPayments endpoint with two required parameters: communityId and adminId.\n"
            },
            "name": "listAllAdminScheduledPayments",
            "location": {
              "start": 256,
              "insert": 220,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 219,
                "end": 255
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 36
          },
          {
            "id": "e9703e7f-8569-f7b7-8c4e-d0cb9c26005b",
            "ancestors": [
              "7e56c659-2451-1c98-ba42-fce6be1d6378"
            ],
            "type": "function",
            "description": "takes two parameters, `communityId` and `adminId`, and returns a boolean value indicating whether the specified admin is an administrator in the given community. It does so by retrieving the details of the community and its admins, then checks if the specified admin is present in the list of admins for that community.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community whose details and admins are to be retrieved for checking if the given `adminId` is an admin in that community.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin to check if they are an administrator in the specified community.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a boolean value indicating whether the specified admin is an administrator of the given community.\n\n* The method returns a `Boolean` value indicating whether the specified `adminId` is an admin in the given `communityId` community or not.\n* The method first retrieves the details of the `communityId` using `communityService.getCommunityDetailsByIdWithAdmins()`, which returns a `List` of `Community` objects containing the details of the community, along with a list of admins associated with it.\n* The method then maps each admin in the list to its `userId`, and then uses `stream().anyMatch()` to check if the specified `adminId` exists in the list of admins.\n* If the `adminId` is found in the list, the method returns `true`. Otherwise, it returns `false`.\n* If the community with the given `communityId` does not exist, the method throws a `RuntimeException`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String communityId = \"56532d97e4b038a7814f8a66\";\nString adminId = \"56532d97e4b038a7814f8a66\";\n\n// Create a community service with the community id and admin id\nCommunityService communityService = new CommunityService(communityId, adminId);\n\n// Get the community details by id with admins\nOptional<Community> communityOptional = communityService.getCommunityDetailsByIdWithAdmins(communityId);\n\n// Check if the admin is in the community\nboolean isAdminInGivenCommunity = communityOptional.map(Community::getAdmins).map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId))).orElseThrow(() -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n\nSystem.out.println(isAdminInGivenCommunity);\n",
              "description": "\nThe example code uses a community service to get the community details by id with admins, then checks if the admin is in that community using `map` and `anyMatch`. If the admin is not found in the community, an exception is thrown."
            },
            "name": "isAdminInGivenCommunity",
            "location": {
              "start": 297,
              "insert": 279,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 278,
                "end": 296
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 18
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A RESTful API for managing users and their associated houses in a web application. The code includes functions for signing up new users, listing all users, getting details of a specific user, resetting passwords, and confirming email addresses. It also provides endpoints for sending password reset links and resending failed email confirmation requests. Overall, the code implements user authentication and management features using Spring WebFlux and Jackson JSON processing.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "55b961c9-ea38-9d95-a34f-947f454ca00d",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling user-related operations in an application. It provides endpoints for signing up, listing all users, getting details of a specific user, resetting a password, and confirming an email address. The controller uses dependency injection to inject the `userService` and `houseService`, which are used to perform actions related to users and houses, respectively.",
            "name": "UserController",
            "location": {
              "start": 58,
              "insert": 50,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 49,
                "end": 57
              }
            },
            "item_type": "class",
            "length": 179,
            "docLength": 8
          },
          {
            "id": "430555ae-5e96-b993-9e49-ff682fadc767",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "receives a `CreateUserRequest` object, creates a corresponding `UserDto` object using the provided request data, and then attempts to create a new user in the system. If successful, it returns a `CreateUserResponse` object containing details of the newly created user.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "`CreateUserRequest` object containing information about the user to be created.\n\n* `@Valid`: The `request` object is validated before processing.\n* `CreateUserRequest request`: This is the incoming request object containing the details of a new user to be created.\n* `log.trace(\"Received SignUp request\")`: This line logs a message indicating that the `signUp` function has received a sign-up request.\n* `UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request)`: The incoming `CreateUserRequest` object is converted into a `UserDto` object using the `userApiMapper`. This step allows for easier processing of the request within the function.\n* `Optional<UserDto> createdUserDto = userService.createUser(requestUserDto)`: The `createdUserDto` variable is created to store the resulting user entity after creation, using the `userService`. If the creation was successful, the resulting user entity will be stored in this variable; otherwise, it will be empty.\n* `return createdUserDto.map(userDto -> { ... })`: The `createdUserDto` variable is used to return a response object based on the result of the creation operation. If the creation was successful, the response object will contain the newly created user entity; otherwise, it will contain an error message.\n* `orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build())`: This line provides a fallback response in case the creation operation fails, indicating a conflict with the requested creation.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a body containing the created user's response.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response to a web request. It has two methods: `status()` and `body()`. The `status()` method returns an HTTP status code, while the `body()` method returns the response body as a specific type (in this case, `CreateUserResponse`).\n* `CreateUserResponse`: This is a class that represents the response to the sign-up request. It has several properties, including `userId`, `username`, `email`, and `password`. These properties represent the user's ID, username, email address, and password, respectively.\n* `map()`: This method is used to map the `Optional<UserDto>` returned by the `createUser` method to a `CreateUserResponse`. If the `Optional` contains a value, the method returns a `ResponseEntity` with the corresponding `CreateUserResponse`. Otherwise, it returns a `ResponseEntity` with an HTTP status code of `CONFLICT`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "CreateUserRequest request = new CreateUserRequest();\nrequest.setEmail(\"test@email.com\");\nrequest.setPassword(\"password1234567890\");\nrequest.setUsername(\"TestUsername\");\nuserApiService.signUp(request);\n",
              "description": "\nIn this example, we first create a new instance of the CreateUserRequest class and set its email, password, and username properties. We then pass this request object to the signUp method in UserApiService. The signUp method will take this request object and use it to create a new user in the system using the userService.createUser method. If successful, the method will return an instance of CreateUserResponse containing information about the newly created user. We then assert that the status of the response is HTTP Status 201 (CREATED) indicating that the request was successful and a new user was created in the system."
            },
            "name": "signUp",
            "location": {
              "start": 79,
              "insert": 68,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 67,
                "end": 78
              }
            },
            "item_type": "method",
            "length": 12,
            "docLength": 11
          },
          {
            "id": "91fe0dfc-0ccb-a7bb-874b-60816d4e8272",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "receives a pageable request from the user and retrieves all users from the user service, mapping them to a response object containing the user details in REST API format. It then returns a response entity with the list of users.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and the number of users per page to be listed by the user service.\n\n* `log.trace(\"Received request to list all users\")` - This line logs a trace message indicating that the method has received a request to list all users.\n* `Set<User> userDetails = userService.listAll(pageable)` - This line calls the `listAll` method of the `userService` class, passing in `pageable` as a parameter. The method returns a set of `User` objects representing the list of users.\n* `Set<GetUserDetailsResponseUser> userDetailsResponse = userApiMapper.userSetToRestApiResponseUserSet(userDetails)` - This line calls the `userApiMapper` class's `userSetToRestApiResponseUserSet` method, passing in the set of `User` objects returned by the `listAll` method. The method maps each `User` object to a corresponding `GetUserDetailsResponseUser` object and returns a set of these mapped objects.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetUserDetailsResponse",
              "description": "a list of `GetUserDetailsResponse` objects containing the user details.\n\n* `setUsers`: A Set of `GetUserDetailsResponseUser` objects, representing the list of all users returned by the function. Each object in the set contains the details of a single user, including their username, email, and roles.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = PageRequest.of(0, 10);\nResponseEntity<GetUserDetailsResponse> response = userController.listAllUsers(pageable);\n",
              "description": "\nHere, we are creating a `Pageable` object with the constructor `PageRequest.of()` and passing it as an argument to the method `listAllUsers()`. We then pass this pageable object to the controller and retrieve the response from the API call. The response is of type `ResponseEntity<GetUserDetailsResponse>`, which contains a status code, headers, and the actual response body (`GetUserDetailsResponse`).\n\nWe can also check if the response has an OK status using its `hasStatusCode()` method, like so:\n"
            },
            "name": "listAllUsers",
            "location": {
              "start": 102,
              "insert": 92,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 91,
                "end": 101
              }
            },
            "item_type": "method",
            "length": 13,
            "docLength": 10
          },
          {
            "id": "dee6db8f-b509-f4a6-704e-e01ba2557f51",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "receives a user ID and returns a `ResponseEntity` object containing the details of the user with that ID, after mapping the user data to a `GetUserDetailsResponse` object using the `userApiMapper`.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "identifier of the user whose details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an HTTP status code of `OK` and a body containing the detailed user information.\n\n* The function returns an `Optional` instance of `ResponseEntity`, which represents a response entity with a status code and a body.\n* The status code is either `OK` (200) or `NOT_FOUND` (404), indicating whether the user details were successfully retrieved or not.\n* The body of the response entity contains a `GetUserDetailsResponse` object, which represents the user details returned by the function. This object has several attributes, including the user ID, name, email, and other details.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class UserController {\n  @Autowired private UserService userService;\n  @Autowired private UserApiMapper userApiMapper;\n\n  // ...\n\n  @GetMapping(\"/users/{userId}\")\n  public ResponseEntity<GetUserDetailsResponse> getUserDetails(@PathVariable String userId) {\n    return userService.getUserDetails(userId)\n        .map(user -> ResponseEntity.ok(userApiMapper.userDtoToGetUserDetailsResponse(user)))\n        .orElse(ResponseEntity.notFound().build());\n  }\n}\n",
              "description": "\nIn this example, the `userId` is passed to the `getUserDetails` method of the `UserService` class as a path variable and then mapped to an instance of `GetUserDetailsResponse`. This object is then returned as a response entity. If the user with the specified ID does not exist, `ResponseEntity.notFound()` is returned instead."
            },
            "name": "getUserDetails",
            "location": {
              "start": 126,
              "insert": 116,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 115,
                "end": 125
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 10
          },
          {
            "id": "4d7784b1-1102-8a8d-e34f-199b40e62c57",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "takes in a request object containing a forgot password request and determines whether to reset the user's password based on the action provided in the request. If successful, it returns an `ResponseEntity` with a status of `OK`. Otherwise, it returns an `ResponseEntity` with a status of `BAD_REQUEST`.",
            "params": [
              {
                "name": "action",
                "type_name": "String",
                "description": "password action to be performed, with possible values of `FORGOT` or `RESET`, which determine the corresponding logic to be executed within the function.",
                "complex_type": false
              },
              {
                "name": "forgotPasswordRequest",
                "type_name": "ForgotPasswordRequest",
                "description": "Forgot Password Request object that contains the user's email address and other details required for password resetting.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` object must be valid according to the provided validation rules.\n* `@RequestBody`: The `forgotPasswordRequest` object is passed in as a request body, indicating that it was sent from the client-side in the HTTP request.\n* `ForgotPasswordRequest`: This class represents the request for resetting a user's password. It contains properties such as:\n\t+ `username`: The username of the user requesting the password reset.\n\t+ `email`: The email address of the user requesting the password reset.\n\t+ `password`: The current password of the user, which will be reset.\n\t+ `newPassword`: The new password that the user wants to set as their password.\n\t+ `confirmNewPassword`: A confirmation of the new password entered by the user.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object representing a successful response with a status code of `OK`.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message in a web application. It contains information about the status of the request and any data that was sent or received during the execution of the function.\n* `ok`: This is a boolean value indicating whether the request was successful. If `result` is `true`, then the request was successful, and if it is `false`, then the request failed.\n* `build`: This is a method that returns the constructed response entity. It takes no arguments and simply returns the instance of the `ResponseEntity` class.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void resetPassword() {\n    ForgotPasswordRequest forgotPasswordRequest = new ForgotPasswordRequest();\n    forgotPasswordRequest.setEmail(\"user@example.com\");\n    \n    // Reset password for the user with email \"user@example.com\".\n    ResponseEntity<Void> response =\n      restTemplate.postForEntity(\"/users/password\", forgotPasswordRequest, Void.class);\n    \n    assertThat(response.getStatusCode(), is(HttpStatus.OK));\n  }\n",
              "description": ""
            },
            "name": "usersPasswordPost",
            "location": {
              "start": 151,
              "insert": 136,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 135,
                "end": 150
              }
            },
            "item_type": "method",
            "length": 16,
            "docLength": 15
          },
          {
            "id": "a60de972-8f4c-33a0-7441-378904f8d887",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "receives a request to list all members of all houses associated with a user, and returns a ResponseEntity containing a ListHouseMembersResponse with the member information.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user for whom the member list is being retrieved.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "request to list all members of all houses of a specific user, allowing for pagination and filtering of the results.\n\nThe `pageable` parameter is of type `Pageable`, which represents a page of data that can be retrieved from a database or API. The `Pageable` class defines several attributes that can be used to customize the pagination process, including:\n\n* `pageNumber`: The current page number being processed.\n* `pageSize`: The number of elements that will be returned in each page.\n* `totalElements`: The total number of elements in the dataset.\n* `totalPages`: The total number of pages that can be retrieved from the dataset.\n\nIn this function, we are using the `map` method to transform the deserialized `pageable` parameter into a `ResponseEntity` object. Specifically, we are calling the `map` method on the `houseService.listHouseMembersForHousesOfUserId` function, which returns a `List<HouseMember>` object. We then use the `map` method again to transform the `List<HouseMember>` object into a `ResponseEntity` object using the `map` method.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` containing a list of house members for the specified user.\n\n* `ResponseEntity`: This is an object that represents a response to a web request. It can have several properties, including `body`, `headers`, and `statusCode`.\n* `map`: This is a method that takes a function as an argument and applies it to the original output. In this case, the function maps the `houseMembers` list to a new response object.\n* `new ListHouseMembersResponse()`: This is a constructor for the `ListHouseMembersResponse` class. It creates a new instance of this class with an empty `members` field.\n* `map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))`: This line maps the `houseMembers` list to a new response object by calling the `ListHouseMembersResponse` constructor and passing it the `houseMembers` list as an argument.\n* `map(ResponseEntity::ok)`: This line maps the original output to a new response object with a status code of 200 (OK).\n* `orElse(ResponseEntity.notFound().build())`: This line provides an alternative output if the original call fails. It returns a response object with a status code of 404 (Not Found) and an empty body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String userId = \"1234\";\nPageable pageable = PageRequest.of(0, 10);\nResponseEntity<ListHouseMembersResponse> response = restTemplate.postForObject(\"/user/{userId}/houses/members\", pageable, ListHouseMembersResponse.class, userId);\n",
              "description": "\nThis code will retrieve a list of members for all houses associated with a user, maps them to a response entity, and returns it."
            },
            "name": "listAllHousemates",
            "location": {
              "start": 181,
              "insert": 168,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 167,
                "end": 180
              }
            },
            "item_type": "method",
            "length": 11,
            "docLength": 13
          },
          {
            "id": "e5be0e4c-9367-e4a1-4a42-ef015af9b45a",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "verifies an email address for a user by checking if it has been confirmed using the provided confirmation token. If the email is confirmed, a `ResponseEntity` with an `ok` status code is returned. Otherwise, a `ResponseEntity` with a `badRequest` status code is returned.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "unique identifier of the user whose email is being confirmed.",
                "complex_type": false
              },
              {
                "name": "emailConfirmToken",
                "type_name": "String",
                "description": "token sent to the user's email address for email confirmation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `ok` or `badRequest`, indicating whether the email confirmation was successful or not.\n\n* `ResponseEntity`: This is an object that represents a HTTP response entity, which contains information about the response status and body.\n* `ok`: This is a boolean property that indicates whether the email confirmation was successful or not. If it's true, then the email confirmation was successful, otherwise it failed.\n* `build()`: This is a method that creates a new `ResponseEntity` object with the given properties.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Confirm email of user with ID \"user1234\"\nResponseEntity<Void> response = confirmEmail(\"user1234\", \"token_string\");\nif (response.getStatusCode() == HttpStatus.OK) {\n    // Email confirmed successfully\n} else if (response.getStatusCode() == HttpStatus.BAD_REQUEST) {\n    // Email was not confirmed due to an error or the token was invalid\n}\n",
              "description": "\nThe `confirmEmail` method is used to confirm an email address of a user for the first time after registration, and it takes in two parameters: the `userId` as String and the `emailConfirmToken` as String. It returns a ResponseEntity of type Void that indicates whether the email was successfully confirmed or not.\nThe example provided above shows how to use the method by providing an userId \"user1234\" and an email confirm token \"token_string\" to confirm the email address of a user. The response is checked for either a successful confirmation or a failed confirmation, with the status code being used to determine which."
            },
            "name": "confirmEmail",
            "location": {
              "start": 207,
              "insert": 193,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 192,
                "end": 206
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 14
          },
          {
            "id": "0693d735-1b1c-59a8-bb47-c12d6e1b3d90",
            "ancestors": [
              "55b961c9-ea38-9d95-a34f-947f454ca00d"
            ],
            "type": "function",
            "description": "resends an email confirmation to a user's registered email address if the confirmation was previously unsuccessful.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "ID of a user for whom an email confirmation link needs to be resent.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `ResponseEntity` object representing a successful response with a status of `OK`.\n\n* `ResponseEntity`: This is the generic type of the returned response entity, which represents an HTTP response with a status code and a body.\n* `Void`: The type parameter of `ResponseEntity`, indicating that the response entity has no content.\n* `boolean emailConfirmResend`: This variable represents the result of the `resendEmailConfirm` method called within the function, which indicates whether the email confirmation was resent successfully or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate UserController userController;\n\n// ...\n\nuserController.resendConfirmEmailMail(\"userId\");\n",
              "description": "\nThis method uses the userService to resend the confirmation email of a user by calling the resendEmailConfirm method with the given userId as an argument and returning its response. If the email was successfully confirmed, a 200 OK status code is returned. Otherwise, a 400 BAD REQUEST status code is returned."
            },
            "name": "resendConfirmEmailMail",
            "location": {
              "start": 227,
              "insert": 217,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 216,
                "end": 226
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 10
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "An AmenityDto class with various constructors, builders, and data annotations. The class includes fields for id, amenityId, name, description, price, and communityId. These fields represent a unique identifier for each amenity, as well as attributes such as the name, description, cost, and community associated with each amenity.",
        "items": [
          {
            "id": "caf09c11-757e-4d8a-3844-5cd26f033145",
            "ancestors": [],
            "type": "function",
            "description": "represents an amenity with a unique identifier and various attributes such as name, description, price, and communityId using different constructors, builders, and data annotations.\nFields:\n\t- id (Long): in the AmenityDto class represents a unique identifier for each amenity.\n\t- amenityId (String): represents a unique identifier for an amenity within a specific community or neighborhood.\n\t- name (String): represents a string value representing the name of an amenity.\n\t- description (String): represents a brief summary or description of an amenity.\n\t- price (BigDecimal): represents a decimal value for the cost of an amenity.\n\t- communityId (String): in the AmenityDto class represents a unique identifier for a specific community or neighborhood associated with an amenity.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a unique identifier for each amenity."
              },
              {
                "name": "amenityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a unique identifier for an amenity within a specific community or neighborhood."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a string value representing the name of an amenity."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a brief summary or description of an amenity."
              },
              {
                "name": "price",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "represents a decimal value for the cost of an amenity."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "AmenityDto",
                "description": "in the AmenityDto class represents a unique identifier for a specific community or neighborhood associated with an amenity."
              }
            ],
            "name": "AmenityDto",
            "location": {
              "start": 41,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 40
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 15
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityDto` class representing a community object with an identifier, name, district, and set of administrators. The class uses Lombok's @AllArgsConstructor and @NoArgsConstructor annotations to provide default constructors for all or no constructor arguments, respectively. Additionally, the class is marked with `@Data` annotation to indicate that it is a data transfer object (DTO).",
        "items": [
          {
            "id": "b677d42c-8175-2487-904a-2c3278f69a8b",
            "ancestors": [],
            "type": "function",
            "description": "represents a community object containing an identifier and other relevant details such as name, district, and a set of user objects representing admins in the community.\nFields:\n\t- id (Long): represents an identifier for each CommunityDto instance in the system.\n\t- communityId (String): in the CommunityDto class represents a unique identifier for a community.\n\t- name (String): represents a string value identifying the name of a community.\n\t- district (String): represents a geographic area or district associated with the community object.\n\t- admins (Set<UserDto>): in the CommunityDto class contains a set of UserDtos representing community administrators.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents an identifier for each CommunityDto instance in the system."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class represents a unique identifier for a community."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a string value identifying the name of a community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "represents a geographic area or district associated with the community object."
              },
              {
                "name": "admins",
                "type_name": "Set<UserDto>",
                "value": null,
                "constant": false,
                "class_name": "CommunityDto",
                "description": "in the CommunityDto class contains a set of UserDtos representing community administrators."
              }
            ],
            "name": "CommunityDto",
            "location": {
              "start": 38,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 37
              }
            },
            "item_type": "class",
            "length": 10,
            "docLength": 14
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A `CommunityHouseDto` class with two attributes: `houseId` and `name`. The `AllArgsConstructor` annotation indicates that all constructor parameters should be provided, while the `NoArgsConstructor` annotation means that no default values will be assigned if constructor parameters are not provided. The `@Data` annotation is used to indicate that the class represents a data transfer object (DTO).",
        "items": [
          {
            "id": "a8562096-c651-f3bc-b745-9222244a79d4",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for a community house with an ID and name attributes.\nFields:\n\t- houseId (String): represents an identifier for a specific community house.\n\t- name (String): represents a string value representing the name of a house.\n\n",
            "fields": [
              {
                "name": "houseId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "represents an identifier for a specific community house."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CommunityHouseDto",
                "description": "represents a string value representing the name of a house."
              }
            ],
            "name": "CommunityHouseDto",
            "location": {
              "start": 30,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 29
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A class `PaymentDto` that represents a payment record with various details such as payment ID, charge amount, type, description, recurrence status, due date, and user and member information in a structured format. The class uses Lombok to generate getter, setter, and builder methods for its fields.",
        "items": [
          {
            "id": "1332cff3-6d42-0490-9d4b-c19a364c3db7",
            "ancestors": [],
            "type": "function",
            "description": "represents a structured format for storing payment records with various details such as payment ID, charge amount, type, description, recurrence status, due date, and user and member information.\nFields:\n\t- paymentId (String): in the PaymentDto class represents a unique identifier for a payment transaction.\n\t- charge (BigDecimal): in the PaymentDto class represents a monetary value, specifically a BigDecimal object, used to represent a payment amount.\n\t- type (String): in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\".\n\t- description (String): in the PaymentDto class represents a brief textual description of the payment.\n\t- recurring (boolean): in the PaymentDto class indicates whether a payment is a recurring one.\n\t- dueDate (String): represents a string value representing the date on which a payment is due or has to be made.\n\t- admin (UserDto): represents an entity of type `UserDto`, which contains information about the user who made the payment.\n\t- member (HouseMemberDto): in the PaymentDto class represents an association with another object, specifically a HouseMemberDto, containing information about a member of a household.\n\n",
            "fields": [
              {
                "name": "paymentId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a unique identifier for a payment transaction."
              },
              {
                "name": "charge",
                "type_name": "BigDecimal",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a monetary value, specifically a BigDecimal object, used to represent a payment amount."
              },
              {
                "name": "type",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a categorical label or category for the payment, such as \"rent\", \"utility bill\", or \"invoice\"."
              },
              {
                "name": "description",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents a brief textual description of the payment."
              },
              {
                "name": "recurring",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class indicates whether a payment is a recurring one."
              },
              {
                "name": "dueDate",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents a string value representing the date on which a payment is due or has to be made."
              },
              {
                "name": "admin",
                "type_name": "UserDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "represents an entity of type `UserDto`, which contains information about the user who made the payment."
              },
              {
                "name": "member",
                "type_name": "HouseMemberDto",
                "value": null,
                "constant": false,
                "class_name": "PaymentDto",
                "description": "in the PaymentDto class represents an association with another object, specifically a HouseMemberDto, containing information about a member of a household."
              }
            ],
            "name": "PaymentDto",
            "location": {
              "start": 46,
              "insert": 25,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 24,
                "end": 45
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 21
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A `UserDto` class that represents a data transfer object for a user. The class has fields for unique identifier, user ID, name, email, password, community IDs, and an email confirmed status. The class also includes builders, getters, and setters for each field.",
        "items": [
          {
            "id": "73a9cb5b-1a0f-57b2-d542-b08080daa403",
            "ancestors": [],
            "type": "function",
            "description": "represents a data transfer object for a user containing their unique identifier, user ID, name, email, password, community IDs, and an email confirmed status.\nFields:\n\t- id (Long): represents a unique identifier for a user in the system.\n\t- userId (String): represents a unique identifier for a user within the system.\n\t- name (String): in the UserDto class represents a string value containing the user's name.\n\t- email (String): in the UserDto class represents a string value containing the user's email address.\n\t- password (String): in the UserDto class stores a string value representing a user's password.\n\t- encryptedPassword (String): in the UserDto class contains an encrypted version of the user's password.\n\t- communityIds (Set<String>): represents a set of strings indicating the user's membership in various communities within the system.\n\t- emailConfirmed (boolean): in the UserDto class indicates whether a user's email address has been confirmed through a verification process.\n\n",
            "fields": [
              {
                "name": "id",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user in the system."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a unique identifier for a user within the system."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class represents a string value containing the user's email address."
              },
              {
                "name": "password",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class stores a string value representing a user's password."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class contains an encrypted version of the user's password."
              },
              {
                "name": "communityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "represents a set of strings indicating the user's membership in various communities within the system."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "UserDto",
                "description": "in the UserDto class indicates whether a user's email address has been confirmed through a verification process."
              }
            ],
            "name": "UserDto",
            "location": {
              "start": 44,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 13,
            "docLength": 20
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between CommunityDto and Community entities using Mapper functionality. The CommunityMapper interface provides a method communityDtoToCommunity that takes a CommunityDto as input and maps it to a corresponding Community entity.",
        "items": [
          {
            "id": "8a7afa33-30ec-5fab-f543-5ca23233aa4d",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between the CommunityDto and Community entities using Mapper functionality.",
            "name": "CommunityMapper",
            "location": {
              "start": 26,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 22,
                "end": 25
              }
            },
            "item_type": "interface",
            "length": 5,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between sets of HouseMembers and related data structures using Mapstruct. The mapper interface has three methods: `houseMemberSetToRestApiResponseHouseMemberSet`, `houseMemberDtoSetToHouseMemberSet`, and `houseMemberSetToRestApiResponseAddHouseMemberSet`. These methods map between sets of HouseMembers and their corresponding DTOs, as well as adding new HouseMembers to a response. The mapper interface does not include any information about the code author or licensing.",
        "items": [
          {
            "id": "213a4565-afed-2b8b-354a-c3f6c948f0e1",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mapping methods between sets of HouseMembers and related data structures.",
            "name": "HouseMemberMapper",
            "location": {
              "start": 29,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 10,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "An interface `PaymentMapper` that provides a mapping between `PaymentDto` and `Payment` objects using MapStruct. The interface includes two methods: `paymentDtoToPayment()` converts a `PaymentDto` to a `Payment` object, while `@Mapping(source = \"payment.dueDate\", target = \"dueDate\")` specifies the mapping of the `dueDate` field from the DTO to the entity object.",
        "items": [
          {
            "id": "a96bf02c-9a6c-11b1-a447-d3150d227a7a",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between a DTO (PaymentDto) and an entity object (Payment), including mapping date fields from one format to another.",
            "name": "PaymentMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 7,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides conversions between `UserDto` objects and `User` entities. The interface includes two methods: `userDtoToUser` converts a `UserDto` object to a `User` entity, while `userToUserDto` converts a `User` entity to a `UserDto` object. These methods are used to map between the DTO and entity objects for user data.",
        "items": [
          {
            "id": "639e6fe8-a110-8a9c-0e4d-14b31785e1e0",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for user data.",
            "name": "UserMapper",
            "location": {
              "start": 29,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 28
              }
            },
            "item_type": "interface",
            "length": 6,
            "docLength": 3
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "A controller advice class called `FileUploadExceptionAdvice` that handles exceptions related to file uploads. The class uses Spring's `@ControllerAdvice` annotation and provides custom error responses for two types of exceptions: `MaxUploadSizeExceededException` and `IOException`. For `MaxUploadSizeExceededException`, the class returns a response entity with an error message for the user, while for `IOException`, it returns a response entity with a conflict status code and a custom message in the body.",
        "items": [
          {
            "id": "72995d6d-9e2c-a191-ff4a-dc34f0a3128e",
            "ancestors": [],
            "type": "function",
            "description": "processes requests that exceed maximum file size limits by returning custom error responses with descriptive messages. It also handles IOExceptions by returning response entities with custom messages indicating something went wrong with document saving.",
            "name": "FileUploadExceptionAdvice",
            "location": {
              "start": 33,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 26,
                "end": 32
              }
            },
            "item_type": "class",
            "length": 63,
            "docLength": 6
          },
          {
            "id": "e03b0f29-0e7a-9488-064a-368a04b42287",
            "ancestors": [
              "72995d6d-9e2c-a191-ff4a-dc34f0a3128e"
            ],
            "type": "function",
            "description": "generates a response entity with an error message when a file size exceeds the limit.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException object passed to the function as a parameter.\n\n* `exc`: A `MaxUploadSizeExceededException` object containing information about the exceeding file size limit.\n\nThe response entity is created with a HTTP status code `PAYLOAD_TOO_LARGE`, and a body containing a map with a single entry: `message`. The value of this entry is set to \"File size exceeds limit!\".",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a response entity with a status code of `PAYLOAD_TOO_LARGE` and a body containing a message indicating that the file size exceeds the limit.\n\n* `HttpStatus`: The status code of the response entity, which is set to `PAYLOAD_TOO_LARGE`.\n* `body`: A map containing a single key-value pair, where the key is `\"message\"` and the value is a string representing a message indicating that the file size exceeds the limit.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\npublic ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n        put(\"message\", \"File size exceeds limit!\");\n    }});\n}\n",
              "description": "\nThis code handles an exception of type MaxUploadSizeExceededException by returning a response entity with a status code of HttpStatus.PAYLOAD_TOO_LARGE and a message that the file size has exceeded the limit."
            },
            "name": "handleMaxSizeException",
            "location": {
              "start": 55,
              "insert": 36,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 35,
                "end": 54
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 19
          },
          {
            "id": "50feaa23-d71a-bbb4-3047-2f8e5710666b",
            "ancestors": [
              "72995d6d-9e2c-a191-ff4a-dc34f0a3128e"
            ],
            "type": "function",
            "description": "handles  an IOException exception by returning a ResponseEntity with a CONFLICT status code and a message in a HashMap.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` that is to be handled by the `@ExceptionHandler` annotation.\n\n* `MaxUploadSizeExceededException`: The exception class representing an issue with document saving due to exceeding the maximum upload size limit.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` object with a status code of `HttpStatus.CONFLICT` and a body containing a map with a single entry containing a message.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that can be used to handle HTTP responses.\n* `status`: This property is an instance of the `HttpStatus` class, which represents the HTTP status code of the response. In this case, the status code is `CONFLICT`.\n* `body`: This property is a map of key-value pairs, where each key is a string and each value is also a string. In this case, the map contains one entry with the key \"message\" and the value \"Something went wrong with document saving!\".",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(IOException.class)\npublic ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n        put(\"message\", \"Something go wrong with document saving!\");\n    }});\n}\n",
              "description": ""
            },
            "name": "handleIOException",
            "location": {
              "start": 89,
              "insert": 62,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 61,
                "end": 88
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 27
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An exception class called AuthenticationException that provides a customized response status for unauthorized requests with a predefined error message. The class uses Lombok's @Slf4j annotation to enable logging and Spring's @ResponseStatus annotation to specify the HTTP status code. The class also has a constructor that initializes the superclass with the error message.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6205d6b6-1528-e6b4-eb4c-916b9bc8c967",
            "ancestors": [],
            "type": "function",
            "description": "provides a customized response status for unauthorized requests with a predefined error message.\nFields:\n\t- ERROR_MESSAGE (String): in the AuthenticationException class represents a predefined message indicating that the user's credentials are incorrect or they do not exist.\n\n",
            "fields": [
              {
                "name": "ERROR_MESSAGE",
                "type_name": "String",
                "value": "\"Credentials are incorrect or user does not exists\"",
                "constant": true,
                "class_name": "AuthenticationException",
                "description": "in the AuthenticationException class represents a predefined message indicating that the user's credentials are incorrect or they do not exist."
              }
            ],
            "name": "AuthenticationException",
            "location": {
              "start": 14,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 6,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 8,
            "docLength": 7
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "An exception class called CredentialsIncorrectException that extends AuthenticationException. The class has a constructor that logs an error message using Lombok's @Slf4j annotation when incorrect credentials are attempted for a specified user ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "860d1bb4-609e-9f9f-ef4b-a4256058ae68",
            "ancestors": [],
            "type": "function",
            "description": "is a sub-class of AuthenticationException with an additional constructor to log error messages for incorrect user credentials using Lombok's @Slf4j annotation.\n",
            "fields": [],
            "name": "CredentialsIncorrectException",
            "location": {
              "start": 10,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 9
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "An exception class called UserNotFoundException that inherits from AuthenticationException and adds additional logging information when a user cannot be found using their email address. The class uses Lombok's @Slf4j annotation to enable slf4j logging.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "8d163bf1-b6cb-9793-5443-cb90bf19e829",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and adds additional logging information when a user cannot be found using their email address through the log.info method.\n",
            "fields": [],
            "name": "UserNotFoundException",
            "location": {
              "start": 9,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 4,
                "end": 8
              }
            },
            "item_type": "class",
            "length": 7,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityApiMapper` which provides a set of mapping methods between various data types related to amenities. The interface includes four methods: `amenityToAmenityDetailsResponse`, `amenitiesSetToAmenityDetailsResponseSet`, `amenityDtoToAmenity`, and `amenityToAmenityDto`. These methods convert objects of different classes, such as `Amenity`, `GetAmenityDetailsResponse`, `AmenityDto`, and `UpdateAmenityRequest`, into corresponding objects of other classes. The interface uses the `MapStruct` package for mapping.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "cf91e822-885b-9fa0-5247-4d17818af993",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of mapping methods between data types related to amenities, including converting from an Amenity object to a GetAmenityDetailsResponse object and vice versa.",
            "name": "AmenityApiMapper",
            "location": {
              "start": 31,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 25,
                "end": 30
              }
            },
            "item_type": "interface",
            "length": 13,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "A mapping between various data structures related to communities in a MyHome platform, including creating and retrieving community details, administrators, houses, and house details using Mapstruct package. The code provides four main mappings: creating a community request from a CreateCommunityRequest to a CommunityDto; converting a community to a REST API response community; setting a community set to a REST API response community set; and mapping a user to a response admin in a ListCommunityAdminsResponseCommunityAdmin.",
        "items": [
          {
            "id": "57d726b7-25d7-868c-d94b-bef46feb1827",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures related to communities in a MyHome platform, including creating and retrieving community details, administrators, houses, and house details through different methods and mappings.",
            "name": "CommunityApiMapper",
            "location": {
              "start": 38,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 37
              }
            },
            "item_type": "interface",
            "length": 24,
            "docLength": 5
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that provides two methods for transforming data between `CommunityHouse` objects and `GetHouseDetailsResponseCommunityHouse` sets. The `communityHouseSetToRestApiResponseCommunityHouseSet()` method maps a `Set<CommunityHouse>` to a `Set<GetHouseDetailsResponseCommunityHouse>`, while the `communityHouseToRestApiResponseCommunityHouse()` method maps a single `CommunityHouse` object to a `GetHouseDetailsResponseCommunityHouse`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "56564001-2283-18b9-ee4b-302d7b91c9a5",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapper for transforming data between CommunityHouse objects and RestApiResponseCommunityHouse sets.",
            "name": "HouseApiMapper",
            "location": {
              "start": 28,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 27
              }
            },
            "item_type": "interface",
            "length": 8,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "A set of enrichment functions for a schedule payment request. It includes functions for getting user details, creating an enriched schedule payment request, and transforming an enriched schedule payment request into other objects such as a HouseMemberDto or UserDto. The code uses packages such as Java 8's Optional and Collectors to streamline the creation of these enriched objects.",
        "items": [
          {
            "id": "e2393e1b-27cf-8a9a-2d45-830786f995dd",
            "ancestors": [],
            "type": "function",
            "description": "provides methods to transform and map between different entities and DTOs in a payment schedule management system, including schedules, payments, members, and admins.",
            "name": "SchedulePaymentApiMapper",
            "location": {
              "start": 46,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 40,
                "end": 45
              }
            },
            "item_type": "interface",
            "length": 290,
            "docLength": 5
          },
          {
            "id": "639cbd78-bc65-d1a9-ae46-348bd648d065",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "converts a given `adminId` string to a `UserDto` object representing an admin user with the provided ID.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "unique identifier of an administrator, which is used to build a `UserDto` object containing information about the administrator.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object representing an admin user with the specified `adminId`.\n\n1. `userId`: This attribute holds the value of the `adminId` parameter passed to the function as an argument. It is used to construct a `UserDto` object with a unique user ID.\n2. `build()`: This method is called on the `UserDto.builder()` object to create a new instance of the `UserDto` class with the specified properties. The resulting object contains all the necessary attributes for an admin entity, such as the user ID and other relevant information.",
              "complex_type": true
            },
            "name": "adminIdToAdminDto",
            "location": {
              "start": 60,
              "insert": 49,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 48,
                "end": 59
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 11
          },
          {
            "id": "059e7e31-95f4-9695-fb40-adebf578caa6",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "maps a `memberId` string to an instance of `HouseMemberDto`, which contains the `memberId` field populated with the input value.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of a member in the `HouseMemberDto` object constructed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the input `memberId`.\n\n* memberId: A string attribute representing the Member ID.",
              "complex_type": true
            },
            "name": "memberIdToMemberDto",
            "location": {
              "start": 79,
              "insert": 67,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 66,
                "end": 78
              }
            },
            "item_type": "method",
            "length": 5,
            "docLength": 12
          },
          {
            "id": "26210ef5-45a8-cbaa-c245-349414ad86f5",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "maps a `UserDto` object to its corresponding `UserId`.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "User object containing information about a user, which is used to retrieve the user's ID.\n\n* `getUserId()` returns the user ID of the admin.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the user ID of the specified `UserDto` object.",
              "complex_type": false
            },
            "name": "adminToAdminId",
            "location": {
              "start": 95,
              "insert": 85,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 84,
                "end": 94
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 10
          },
          {
            "id": "86800875-8c1f-8e9d-c346-8f0616531cbb",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "maps a `HouseMemberDto` object to its corresponding `MemberId`.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "House Member object containing information about a member of a house, which is passed to the `memberToMemberId()` function to retrieve the member's ID.\n\n* `getMemberId()`: returns the member ID of the House Member entity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the member ID of the input `HouseMemberDto` object.",
              "complex_type": false
            },
            "name": "memberToMemberId",
            "location": {
              "start": 110,
              "insert": 100,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 99,
                "end": 109
              }
            },
            "item_type": "method",
            "length": 4,
            "docLength": 10
          },
          {
            "id": "2d01983d-6dc4-2fbe-1840-cbcc9cede0b1",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "maps the user details of a payment request to an admin and another member, using the `getEnrichedRequestMember` and `getEnrichedRequestAdmin` methods.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto object, which is being built using the `@MappingTarget` annotation and is used to map the user details of the payment request to administrator and member.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a class annotated with `@Builder`, which provides a way to build instances of the `PaymentDto` class using a fluent interface.\n* `EnrichedSchedulePaymentRequest`: This is the input parameter for the function, which contains enriched user details of the payment request. It has various attributes, including `member` and `admin`, which are used to populate the corresponding fields in the `paymentDto`.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "payment request with user details enriched and mapped to admin and house member fields in the `PaymentDto` object.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` type, which is used to create instances of the `PaymentDto` class.\n* `EnrichedSchedulePaymentRequest`: This is the input object that contains various properties and attributes related to payment schedules. These properties may include information about the member or administrator associated with the payment request.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n",
              "description": "\nHere, we are using the AfterMapping method to convert the user details of the payment request to admin, and same with house member by passing in the Builder instance of the class if that class is annotated with @Builder.    In this case, the builder instance is for the PaymentDto class which is annotated with @Builder.     We use the setUserFields method to set the user fields from the enrichedSchedulePaymentRequest into the paymentDto.builder.    \npaymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest)); \npaymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n"
            },
            "name": "setUserFields",
            "location": {
              "start": 154,
              "insert": 124,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 123,
                "end": 153
              }
            },
            "item_type": "method",
            "length": 7,
            "docLength": 30
          },
          {
            "id": "07368d2a-6e69-e3b9-da42-52fce8920202",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "enriches a `SchedulePaymentRequest` object with additional information from the user and community, including their IDs, names, emails, and encrypted passwords, as well as the community ID.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request to be enriched, providing its type, description, recurring status, charge amount, due date, and other relevant details.\n\n* `type`: The type of payment request (e.g., \"Rent\", \"Utilities\", etc.)\n* `description`: A brief description of the payment request\n* `isRecurring`: Whether the payment request is recurring or not\n* `charge`: The amount of the payment request\n* `dueDate`: The due date of the payment request\n* `adminId`: The ID of the admin who created/modified the payment request\n* `adminName`: The name of the admin who created/modified the payment request\n* `adminEmail`: The email address of the admin who created/modified the payment request\n* `encryptedPassword`: The encrypted password of the admin who created/modified the payment request\n* `communityIds`: A set of community IDs associated with the payment request\n* `memberId`: The ID of the member for whom the payment request is made\n* `houseMemberDocument`: An optional document filename containing additional information about the member's household (if any)\n* `name`: The name of the member\n* `communityHouse`: An optional reference to the member's community house (if any)",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "user who is performing the action of creating the schedule payment request, and provides information about their role and identity.\n\n* `getCommunities()`: Returns a stream of `Community` objects representing the communities that the admin is a part of.\n* `map()`: Maps each `Community` object to its community ID using the `map()` method.\n* `collect()`: Collects the mapped community IDs into a set using the `collect()` method.\n* `getId()`, `getName()`, `getEmail()`, and `getEncryptedPassword()`: Returns the admin's ID, name, email, and encrypted password, respectively.\n* `getAdminId()` and `admin.getId()`: Returns the admin's ID.\n* `getDueDate()` and `request.getDueDate()`: Returns the due date of the payment request.\n* `getCharge()` and `request.getCharge()`: Returns the charge amount for the payment request.\n* `getType()` and `request.getType()`: Returns the type of the payment request (e.g., \"monthly\", \"one-time\").\n* `isRecurring()` and `request.isRecurring()`: Returns a boolean indicating whether the payment request is recurring or not.\n* `getHouseMemberDocument()` and `member.getHouseMemberDocument()`: Returns the House Member document of the member, if it exists.",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object that provides additional information about the member whose schedule payment request is being enriched, including their member ID, house ID, and community ID.\n\n* `getMemberId()`: Returns the ID of the member.\n* `getId()`: Returns the ID of the member.\n* `getHouseMemberDocument()`: Returns the House Member Document of the member, or null if not available.\n* `getName()`: Returns the name of the member.\n* `getCommunityHouse()`: Returns the Community House of the member, or null if not available.\n\nThese properties are used in the construction of the enriched `SchedulePaymentRequest` object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object containing additional fields.\n\n* `type`: The type of payment request (e.g. \"rent\", \"utility\")\n* `description`: A brief description of the payment request\n* `recurring`: Whether the payment request is recurring or not\n* `charge`: The amount of the payment request\n* `dueDate`: The due date of the payment request\n* `adminId`: The ID of the admin who created the payment request\n* `adminName`: The name of the admin who created the payment request\n* `adminEmail`: The email address of the admin who created the payment request\n* `encryptedPassword`: The encrypted password of the admin who created the payment request\n* `communityIds`: A set of community IDs associated with the payment request\n* `memberId`: The ID of the member for whom the payment request was made\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the payment request (if available)\n* `memberName`: The name of the member for whom the payment request was made\n* `communityHouseId`: The ID of the community house associated with the payment request (if available)",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "User admin = new User(\"adminId\", \"Admin Name\", \"admin@email.com\", \"encryptedPassword\");\nHouseMember member = new HouseMember(\"memberId\", 123, \"House Member Name\");\nadmin.setCommunities(Set.of(new Community(\"communityId\")));\nSchedulePaymentRequest request = new SchedulePaymentRequest(\"one-time\", \"description\", true, 5000, LocalDate.now(), admin.getId(), member.getId());\nEnrichedSchedulePaymentRequest enrichedRequest = service.enrichSchedulePaymentRequest(request, admin, member);\n",
              "description": "\nThe example inputs are as follows: \n1. request is a SchedulePaymentRequest object with the fields populated for all fields except id, which has an empty string set. 2. admin is a User object containing only an ID field and all other fields are null or empty strings, except for a community list containing a Community object with an empty string ID. 3. member is a HouseMember object containing only the following fields: \"memberId\" = 123, \"name\" = \"House Member Name\". Other fields are null or empty strings.\nThe example code should produce the output EnrichedSchedulePaymentRequest object with all input fields populated and the community list set as a single element containing a Community object with an ID of \"communityId\"."
            },
            "name": "enrichSchedulePaymentRequest",
            "location": {
              "start": 250,
              "insert": 180,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 179,
                "end": 249
              }
            },
            "item_type": "method",
            "length": 24,
            "docLength": 70
          },
          {
            "id": "5c11cf44-4770-a2b2-314c-f37b13ebffc8",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "creates a `UserDto` object representing the administrator associated with an enriched schedule payment request. It populates the user details using the provided enriched schedule payment request.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative entity to which the request belongs, providing the admin ID, name, email, and encrypted password for further processing.\n\n* `userId`: The user ID of the administrator who requested the enriched payment schedule.\n* `id`: The ID of the administrator's entity in the system.\n* `name`: The name of the administrator.\n* `email`: The email address of the administrator.\n* `encryptedPassword`: The encrypted password for the administrator.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the administrator's details.\n\n* `userId`: The ID of the admin user associated with the enriched schedule payment request.\n* `id`: The ID of the enriched schedule payment request.\n* `name`: The name of the admin user associated with the enriched schedule payment request.\n* `email`: The email address of the admin user associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the admin user associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\nenrichedSchedulePaymentRequest.setAdminId(1);\nenrichedSchedulePaymentRequest.setAdminEntityId(2);\nenrichedSchedulePaymentRequest.setAdminName(\"Test Admin\");\nenrichedSchedulePaymentRequest.setAdminEmail(\"test@admin.com\");\nenrichedSchedulePaymentRequest.setAdminEncryptedPassword(\"test123456\");\n\nUserDto enrichedAdmin = getEnrichedRequestAdmin(enrichedSchedulePaymentRequest);\n",
              "description": "\nIn this example, we create a new `EnrichedSchedulePaymentRequest` object with the provided parameters. We then call the method `getEnrichedRequestAdmin` passing in this newly created `EnrichedSchedulePaymentRequest` object as an argument. Finally, we assign the returned value to a variable `enrichedAdmin` and print it out.\n\nNote that, while this is a possible way to use this method, there could be other ways depending on how exactly you are using the class and what the variables are actually representing."
            },
            "name": "getEnrichedRequestAdmin",
            "location": {
              "start": 300,
              "insert": 275,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 274,
                "end": 299
              }
            },
            "item_type": "method",
            "length": 9,
            "docLength": 25
          },
          {
            "id": "bd12ffc4-ff68-449c-cb41-3feda7507167",
            "ancestors": [
              "e2393e1b-27cf-8a9a-2d45-830786f995dd"
            ],
            "type": "function",
            "description": "transforms an `EnrichedSchedulePaymentRequest` object into a `HouseMemberDto` object, including the member's ID, name, and entity ID.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "House Member's payment request, which provides additional information about the member and their payment, such as their entity ID and member ID, as well as their name.\n\n* `getMemberEntityId`: an integer representing the entity ID of the house member associated with the payment request.\n* `getMemberId`: a string representing the ID of the member in the system.\n* `getHouseMemberName`: a string representing the name of the house member associated with the payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the member's ID, name, and member ID from the input `EnrichedSchedulePaymentRequest`.\n\n* `id`: This attribute represents the unique identifier for the member entity associated with the enriched schedule payment request.\n* `memberId`: This attribute contains the ID of the member associated with the enriched schedule payment request.\n* `name`: This attribute holds the name of the house member associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest();\nHouseMemberDto memberDto = getEnrichedRequestMember(enrichedSchedulePaymentRequest);\nSystem.out.println(\"ID: \" + memberDto.getId());\n",
              "description": "\nIn this example, we first create an instance of the `EnrichedSchedulePaymentRequest` class. We then pass this object to the method getEnrichedRequestMember which returns a `HouseMemberDto` instance representing the House Member entity details. We extract the ID and member ID from the returned `HouseMemberDto` and print them out on the console.\n\nNote that the output of this code will be an empty string, since we have not populated any values in the input object. In order to get actual values, we would need to provide a non-empty value for the member ID and entity ID of the `HouseMemberDto` object we create before passing it to the method.\n"
            },
            "name": "getEnrichedRequestMember",
            "location": {
              "start": 329,
              "insert": 310,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 309,
                "end": 328
              }
            },
            "item_type": "method",
            "length": 6,
            "docLength": 19
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` using Mapstruct, a dependency injection framework for Java. The interface provides automatic conversions between Java domain models and RESTful API responses. It defines four methods: `createUserRequestToUserDto`, `userSetToRestApiResponseUserSet`, `userDtoToCreateUserResponse`, and `userDtoToGetUserDetailsResponse`. These methods convert objects of type `CreateUserRequest`, `User`, `Set<User>`, and `UserDto` into corresponding objects of type `UserDto`, `GetUserDetailsResponseUser`, `CreateUserResponse`, and `Set<GetUserDetailsResponseUser>`.",
        "items": [
          {
            "id": "98b65a90-2336-b98c-c44a-3d25a6538f68",
            "ancestors": [],
            "type": "function",
            "description": "provides automatic conversions between Java domain models and RESTful API responses using Mapstruct's functionality.",
            "name": "UserApiMapper",
            "location": {
              "start": 34,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 33
              }
            },
            "item_type": "interface",
            "length": 12,
            "docLength": 4
          }
        ]
      }
    }
  },
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An enriched version of the `SchedulePaymentRequest` class with additional fields to provide more information about the admin and house member associated with the payment request. The new class, `EnrichedSchedulePaymentRequest`, includes fields for the admin entity ID, name, email, encrypted password, community IDs, member entity ID, document name, and house member name and ID. These fields allow for mapping to the corresponding user and house member fields in the payment system, making it possible to avoid specifying all the extra details in the request.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.request.EnrichedSchedulePaymentRequest Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.request.EnrichedSchedulePaymentRequest</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.request.</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">EnrichedSchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"164,-85 21,-85 21,-66 164,-66 164,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "3e2fa2ed-d73a-9a9b-c547-6b0b2af3087b",
            "ancestors": [],
            "type": "function",
            "description": "extends SchedulePaymentRequest with additional fields for admin and house member details to facilitate successful mapping to user and house member fields in payment.\nFields:\n\t- adminEntityId (Long): represents an identifier for an administrative entity associated with the payment request.\n\t- adminName (String): represents the name of an administrative user associated with the payment request.\n\t- adminEmail (String): represents an email address associated with an administrative entity in the system.\n\t- adminEncryptedPassword (String): represents an encrypted password for an administrative user associated with the payment request.\n\t- adminCommunityIds (Set<String>): represents a set of strings identifying communities to which an administrative user associated with the payment request belongs.\n\t- memberEntityId (Long): in the EnrichedSchedulePaymentRequest class represents an identifier for a member entity associated with the payment request.\n\t- houseMemberDocumentName (String): represents the name of a document used to identify the member in the house.\n\t- houseMemberName (String): represents the name of a member of a house associated with the payment request.\n\t- houseMemberHouseID (String): represents a unique identifier of the member's house within the system.\n\n",
            "fields": [
              {
                "name": "adminEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an identifier for an administrative entity associated with the payment request."
              },
              {
                "name": "adminName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of an administrative user associated with the payment request."
              },
              {
                "name": "adminEmail",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an email address associated with an administrative entity in the system."
              },
              {
                "name": "adminEncryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents an encrypted password for an administrative user associated with the payment request."
              },
              {
                "name": "adminCommunityIds",
                "type_name": "Set<String>",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents a set of strings identifying communities to which an administrative user associated with the payment request belongs."
              },
              {
                "name": "memberEntityId",
                "type_name": "Long",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "in the EnrichedSchedulePaymentRequest class represents an identifier for a member entity associated with the payment request."
              },
              {
                "name": "houseMemberDocumentName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of a document used to identify the member in the house."
              },
              {
                "name": "houseMemberName",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents the name of a member of a house associated with the payment request."
              },
              {
                "name": "houseMemberHouseID",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "EnrichedSchedulePaymentRequest",
                "description": "represents a unique identifier of the member's house within the system."
              }
            ],
            "name": "EnrichedSchedulePaymentRequest",
            "location": {
              "start": 57,
              "insert": 33,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 32,
                "end": 56
              }
            },
            "item_type": "class",
            "length": 34,
            "docLength": 24
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A class `ForgotPasswordRequest` that represents a request for a password reset link. The class has fields for email, token, and newPassword, which are used for validation and resetting the user's account password. The class uses Lombok, a dependency injection framework, to automatically generate constructors and getters/setters for the fields.",
        "items": [
          {
            "id": "0dd8cd99-df62-7ba0-5146-a7ef29351c0f",
            "ancestors": [],
            "type": "function",
            "description": "represents a request for a password reset link with email and token fields and newPassword field, intended to be used by users to reset their account passwords.\nFields:\n\t- email (String): in the ForgotPasswordRequest class is of type String and represents a valid email address for the purpose of sending a password reset token to the user.\n\t- token (String): in the `ForgotPasswordRequest` class represents a unique validation token generated by the system for the user's forgotten password request.\n\t- newPassword (String): represents the password entered by the user for resetting their account.\n\n",
            "fields": [
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the ForgotPasswordRequest class is of type String and represents a valid email address for the purpose of sending a password reset token to the user."
              },
              {
                "name": "token",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "in the `ForgotPasswordRequest` class represents a unique validation token generated by the system for the user's forgotten password request."
              },
              {
                "name": "newPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "ForgotPasswordRequest",
                "description": "represents the password entered by the user for resetting their account."
              }
            ],
            "name": "ForgotPasswordRequest",
            "location": {
              "start": 20,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 8,
                "end": 19
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A `CreateUserResponse` model class that represents a response to a create user request. The class has three fields: `userId`, `name`, and `email`. These fields correspond to the user identifier, name, and email address associated with the created user. The `AllArgsConstructor`, `NoArgsConstructor`, `Getter`, and `Setter` annotations indicate that the class should be constructed using reflection, and that getters and setters should be generated for each field.",
        "items": [
          {
            "id": "494b709e-06c5-f59b-1b42-aa6b6db87d72",
            "ancestors": [],
            "type": "function",
            "description": "is a response model for creating a user, with three fields representing an identifier, name, and email address associated with the user created in response to a create user request.\nFields:\n\t- userId (String): represents an identifier for a created user in response to a create user request.\n\t- name (String): in the CreateUserResponse class represents a string value containing the user's name.\n\t- email (String): represents an email address associated with the user created in response to the create user request.\n\n",
            "fields": [
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents an identifier for a created user in response to a create user request."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "in the CreateUserResponse class represents a string value containing the user's name."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "CreateUserResponse",
                "description": "represents an email address associated with the user created in response to the create user request."
              }
            ],
            "name": "CreateUserResponse",
            "location": {
              "start": 41,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 29,
                "end": 40
              }
            },
            "item_type": "class",
            "length": 9,
            "docLength": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that encapsulates an instance of the `CommunityHouseDto` class, which contains detailed information about a specific house. The `HouseDetailResponse` class is marked with several annotations, including `@NoArgsConstructor`, `@AllArgsConstructor`, and `@Data`, which indicate various aspects of how the class should be constructed and used.",
        "items": [
          {
            "id": "b1e4b2b9-ae29-1887-5442-a5a8e4df6267",
            "ancestors": [],
            "type": "function",
            "description": "encapsulates an instance of the CommunityHouseDto class to store and retrieve house details.\nFields:\n\t- house (CommunityHouseDto): encapsulates an instance of CommunityHouseDto, which stores detailed information about a specific house.\n\n",
            "fields": [
              {
                "name": "house",
                "type_name": "CommunityHouseDto",
                "value": null,
                "constant": false,
                "class_name": "HouseDetailResponse",
                "description": "encapsulates an instance of CommunityHouseDto, which stores detailed information about a specific house."
              }
            ],
            "name": "HouseDetailResponse",
            "location": {
              "start": 31,
              "insert": 24,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 23,
                "end": 30
              }
            },
            "item_type": "class",
            "length": 6,
            "docLength": 7
          }
        ]
      }
    }
  }
]