{"name":"CommunityAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/filters/CommunityAuthorizationFilter.java","content":{"structured":{"description":"a custom authentication filter called `CommunityAuthorizationFilter` that extends `BasicAuthenticationFilter`. The filter checks if the user is an admin of a community based on a UUID pattern in the request URL, and if not, returns a FORBIDDEN status. If the user is an admin, it allows the request to pass through to the next filter in the chain. The code uses packages such as `org.springframework.security` and `java.util.regex`.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.filters.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.filters.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.filters.</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"151.5,-85 12.5,-85 12.5,-66 151.5,-66 151.5,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"ee22a823-864a-8496-924c-7be04f8073c9","ancestors":[],"type":"function","description":"is a custom authentication filter that restricts access to community amenities based on user identity and community administration roles. The filter checks if the user is a community admin by querying the community service, and if not, it sets the status code to FORBIDDEN. If the user is a community admin, the filter allows the request to proceed to the next filter in the chain.","name":"CommunityAuthorizationFilter","code":"public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n  private final CommunityService communityService;\n  private static final String UUID_PATTERN =\n      \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =\n      Pattern.compile(\"/communities/\" + UUID_PATTERN + \"/amenities\");\n\n  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n      CommunityService communityService) {\n    super(authenticationManager);\n    this.communityService = communityService;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n\n  private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }\n}","location":{"start":17,"insert":17,"offset":" ","indent":0,"comment":null},"item_type":"class","length":40},{"id":"b0f40406-5617-c58c-724f-4a4b198d0bac","ancestors":["ee22a823-864a-8496-924c-7be04f8073c9"],"type":"function","description":"filters HTTP requests based on a pattern and checks if the user is an admin of a specific community. If not, it responds with a forbidden status code, otherwise, it passes the request to the next filter in the chain.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that is being processed by the filter.\n\n* `request.getRequestURI()` returns the request URL, which is matched against a pattern to determine if it belongs to an amenity request.\n* `urlMatcher.find()` returns `true` if the pattern matches, and `false` otherwise.\n* `isUserCommunityAdmin(request)` checks whether the current user is an admin for the community, and if not, sets the response status code to `HttpServletResponse.SC_FORBIDDEN`.\n* `super.doFilterInternal(request, response, chain)` calls the parent method to handle the request.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that is being filtered by the current code snippet.\n\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which contains information about the HTTP request and response headers and status code.\n* `FilterChain chain`: This is a chain of filters that can be used to modify or handle the incoming request.\n* `HttpServletRequest request`: This is an instance of the `HttpServletRequest` class, which contains information about the incoming HTTP request.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"next filter in the chain that should be executed after the current filter is applied to the request.\n\n* `HttpServletRequest request`: The current HTTP request being processed by the filter.\n* `HttpServletResponse response`: The current HTTP response being generated by the filter.\n* `FilterChain chain`: An instance of the `FilterChain` interface, which represents a sequence of filters that can be applied to the current request.\n\nThe `chain` object has various attributes and methods that can be used to manipulate the flow of the request through the filter chain. For example, the `doFilterInternal` method can call the `doFilter` method of the next filter in the chain, or it can stop the processing of the current request by returning early. The `chain` object also provides a way to access the previous filters in the chain, which can be useful for storing state between filter iterations.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n        response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n}\n","description":"\nIn this example, the method is called as part of a filter chain. The request and response are used to determine if the user has permission to access the requested URL. If they do not have permission, the method sets the status code to SC_FORBIDDEN (403) and returns without calling super.doFilterInternal()."},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"f393abfc-834f-b78e-d643-e852bfa7a65a","ancestors":["ee22a823-864a-8496-924c-7be04f8073c9"],"type":"function","description":"determines if a user is an admin of a community by querying the community service and checking if the user's ID exists in the list of admins for that community.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object containing information about the current user and their session, which is used to determine if the user is a community admin.\n\n* `request.getRequestURI()`: This method returns the request URI, which is the path portion of the HTTP request. In this case, it splits into two parts: the scheme and the authority.\n* `(String) SecurityContextHolder.getContext().getAuthentication().getPrincipal()`: This line retrieves the currently authenticated user ID from the SecurityContextHolder, which stores the security context for the current thread. The `getPrincipal()` method of the Authentication object returns the user principal, which represents the user who is being authenticated.\n* `request.getParameter(â€œuserId\")`: This line retrieves a parameter from the HTTP request called \"userId\".\n* `communityId = request.getRequestURI().split(\"/\")[2]`: This line splits the request URI into its scheme and authority components, and extracts the second component (the authority) as the community ID.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the current user is an admin of a specific community.\n\n* `SecurityContextHolder`: This is an instance of `SecurityContextHolder`, which is used to store and retrieve authentication information in a Spring Security context.\n* `getContext()`: This method returns the current security context, which contains information about the currently authenticated user and any other security-related contextual information.\n* `getAuthentication()`: This method returns the current authentication object, which represents the authenticated user.\n* `getPrincipal()`: This method returns the principal object associated with the authentication object, which represents the user who is being authenticated.\n* `communityService`: This is an instance of `CommunityService`, which is used to interact with the community service layer.\n* `findCommunityAdminsById()`: This method finds a list of community admins for a given community ID using the community service layer.\n* `flatMap()`: This method flattens the list of community admins into a stream, which allows for more efficient processing.\n* `map()`: This method maps each admin in the list to their user ID, which is used as a filter condition.\n* `filter()`: This method filters the list of user IDs to find the ID of the currently authenticated user.\n* `findFirst()`: This method finds the first element that matches the filter condition (in this case, the ID of the currently authenticated user), or returns `Optional.empty()` if no such element is found.\n* `isPresent()`: This method checks whether the result returned by `findFirst()` is present, which indicates whether the currently authenticated user is a community admin for the given community.","complex_type":true},"usage":{"language":"java","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n    \n    return communityService.findCommunityAdminsById(communityId, null).flatMap(admins -> admins.stream()\n        .map(User::getUserId)\n        .filter(userId::equals)\n        .findFirst())\n        .isPresent();\n}\n","description":""},"name":"isUserCommunityAdmin","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}