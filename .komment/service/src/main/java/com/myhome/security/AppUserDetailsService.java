{"name":"AppUserDetailsService.java","path":"service/src/main/java/com/myhome/security/AppUserDetailsService.java","content":{"structured":{"description":"An custom implementation of Spring Security's `UserDetailsService`, which loads user details from a database using a `UserRepository` and maps the results to a `UserDto` object using a `UserMapper`. The `loadUserByUsername()` method throws a `UsernameNotFoundException` if the user is not found in the database, while the `getUserDetailsByUsername()` method returns a `UserDto` object representing the user.","items":[{"id":"7ba8476b-c0be-ca8c-c340-3512479dd0c5","ancestors":[],"type":"function","description":"is a custom implementation of Spring Security's UserDetailsService interface. It retrieves user details from a repository and maps them to a UserDto object using a mapper. The loadUserByUsername method loads a user by username and returns a UserDetails object, while the getUserDetailsByUsername method returns a UserDto object for the given username.","name":"AppUserDetailsService","code":"@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0,"comment":{"start":29,"end":32}},"item_type":"class","length":31},{"id":"a61a6866-3d33-7797-d94c-290c08517a8b","ancestors":["7ba8476b-c0be-ca8c-c340-3512479dd0c5"],"type":"function","description":"loads a user by their username and returns a `User` object with relevant details.","params":[{"name":"username","type_name":"String","description":"username for which the user details are being loaded.","complex_type":false}],"returns":{"type_name":"User","description":"a `UserDetails` object representing a user with various attributes and authentication capabilities.\n\n* The first element is an instance of `com.myhome.domain.User`.\n* The `email` field of the user object is the username passed in the function.\n* The `encryptedPassword` field represents the encrypted password for the user.\n* The fifth element, `true`, indicates that the user is activated.\n* The sixth element, `true`, indicates that the user is confirmed.\n* The seventh element, `true`, indicates that the user is locked.\n* The eighth element, `Collections.emptyList()`, represents an empty list of roles associated with the user.","complex_type":true},"usage":{"language":"java","code":"public class UserDetailsServiceExample {\n  public static void main(String[] args) {\n    AppUserDetailsService userDetailsService = new AppUserDetailsService();\n    String username = \"username\";\n    UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n  }\n}\n","description":""},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":39,"insert":39,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"5c151c1e-272b-61bd-4141-35b70b766149","ancestors":["7ba8476b-c0be-ca8c-c340-3512479dd0c5"],"type":"function","description":"retrieves a user's details from the repository and maps them to a `UserDto` object using a mapper.","params":[{"name":"username","type_name":"String","description":"username for which the user details are to be retrieved.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the specified username.\n\n* The function returns a `UserDto` object representing the user details.\n* The `user` variable is of type `com.myhome.domain.User`, which contains information about the user, such as their email and name.\n* The `userMapper` is responsible for mapping the `User` object to the `UserDto` object, which provides a more convenient and consumable representation of the user data.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n  AppUserDetailsService userDetailsService = new AppUserDetailsService();\n  UserDto userDto = userDetailsService.getUserDetailsByUsername(\"johndoe@email.com\");\n}\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}