{"name":"NoSecretJwtEncoderDecoder.java","path":"service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java","content":{"structured":{"description":"An implementation of `AppJwtEncoderDecoder` that splits a given JWT into its component parts using a separator string, and then decodes and encodes the JWT using those components. It is used for testing purposes only and includes methods for building `AppJwt` objects from the decoded components as well as constructing the encoded JWT from a `AppJwt` object.","items":[{"id":"3df7665c-d8b6-67bd-7d40-8758aca631c2","ancestors":[],"type":"function","description":"is an implementation of the AppJwtEncoderDecoder interface, designed to work only in testing environments. It splits the encoded JWT into two parts using a separator, and then parses the user ID and expiration time from the resulting array. Finally, it returns a new AppJwt object with the extracted values.","name":"NoSecretJwtEncoderDecoder","code":"@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}","location":{"start":28,"insert":28,"offset":" ","indent":0,"comment":{"start":24,"end":27}},"item_type":"class","length":14},{"id":"76bb7d18-c5cc-3cad-2e4b-179262cc1d1f","ancestors":["3df7665c-d8b6-67bd-7d40-8758aca631c2"],"type":"function","description":"takes an encoded JWT and a secret, splits the encoded JWT into a array of strings using the specified separator, and then creates a new `AppJwt` object with the user ID and expiration time extracted from the array.","params":[{"name":"encodedJwt","type_name":"String","description":"JSON Web Token (JWT) that needs to be decoded and returned as an instance of the `AppJwt` class.","complex_type":false},{"name":"secret","type_name":"String","description":"secret key used to decode the JWT.","complex_type":false}],"returns":{"type_name":"AppJwt","description":"an instance of `AppJwt` with user ID and expiration time extracted from the encoded JWT.\n\n* `AppJwt`: This is the class that represents an JSON Web Token (JWT), which is the type of token being decoded. It has fields for the user ID and expiration time.\n* `userId(strings[0])`: This field represents the user ID extracted from the split `encodedJwt` string.\n* `expiration(LocalDateTime.parse(strings[1]))`: This field represents the expiration time of the JWT, which is also extracted from the split `encodedJwt` string.\n\nThe output of the `decode` function is an instance of `AppJwt`, which contains the user ID and expiration time of the decoded JWT.","complex_type":true},"usage":{"language":"java","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n","description":"\nIn the example above, the method decode is used to decode a string that was previously encoded by calling the encode method with an AppJwt object and a secret string. The encoded JWT string is split based on the '+' separator character using the split method of the String class. The resulting array contains two elements: the user ID and the expiration date, which are used to build an AppJwt object using its builder method."},"name":"decode","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }","location":{"start":33,"insert":33,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"58be52ce-15bb-db98-1649-51d35046ef45","ancestors":["3df7665c-d8b6-67bd-7d40-8758aca631c2"],"type":"function","description":"takes a JWT object `jwt` and a secret as input, and returns an encoded string consisting of the user ID and expiration date.","params":[{"name":"jwt","type_name":"AppJwt","description":"Java Transcrypting Worry Token containing information about the user and expiration date, which is used to generate the encoded token returned by the function.\n\n* `jwt`: The input parameter is an instance of `AppJwt`, which contains user-related information such as `getUserId()` and `getExpiration()`.\n* `secret`: The secret key used for signing the JWT.","complex_type":true},{"name":"secret","type_name":"String","description":"secret key used for signing the JWT.","complex_type":false}],"returns":{"type_name":"String","description":"a base64-encoded string representing the user ID and expiration date of the JWT.","complex_type":false},"usage":{"language":"java","code":"public class MyClass {\n  @Autowired\n  private NoSecretJwtEncoderDecoder jwtEncoder;\n  \n  public void myMethod() {\n    String secret = \"my_secret\";\n    AppJwt jwt = AppJwt.builder().userId(\"123456789\").expiration(LocalDateTime.now()).build();\n    String encodedJwt = jwtEncoder.encode(jwt, secret);\n  }\n}\n","description":""},"name":"encode","code":"@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }","location":{"start":38,"insert":38,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3}]}}}