{"name":"SecretJwtEncoderDecoder.java","path":"service/src/main/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoder.java","content":{"structured":{"description":"an implementation of the `AppJwtEncoderDecoder` interface, which is responsible for encoding and decoding JSON Web Tokens (JWTs) used for authentication in a Spring Boot application. The code uses the `io.jsonwebtoken` library to handle JWT parsing and signing, and it defines two methods: `decode()` to decode an encoded JWT, and `encode()` to encode a new JWT. The `decode()` method extracts the claims from the decoded JWT using the `Jwts.parserBuilder()` class, and then returns an updated `AppJwt` object with the extracted user ID and expiration date. The `encode()` method builds a new JWT using the `Jwts.builder()` class, sets the subject and expiration dates, and signs the JWT using the `SignatureAlgorithm.HS512`.","items":[{"id":"a128fe40-f870-57b7-6248-e4458f10b20a","ancestors":[],"type":"function","description":"is an implementation of the AppJwtEncoderDecoder interface that provides methods for encoding and decoding JSON Web Tokens (JWTs). The class uses the HmacShaKeyFor method to generate a signing key for the JWT, and the Jwts builder class to parse and generate JWT claims.","name":"SecretJwtEncoderDecoder","code":"@Component\n@Profile(\"default\")\npublic class SecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0,"comment":{"start":29,"end":32}},"item_type":"class","length":26},{"id":"110fe5c1-1063-5286-b649-1ec0fef58bd6","ancestors":["a128fe40-f870-57b7-6248-e4458f10b20a"],"type":"function","description":"takes an encoded JWT and a secret, uses JWT parser to extract claims from the JWT, and creates a new AppJwt instance with the extracted information.","params":[{"name":"encodedJwt","type_name":"String","description":"JSON Web Token (JWT) that is being decoded and parsed by the `decode()` method.","complex_type":false},{"name":"secret","type_name":"String","description":"secret key used for HMAC-SHA256 signature verification when decoding the JWT.","complex_type":false}],"returns":{"type_name":"AppJwt","description":"an instance of `AppJwt` with user ID and expiration date reconstructed from the input JWT.\n\n* `userId`: The subject claim in the JWT, representing the user's ID.\n* `expiration`: The expiration date and time of the JWT, represented as an Instant in the function.\n\nThe output is constructed by combining these two properties using the `builder` pattern, creating a new `AppJwt` instance with the specified properties.","complex_type":true},"usage":{"language":"java","code":"String encodedJwt = \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0LmNvbSIsImV4cCI6MTYyMjE3MDcyOSwiaWF0IjoxNjI5MTE2OTA5LCJqdGkiOiJjOTM1NmUzNS0yYTg5LTQ3ZTEtODkwOC05YzliNDVhZWEwNzgiLCJuYmYiOjE2MTYxNTI4MSwianRpIjoiZWRkZDFhZDE3OTAtNGU3NS00MjFkLWJlODctYTgyZGQ5ZTg5NWNkIn0.Cc9P1B_q7VxmH4oYZ8a2-z62iS3IJK6vp1Ju394nEUw\";\nString secret = \"MySuperSecretKey\";\nAppJwt appJwt = decode(encodedJwt, secret);\n","description":"\nThe method decode would return an AppJwt object with the userId and expiration of the encoded JWT."},"name":"decode","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"f9202861-3eda-86ae-0f48-092fa25dc623","ancestors":["a128fe40-f870-57b7-6248-e4458f10b20a"],"type":"function","description":"takes a `Jwt` object and a secret as input, creates a new JWT with an updated expiration date based on the current time zone, and signs it using HMAC-SHA-512 algorithm with the provided secret.","params":[{"name":"jwt","type_name":"AppJwt","description":"JSON Web Token to be encoded, which includes the user ID and expiration date.\n\n* `jwt`: A `AppJwt` object containing the JWT claim set and expiration date.\n* `secret`: The secret key used for signing the JWT.","complex_type":true},{"name":"secret","type_name":"String","description":"30-byte HMAC key used for signing the JWT token.","complex_type":false}],"returns":{"type_name":"String","description":"a compact JWT containing the user ID, expiration date, and HMAC-SHA512 signature, all generated using the provided secret.","complex_type":false},"usage":{"language":"java","code":"@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n  \n  \npublic static void main(String[] args) {\n    AppJwt jwt = new AppJwt(\"user_id\", ZonedDateTime.now().plusDays(30));\n    String secret = \"some_secret\";\n    SecretJwtEncoderDecoder encoderDecoder = new SecretJwtEncoderDecoder();\n    String encodedJwt = encoderDecoder.encode(jwt, secret);\n    System.out.println(\"Encoded JWT: \" + encodedJwt);\n}\n","description":"\nThis example demonstrates how the encode method of SecretJwtEncoderDecoder can be used to create a JWT with the specified user ID and expiration date. The resulting JWT is printed to the console using the println statement."},"name":"encode","code":"@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}