{"name":"MyHomeAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java","content":{"structured":{"description":"a custom authentication filter called MyHomeAuthorizationFilter, which extends the Spring Security BasicAuthenticationFilter. The filter is initialized with an AuthenticationManager, an Environment object, and an AppJwtEncoderDecoder object. The filter checks for an authorization token in the HTTP request header and decodes it using the AppJwtEncoderDecoder. If a valid token is found, it sets the SecurityContextHolder to store the authentication details and forwards the request to the next filter in the chain. Otherwise, it returns a null authentication token and continues with the next filter.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"199db418-a3c8-9c93-1641-8b14a0ad7117","ancestors":[],"type":"function","description":"is an extension of BasicAuthenticationFilter that adds an additional layer of security by requiring a valid JWT token for authentication. The filter decodes the JWT token and checks if the user is authorized to access the requested resource. If the token is invalid or missing, the filter denies access and passes the request to the next filter in the chain.","name":"MyHomeAuthorizationFilter","code":"public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48},{"id":"9c61e3bf-f6f8-a3a0-164e-09bb546b84f5","ancestors":["199db418-a3c8-9c93-1641-8b14a0ad7117"],"type":"function","description":"validates incoming HTTP requests by checking for an authorization token header and authenticating users using a stored authentication token. If the token is absent or does not match the expected prefix, the function passes the request to the next filter chain stage without further processing.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request being processed by the filter.\n\n* `authHeaderName`: The name of the HTTP header that contains the authentication token.\n* `authHeaderPrefix`: The prefix that is used to start the authentication token in the HTTP header.\n* `authHeader`: The value of the HTTP header containing the authentication token, or null if no such header is present.\n* `request`: The deserialized input object representing the incoming HTTP request.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HttpServletResponse object that is used to write the filtered content to the client.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `chain`: The next filter in the chain to be executed if the authentication fails.\n* `authentication`: A `UsernamePasswordAuthenticationToken` instance obtained from the HTTP header or other means, representing the authenticated user. This is set in the `SecurityContextHolder` using the `setAuthentication()` method.\n\nThe `response` object has several properties and attributes, including:\n\n* `getWriter()`: Returns a writer for writing response content.\n* `getStatus()`: Returns the HTTP status code of the response.\n* `getHeaders()`: Returns an unmodifiable map of HTTP headers.\n* `getCharacterEncoding()`: Returns the character encoding of the response content.\n* `getContentLength()`: Returns the content length of the response in bytes.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain that needs to be executed after the authentication check is performed.\n\n* `request`: A `HttpServletRequest` object representing the incoming HTTP request.\n* `response`: A `HttpServletResponse` object representing the outgoing HTTP response.\n* `FilterChain`: An instance of `FilterChain` that represents the chain of filters to be executed in sequence for this request.\n* `IOException`: Thrown if an I/O error occurs during processing, such as a connection reset or file not found.\n* `ServletException`: Thrown if a servlet-specific error occurs during processing, such as a malformed Servlet configuration file or an unknown Servlet API method.","complex_type":true}],"usage":{"language":"java","code":"@Override\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\nFilterChain chain) throws IOException, ServletException {\n  String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n  String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n  String authHeader = request.getHeader(authHeaderName);\n  if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n    chain.doFilter(request, response);\n    return;\n  }\n\n  UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  chain.doFilter(request, response);\n}\n","description":""},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"f3fd681c-ea60-37a0-e74d-60ac3ff0e0e3","ancestors":["199db418-a3c8-9c93-1641-8b14a0ad7117"],"type":"function","description":"retrieves an authentication token from a HTTP request header and decodes it to create a `UsernamePasswordAuthenticationToken`. If the token is null, the function returns null.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request being processed and provides the `Authorization` header value that is used to retrieve the authentication token.\n\n* `getHeader`: This method returns the value of the specified HTTP header in the request.\n* `environment.getProperty`: This method retrieves a property from the environment variable.\n* `appJwtEncoderDecoder.decode`: This method decodes the JWT token contained in the `authHeader` and returns the user ID.\n\nTherefore, the input `request` has the following properties:\n\n* `authHeader`: A header containing the JWT token.\n* `environment.getProperty(\"authorization.token.header.name\")`: The name of the HTTP header containing the JWT token.\n* `environment.getProperty(\"authorization.token.header.prefix\")`: The prefix of the JWT token in the HTTP header.\n* `environment.getProperty(\"token.secret\")`: The secret key used to decode the JWT token.","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` object representing a user authenticated through an authorization token.\n\n* `getAuthentication(HttpServletRequest request)`: This is the method signature indicating that it takes an `HttpServletRequest` object as input and returns an `UsernamePasswordAuthenticationToken` object as output.\n* `String authHeader = request.getHeader(environment.getProperty(\"authorization.token.header.name\"))`: This line retrieves the authentication token from the `Authorization` header of the HTTP request. The `environment.getProperty(\"authorization.token.header.name\")` property provides the name of the header where the token is expected to be placed.\n* `if (authHeader == null) { return null; }`: This line checks if the authentication token is present in the `Authorization` header, and if it's null, the method returns a null value.\n* `String token = authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\")`: This line replaces any prefix that may be present in the authentication token with an empty string using the `environment.getProperty(\"authorization.token.header.prefix\")` property as a guide.\n* `AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"))`: This line decodes the authentication token using the `appJwtEncoderDecoder` class and the `environment.getProperty(\"token.secret\")` property as the secret key.\n* `if (jwt.getUserId() == null) { return null; }`: This line checks if the `userId` property of the decoded JWT is null, and if it is, the method returns a null value.\n* `return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());`: This line creates a new `UsernamePasswordAuthenticationToken` object with the user ID obtained from the decoded JWT, an empty list of credentials, and a null authentication principal.","complex_type":true},"usage":{"language":"java","code":"import javax.servlet.http.HttpServletRequest;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\n// Assume that this method is called from within a controller or any other class that has access to the request object.\npublic void handleUserRequest(HttpServletRequest request) {\n  // Get the authentication token from the header of the request\n  String authHeader = request.getHeader(\"Authorization\");\n  \n  // Use the getAuthentication method to extract the user ID and password from the token\n  UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n  \n  // If the user is not authenticated, return a 401 Unauthorized response\n  if (authentication == null) {\n    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n  }\n  \n  // Get the current user ID from the authentication token and set it in the SecurityContextHolder\n  String userId = authentication.getName();\n  SecurityContextHolder.getContext().setAuthentication(authentication);\n  \n  // Proceed with the request handling, assuming that the user is now authenticated\n  // ...\n}\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16}]}}}