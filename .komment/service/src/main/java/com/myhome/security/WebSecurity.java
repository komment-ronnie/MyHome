{"name":"WebSecurity.java","path":"service/src/main/java/com/myhome/security/WebSecurity.java","content":{"structured":{"description":"A web security configuration for a Spring Boot application using Spring Security. It enables WebSecurity and requires the necessary dependencies for authentication and authorization. It also sets up CORS filtering, disables session creation, and adds filters for community and MyHome authorization. The configure() method is used to set up the HTTP security layer, which includes adding filters and configuring the authentication manager builder.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.Community</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"162,-85 23,-85 23,-66 162,-66 162,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"6ce5131c-0448-2585-c14d-8f7f2397d94d","ancestors":[],"type":"function","description":"is configured to enable web security for the application, allowing only authenticated requests and filtering them based on the community authorization filter. The configure() method sets up the HTTP security, disabling CORS, frame options, and session creation policy. Additionally, it adds a filter after the community filter using the MyHomeAuthorizationFilter class.","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n  private final UserDetailsService userDetailsService;\n  private final CommunityService communityService;\n  private final PasswordEncoder passwordEncoder;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }\n\n  private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":36,"insert":36,"offset":" ","indent":0,"comment":null},"item_type":"class","length":53},{"id":"844f128f-4dbe-af90-e34b-96b92dd28829","ancestors":["6ce5131c-0448-2585-c14d-8f7f2397d94d"],"type":"function","description":"defines security settings for an API, disabling CORS and CSFR, and allowing all methods on specific URLs. It also adds a filter to authenticate and authorize requests, and another filter to handle JWT encoding and decoding.","params":[{"name":"http","type_name":"HttpSecurity","description":"security configuration for the application, allowing the code to configure various security features such as CORS, CSFR, session management, and authorization policies for specific URLs and HTTP methods.\n\n* `cors`: Enables CORS (Cross-Origin Resource Sharing) functionality.\n* `csrf`: Disables CSRF (Cross-Site Request Forgery) protection.\n* `frameOptions`: Disables frame options for security reasons.\n* `sessionManagement`: Configures the session creation policy to be stateful.\n* `addFilterAfter`: Adds a filter after the `MyHomeAuthorizationFilter`.\n* `authorizeRequests`: Configures authorization rules for various HTTP methods and URL paths.","complex_type":true}],"usage":{"language":"java","code":"public class MySecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.cors().and().csrf().disable();\n        http.headers().frameOptions().disable();\n        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n        http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n        http.authorizeRequests()\n                .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n                .permitAll()\n                .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n                .permitAll()\n                .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n                .permitAll()\n                .antMatchers(\"/swagger/**\")\n                .permitAll()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n                        appJwtEncoderDecoder))\n                .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n    }\n}\n","description":""},"name":"configure","code":"@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":33},{"id":"655aca47-3e18-b0bd-bd44-a86e9784e0b0","ancestors":["6ce5131c-0448-2585-c14d-8f7f2397d94d"],"type":"function","description":"creates a `CommunityAuthorizationFilter` instance by combining the `AuthenticationManager` and `CommunityService` objects, enabling the filter to authenticate and authorize community-related requests.","params":[],"returns":{"type_name":"Filter","description":"a `Filter` object implementing community authorization functionality through a combination of authentication and service calls.\n\n* The function returns an instance of the `Filter` class.\n* The filter is created by combining two objects: the `AuthenticationManager` and the `CommunityService`.\n* The `AuthenticationManager` is used to authenticate requests, while the `CommunityService` provides functionality related to communities.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate Filter communityFilter;\n...\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    ...\n    .addFilterAfter(communityFilter, MyHomeAuthorizationFilter.class);\n}\n","description":"\nThe example code adds a filter of type \"CommunityAuthorizationFilter\" after the \"MyHomeAuthorizationFilter\" class."},"name":"getCommunityFilter","code":"private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"8d6b2fe9-6e63-118e-6e4e-d7b3363e5942","ancestors":["6ce5131c-0448-2585-c14d-8f7f2397d94d"],"type":"function","description":"sets up authentication manager configuration by providing a user details service and password encoder for customizing authentication logic.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder instance, which is being configured by specifying the user details service and password encoder used for authentication.\n\n* `userDetailsService`: This property is an instance of `UserDetailsService`. It represents the user details service responsible for storing and retrieving user information.\n* `passwordEncoder`: This property is an instance of `PasswordEncoder`. It encodes passwords before saving them to the database or when retrieving them.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}\n","description":""},"name":"configure","code":"@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4}]}}}