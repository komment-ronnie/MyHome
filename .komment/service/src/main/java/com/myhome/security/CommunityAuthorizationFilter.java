{"name":"CommunityAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java","content":{"structured":{"description":"A custom authorization filter called CommunityAuthorizationFilter that extends the BasicAuthenticationFilter class from Spring Security. The filter checks if the user is an admin of a specific community based on a UUID pattern in the request URL, and redirects the user to the unauthorized page if they are not. The filter also handles the authentication of the user through the superclass's doFilterInternal method. Additionally, it includes a private method called isUserCommunityAdmin that checks if the user is an admin of a specific community by querying the CommunityService class and retrieving the list of community admins.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed","ancestors":[],"type":"function","description":"is used to authorize access to certain resources in a web application. It filters incoming requests based on user authentication and community admin roles. The filter checks if the user is an administrator of a specific community by matching the request URI against a pattern, and if the user is not an admin, it returns an unauthorized response.","name":"CommunityAuthorizationFilter","code":"public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48},{"id":"37fb3231-e5ef-c4b1-b947-cdfd7336290b","ancestors":["7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed"],"type":"function","description":"determines if the request is for an admin page and checks if the user is authorized to access it. If not, it sets the status code to HTTP 401 Unauthorized and returns. Otherwise, it delegates to the superclass's `doFilterInternal` method.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that is being filtered by the Servlet Filter.\n\n* `getRequestURI()` returns the request URI (the portion after the domain name in the URL).\n* `matcher` is an instance of `Matcher`, which represents a pattern to match against the request URI.\n* `find()` method of the matcher returns `true` if the pattern matches, and `false` otherwise.\n* `isUserCommunityAdmin(request)` is a method that checks whether the user has administrative privileges for the community, based on the request parameters. If not authorized, the response status code is set to `HttpServletResponse.SC_UNAUTHORIZED`.\n\nOther properties of `request` include:\n\n* `getMethod()` returns the HTTP method (e.g., GET, POST, PUT, DELETE)\n* `getPathInfo()` returns the pathinfo (the portion after the last forward slash in the URL)\n* `getQueryString()` returns the query string (the portion after the question mark in the URL)\n* `getRemoteHost()` returns the remote host name (the IP address or domain name of the client)\n* `getRemotePort()` returns the remote port number (the port number of the client)\n* `getLocalName()` returns the local host name (the hostname of the server)\n* `getLocalPort()` returns the local port number (the port number of the server)\n\nThese properties can be used to further process or validate the request.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HTTP response object that is being filtered.\n\n* `request`: The incoming HTTP request object, which contains information about the client's request.\n* `response`: The output HTTP response object, which is used to send a response back to the client. It has various attributes such as status code, headers, and body.\n* `chain`: The next filter chain component to be executed, which allows for further filtering or modification of the incoming request.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain that contains the current filter and allows it to execute its inner filters.\n\n* `HttpServletRequest request`: The incoming HTTP request to be processed.\n* `HttpServletResponse response`: The output HTTP response generated by the filter.\n* `FilterChain chain`: An instance of `FilterChain`, which represents the chain of filters that can be applied to the incoming request.\n* `isUserCommunityAdmin(request)`: A method that checks whether the current user is an administrator of a community, which affects whether the filter should allow or block access to certain resources.","complex_type":true}],"usage":{"language":"java","code":"@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n        // check if the request's URL matches a community add admin request pattern\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            // set response status to unauthorized and return if user is not a community admin\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n","description":""},"name":"doFilterInternal","code":"@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }","location":{"start":31,"insert":31,"offset":" ","indent":4,"comment":null},"item_type":"method","length":13},{"id":"7ee0fd5b-60fb-fea7-2a40-8059ef3e3f3f","ancestors":["7f89a7f8-7e7a-02a2-8c49-09ee0f8071ed"],"type":"function","description":"determines if a user is an administrator of a community based on the community ID and the user's principal ID.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request object containing information about the current request, which is used to extract the community ID from the request URL.\n\n* `request`: An instance of the `HttpServletRequest` class, which contains information about the HTTP request received by the server. The request can be deserialized and accessed through various attributes such as `getMethod()`, `getParameter()`, `getHeader()`, `getRemoteAddr()`, and others.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the current user is a community administrator for the specified community.","complex_type":false},"usage":{"language":"java","code":"@Test\npublic void isUserCommunityAdmin_shouldReturnTrue() {\n    // GIVEN\n    HttpServletRequest request = mock(HttpServletRequest.class);\n    String userId = \"someUserId\";\n    String communityId = \"someCommunityId\";\n\n    when(request.getRequestURI()).thenReturn(\"/communities/\" + communityId + \"/admins\");\n    when(request.getParameter(\"userId\")).thenReturn(userId);\n    CommunityService communityService = mock(CommunityService.class);\n    when(communityService.findCommunityAdminsById(communityId, null)).thenReturn(List.of(new User(userId)));\n\n    // WHEN\n    CommunityAuthorizationFilter filter = new CommunityAuthorizationFilter(mock(AuthenticationManager.class), communityService);\n    boolean result = filter.isUserCommunityAdmin(request);\n\n    // THEN\n    assertTrue(result);\n}\n","description":"\nThis test case uses the mocking functionality of JUnit to create a mock HttpServletRequest and CommunityService objects, and then sets up a scenario where isUserCommunityAdmin should return true. The test case first calls when on the request object to set its getRequestURI method to return the expected value, and then calls when on the communityService object to set its findCommunityAdminsById method to return a list containing a User with the same userId as the one in the mock HttpServletRequest. Finally, it creates an instance of CommunityAuthorizationFilter using the mock AuthenticationManager and communityService objects, and calls its isUserCommunityAdmin method on the request object, which should return true."},"name":"isUserCommunityAdmin","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }","location":{"start":45,"insert":45,"offset":" ","indent":4,"comment":null},"item_type":"method","length":21}]}}}