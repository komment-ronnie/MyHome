{"name":"CorsConfig.java","path":"service/src/main/java/com/myhome/configuration/CorsConfig.java","content":{"structured":{"description":"A configuration class called `CorsConfig` that enables Cross-Origin Resource Sharing (CORS) for a web application. The class defines allowed origins, methods, headers, and credentials for CORS mappings using the `@Bean` annotation. It also provides a bean for the `WebMvcConfigurer` interface to add CORS mappings to the registry.","items":[{"id":"fa9b8b47-a1f7-f7a6-c847-467952b39e81","ancestors":[],"type":"function","description":"is used to configure CORS settings for a web application. It allows requests from any origin and specifies which headers to expose and whether credentials should be included. The `addCorsMappings` method adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.","name":"CorsConfig","code":"@Configuration\npublic class CorsConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n\n  /**\n   * configure CORS settings for a web application, allowing requests from specified\n   * origins and methods, as well as specifying which headers to expose and whether\n   * credentials should be included.\n   * \n   * @returns a configuration for CORS (Cross-Origin Resource Sharing) that allows\n   * requests from any origin to access resources from the server.\n   * \n   * \t- `registry`: The `CorsRegistry` object that is being modified with the CORS mappings.\n   * \t- `addCorsMappings()`: The method being called on the `registry` object to add\n   * CORS mappings.\n   * \t- `allowedOrigins`: An array of strings containing the allowed origins for the\n   * CORS mappings.\n   * \t- `allowedMethods`: An array of strings containing the allowed HTTP methods for\n   * the CORS mappings.\n   * \t- `allowedHeaders`: An array of strings containing the allowed headers for the\n   * CORS mappings.\n   * \t- `exposedHeaders`: An array of strings containing the headers that are exposed\n   * to the client.\n   * \t- `allowCredentials()`: A boolean value indicating whether credentials (e.g.,\n   * cookies, authorization) should be allowed for the CORS mappings.\n   */\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of `CorsRegistry`, which represents the set of\n       * CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new mapping to the existing set of mappings\n       * in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the\n       * mapping applies to all URLs.\n       * \t- `allowedOrigins`: An array of allowed origins, which specifies the domains or\n       * subdomains that are allowed to make CORS requests to the server.\n       * \t- `allowedMethods`: An array of allowed HTTP methods, which specifies the methods\n       * that are allowed to be used in CORS requests to the server. The value `\"*\" means\n       * that all methods are allowed.\n       * \t- `allowedHeaders`: An array of allowed headers, which specifies the headers that\n       * can be included in CORS responses from the server. The value `\"*\" means that all\n       * headers are allowed.\n       * \t- `exposedHeaders`: An array of exposed headers, which specifies the headers that\n       * can be included in CORS responses from the server and are visible to clients. The\n       * values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n       * \t- `allowCredentials`: A boolean value that indicates whether CORS requests with\n       * credentials (such as cookies or authentication tokens) are allowed.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}","location":{"start":31,"insert":31,"offset":" ","indent":0,"comment":{"start":24,"end":30}},"item_type":"class","length":68},{"id":"a62d7b63-c822-6db5-cd4a-5142c6974dc0","ancestors":["fa9b8b47-a1f7-f7a6-c847-467952b39e81"],"type":"function","description":"adds CORS mappings to a registry, allowing requests from any origin and specifying allowed methods, headers, and credentials.","params":[],"returns":{"type_name":"instance","description":"a set of CORS mappings that allow requests from any origin, specify allowed methods and headers, and expose certain headers.\n\n* `registry`: This is an instance of `CorsRegistry`, which represents the set of CORS mappings for a server.\n* `addMapping`: This method adds a new mapping to the existing set of mappings in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the mapping applies to all URLs.\n* `allowedOrigins`: An array of allowed origins, which specifies the domains or subdomains that are allowed to make CORS requests to the server. The value is an empty array by default, indicating that no origins are allowed.\n* `allowedMethods`: An array of allowed HTTP methods, which specifies the methods that are allowed to be used in CORS requests to the server. The value `\"*\" means that all methods are allowed.\n* `allowedHeaders`: An array of allowed headers, which specifies the headers that can be included in CORS responses from the server. The value `\"*\" means that all headers are allowed.\n* `exposedHeaders`: An array of exposed headers, which specifies the headers that can be included in CORS responses from the server and are visible to clients. The values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n* `allowCredentials`: A boolean value that indicates whether CORS requests with credentials (such as cookies or authentication tokens) are allowed. By default, this property is set to `true`.","complex_type":true},"usage":{"language":"java","code":"@Bean\npublic WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/**\")\n                    .allowedOrigins(allowedOrigins)\n                    .allowedMethods(\"*\")\n                    .allowedHeaders(\"*\")\n                    .exposedHeaders(\"token\", \"userId\")\n                    .allowCredentials(true);\n        }\n    };\n}\n","description":""},"name":"corsConfigurer","code":"@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      /**\n       * adds CORS mappings to a registry, allowing requests from any origin and specifying\n       * allowed methods, headers, and credentials.\n       * \n       * @param registry Cors registry that the method adds mappings to.\n       * \n       * \t- `registry`: This is an instance of `CorsRegistry`, which represents the set of\n       * CORS mappings for a server.\n       * \t- `addMapping`: This method adds a new mapping to the existing set of mappings\n       * in `registry`. The mapping includes the URL pattern `\"**\"`, which means that the\n       * mapping applies to all URLs.\n       * \t- `allowedOrigins`: An array of allowed origins, which specifies the domains or\n       * subdomains that are allowed to make CORS requests to the server.\n       * \t- `allowedMethods`: An array of allowed HTTP methods, which specifies the methods\n       * that are allowed to be used in CORS requests to the server. The value `\"*\" means\n       * that all methods are allowed.\n       * \t- `allowedHeaders`: An array of allowed headers, which specifies the headers that\n       * can be included in CORS responses from the server. The value `\"*\" means that all\n       * headers are allowed.\n       * \t- `exposedHeaders`: An array of exposed headers, which specifies the headers that\n       * can be included in CORS responses from the server and are visible to clients. The\n       * values `\"token\"` and `\"userId\"` indicate that these two specific headers are exposed.\n       * \t- `allowCredentials`: A boolean value that indicates whether CORS requests with\n       * credentials (such as cookies or authentication tokens) are allowed.\n       */\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":{"start":36,"end":58}},"item_type":"method","length":39},{"id":"a8534ea8-5422-2794-f544-1cdf14a6b9c4","ancestors":["fa9b8b47-a1f7-f7a6-c847-467952b39e81","a62d7b63-c822-6db5-cd4a-5142c6974dc0"],"type":"function","description":"adds CORS mappings to a registry, allowing incoming requests from any origin and specifying allowed methods, headers, and credentials.","params":[{"name":"registry","type_name":"CorsRegistry","description":"Cors registry that is being modified by adding mappings to its configuration.\n\n* `registry`: The Cors registry to be updated with the mappings.\n* `allowedOrigins`: An array of strings representing the origins allowed to make requests to the server.\n* `allowedMethods`: An array of strings representing the HTTP methods allowed for making requests to the server.\n* `allowedHeaders`: An array of strings representing the headers allowed to be included in responses from the server.\n* `exposedHeaders`: An array of strings representing the headers that can be exposed by the server in responses.\n* `allowCredentials`: A boolean indicating whether credentials (e.g., authentication tokens) should be allowed in requests.","complex_type":true}],"usage":{"language":"java","code":"@Override\npublic void configure(WebMvcConfigurer config) {\n    config.addCorsMappings(CorsRegistry);\n}\n","description":""},"name":"addCorsMappings","code":"@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }","location":{"start":87,"insert":87,"offset":" ","indent":6,"comment":{"start":61,"end":86}},"item_type":"method","length":9}]}}}