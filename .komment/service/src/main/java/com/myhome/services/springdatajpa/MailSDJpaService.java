{"name":"MailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/MailSDJpaService.java","content":{"structured":{"description":"a `MailSDJpaService` class that implements `MailService` interface. It utilizes various packages such as `lombok`, `slf4j`, `org.springframework`, `org.thymeleaf`, and `java.mail`. The class contains several methods for sending emails using Spring Boot's built-in `JavaMailSender` and `MimeMessageHelper`. These methods include `sendPasswordRecoverCode()`, `sendPasswordSuccessfullyChanged()`, `sendAccountCreated()`, `sendAccountConfirmed()`, and `getAccountConfirmLink()`. The code also uses a `ResourceBundleMessageSource` to handle localization.","items":[{"id":"3d0eb505-f6ed-4fbc-764e-06b098cd9d62","ancestors":[],"type":"function","description":"is a Java-based implementation of a mail service for a Spring Boot application. It provides methods for sending emails with customizable templates and handles the mail sending process through JavaMailSender and EmailTemplateEngine interfaces. The class also uses a ResourceBundleMessageSource for message localization.","name":"MailSDJpaService","code":"@Service\n@ConditionalOnProperty(value = \"spring.mail.devMode\", havingValue = \"false\", matchIfMissing = false)\n@RequiredArgsConstructor\n@Slf4j\npublic class MailSDJpaService implements MailService {\n\n  private final ITemplateEngine emailTemplateEngine;\n  private final JavaMailSender mailSender;\n  private final ResourceBundleMessageSource messageSource;\n  private final MailProperties mailProperties;\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }\n\n  private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }\n\n  private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }\n\n  private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }\n\n  private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }\n\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":96},{"id":"fb613bef-e815-cdab-b34d-a6c6157f5757","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"sends an email with a password recover code to the user's registered email address if the email is valid and the code is generated successfully.","params":[{"name":"user","type_name":"User","description":"User object whose password recovery email is being sent.\n\n* `user.getName()` represents the user's name.\n* `randomCode` is a String that contains a randomly generated password recover code.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit code that will be sent to the user's registered email address for password recovery.","complex_type":false}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"public static void main(String[] args) {\n    User user = new User(\"John\", \"Doe\", \"johndoe@example.com\");\n    String randomCode = \"123456789\";\n    boolean mailSent = sendPasswordRecoverCode(user, randomCode);\n}\n","description":""},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10},{"id":"9662f859-057d-9a8f-3841-86bd75051605","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"maps user data to a message and sends an email to the user's registered address with the subject \"password changed\".","params":[{"name":"user","type_name":"User","description":"user for whom the password change notification should be sent.\n\n* `name`: The user's name.\n\nThe function then performs the following actions:\n\n1. Creates a new `Map<String, Object>` object called `templateModel`.\n2. Adds an entry to the map with the key `\"username\"` and the value of the `user.getName()` property.\n3. Sets the `passwordChangedSubject` variable to the localized message \"locale.EmailSubject.passwordChanged\".\n4. Uses the `send()` function to send an email to the user's email address with the subject set to `passwordChangedSubject`.\n5. Returns a boolean value indicating whether the email was sent successfully or not.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"public class User {\n  private String name;\n  public String getName() { return name; }\n}\n\npublic class MyController {\n  \n  @Autowired\n  MailSDJpaService mailService;\n  \n  public void sendEmailPasswordChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = mailService.send(user.getEmail(), passwordChangedSubject, MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n  }\n}\n","description":""},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":48,"insert":48,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"4e4ee72b-53b5-e892-ba43-bda56fb59f3a","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"takes a user and an email confirmation token as input, generates a customized email template with the user's name and the link to confirm their account, and sends it to the user's email address using the `send` method. If the mail is sent successfully, the function returns `true`.","params":[{"name":"user","type_name":"User","description":"User object containing the user's information.\n\n* `user`: A `User` object containing attributes such as `name`, which is used to put into the template model.\n\nA map with two key-value pairs is created from the `templateModel`. The first key is \"username,\" which gets assigned the value of `user.name`. The second key is \"emailConfirmLink,\" which gets assigned the value of `getAccountConfirmLink(user, emailConfirmToken)`.\n\nThe function then sends an email using the `send` method. The subject of the email is retrieved from a localized message using the `getLocalizedMessage` method. The filename for the template used in the mail is retrieved from the `MailTemplatesNames`.","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"token that is sent to the user's email address for email confirmation.\n\n* `user`: A `User` object representing the user whose account was created.\n* `securityToken`: An object of type `SecurityToken` containing the confirmation link for the user's email address.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was successfully sent to confirm the user's account creation.","complex_type":false},"usage":{"language":"java","code":"// user is the User object for which to send email account created\nUser user = ...;\n\n// SecurityToken is a token used to confirm the user's email address\nSecurityToken emailConfirmToken = ...;\n\nboolean mailSent = sendAccountCreated(user, emailConfirmToken);\n","description":""},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"5f8468dc-1f75-29bd-0f49-85834c992a53","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"sends an email to a user confirming their account.","params":[{"name":"user","type_name":"User","description":"User object containing the user's name and email address for sending an account confirmation email.\n\n* `user.getName()` - retrieves the user's name.\n\nThe template model is created by assigning key-value pairs to it using the curly braces `{}`. These keys correspond to placeholders in the email template, which will be replaced with actual values during rendering.\n\nIn the `send` method, the email is sent using the provided subject and template file name. The `templateModel` is passed as an argument to this method for populating the email's placeholders with actual data.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"a5b244f6-51fe-ea84-354a-25816d60379b","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"sends an HTML-formatted message to a recipient through a messaging system using the `mailSender` object's `createMimeMessage` method and sets various parameters such as from, to, subject, and text.","params":[{"name":"to","type_name":"String","description":"email address of the recipient to whom the HTML message is being sent.","complex_type":false},{"name":"subject","type_name":"String","description":"subject line of the email that is to be sent.","complex_type":false},{"name":"htmlBody","type_name":"String","description":"HTML message body that will be sent to the recipient.","complex_type":false}],"usage":{"language":"java","code":"// An email address to which the message will be sent\nString recipient = \"example@domain.com\";\n\n// The subject line for the email message\nString subject = \"Test Email\";\n\n// The main body of the email message\nString htmlBody = \"<html><body>This is a test email.</body></html>\";\n\ntry {\n    sendHtmlMessage(recipient, subject, htmlBody);\n} catch (MessagingException e) {\n    System.out.println(\"Error sending email: \" + e.getMessage());\n}\n","description":""},"name":"sendHtmlMessage","code":"private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"8aed9961-2951-eca6-e340-1fdef8982c3a","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"sends an HTML email to a specified recipient using Thymeleaf template engine. It takes a template name, model variables, and locale as input and returns a boolean value indicating whether the email was sent successfully.","params":[{"name":"emailTo","type_name":"String","description":"email address of the recipient to whom the email message is being sent.","complex_type":false},{"name":"subject","type_name":"String","description":"subject line of the email to be sent.","complex_type":false},{"name":"templateName","type_name":"String","description":"name of the Thymeleaf template to be processed and rendered into HTML content.","complex_type":false},{"name":"templateModel","type_name":"Map<String, Object>","description":"data that will be used to populate the email template's placeholders, allowing for dynamic content and personalization in the email message.\n\n* `LocaleContextHolder`: This is an instance of the `LocaleContextHolder` class, which provides access to the current locale and can be used to retrieve the current locale.\n* `thymeleafContext`: This is a new instance of the `Context` class, which is created with the current locale set using the `LocaleContextHolder`. The context contains variables that are passed in through the `templateModel`.\n* `emailTo`: This is a string representing the email address to send the message to.\n* `subject`: This is a string representing the subject line of the email.\n* `templateName`: This is a string representing the name of the Thymeleaf template to use for sending the email.\n* `templateModel`: This is a map of key-value pairs that contain variables that are passed in through the function and can be used in the Thymeleaf template.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the email was sent successfully.","complex_type":false},"usage":{"language":"java","code":"public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject, MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n}\n","description":""},"name":"send","code":"private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"65641872-d275-1f81-6b42-e2635b958c73","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"generates a hyperlink for an email confirmation process, based on the user ID and security token.","params":[{"name":"user","type_name":"User","description":"User object whose email confirmation link is to be generated.\n\n* `user`: A `User` object with properties such as `UserId`, `Email`, and `Token`.\n\nThe function returns a string in the format of a URL, constructed by combining the base URL `ServletUriComponentsBuilder.fromCurrentContextPath()` with the user ID, token, and `/email-confirm/` path segment.","complex_type":true},{"name":"token","type_name":"SecurityToken","description":"email confirmation token for the specified user, which is used to generate the final URL for the email confirmation link.\n\n* `token`: A SecurityToken object with attributes such as `getToken()` for retrieving the token value.","complex_type":true}],"returns":{"type_name":"String","description":"a URL string constructed from the current context path and the parameters `user.getUserId()` and `token.getToken()`.","complex_type":false},"usage":{"language":"java","code":"User user = new User(\"username\", \"email\");\nSecurityToken token = new SecurityToken(user, \"token\");\nString baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\nString confirmLink = getAccountConfirmLink(user, token);\n","description":""},"name":"getAccountConfirmLink","code":"private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }","location":{"start":103,"insert":103,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"8459cc81-f421-7ca2-f040-b0ad995f4db9","ancestors":["3d0eb505-f6ed-4fbc-764e-06b098cd9d62"],"type":"function","description":"retrieves a message from a message source based on a given property name and returns the resulting localized message.","params":[{"name":"prop","type_name":"String","description":"property key to be localized.","complex_type":false}],"returns":{"type_name":"String","description":"a localized message based on a provided property and the current locale.","complex_type":false},"usage":{"language":"java","code":"String message = this.getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n","description":"\nIn the above example, we are passing the string \"locale.EmailSubject.accountCreated\" as a parameter to getLocalizedMessage(). This string corresponds to a key in the ResourceBundleMessageSource's resource bundle, which contains all the localized messages for the application. The method then retrieves the value associated with this key and returns it as the result of the method call."},"name":"getLocalizedMessage","code":"private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9}]}}}