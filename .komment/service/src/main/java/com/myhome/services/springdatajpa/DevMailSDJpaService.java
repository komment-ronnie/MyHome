{"name":"DevMailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/DevMailSDJpaService.java","content":{"structured":{"description":"A `DevMailSDJpaService` class that implements `MailService` interface and provides four methods for sending emails: `sendPasswordRecoverCode`, `sendAccountConfirmed`, `sendPasswordSuccessfullyChanged`, and `sendAccountCreated`. The methods use Spring Boot's `@Slf4j` annotation to log information, and the `@ConditionalOnProperty` annotation to enable the class only when the `spring.mail.dev-mode` property is set to `true`.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"5a3c18f0-5c7f-98b6-8e45-3d4b3cfc2ae1","ancestors":[],"type":"function","description":"is a Java class that implements the MailService interface and provides methods for sending messages to users. The class is configured to only execute when the property \"spring.mail.dev-mode\" is set to \"true\".","name":"DevMailSDJpaService","code":"@Slf4j\n@Service\n@ConditionalOnProperty(value = \"spring.mail.dev-mode\", havingValue = \"true\", matchIfMissing = true)\npublic class DevMailSDJpaService implements MailService {\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n}","location":{"start":11,"insert":11,"offset":" ","indent":0,"comment":null},"item_type":"class","length":32},{"id":"b03ee636-676c-7686-d04c-f7da55162db6","ancestors":["5a3c18f0-5c7f-98b6-8e45-3d4b3cfc2ae1"],"type":"function","description":"sends a password recovery code to a user via email.","params":[{"name":"user","type_name":"User","description":"User object whose password recovery code is being sent.\n\n* `user`: A `User` object, containing attributes such as `userId`, `email`, and potentially others.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit password recover code sent to the user via email.","complex_type":false}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the password recover code was successfully sent to the user.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }\n\n// Example usage of sendPasswordRecoverCode method:\npublic boolean sendPasswordRecoverCode() {\n   User user = new User(1234, \"johndoe@email.com\");\n   String randomCode = \"987654\";\n   return sendPasswordRecoverCode(user, randomCode);\n}\n","description":"\nIn the example above, the method sendPasswordRecoverCode is called with a User object and a String representing the code to be sent via email. The method logs an info message indicating that the password recover code has been successfully sent to the user's email address. The method then returns true to indicate that the operation was successful.\n\nIn real-world scenarios, this method may be used in conjunction with other methods to implement password recovery functionality for a Spring Boot application. For instance, when a user forgets their password, they can enter their email address and click on a button to initiate the password recover process. The sendPasswordRecoverCode method would then be called with the User object and the generated code."},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }","location":{"start":16,"insert":16,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"eb3f15c8-6bde-3591-064b-87d9606d3481","ancestors":["5a3c18f0-5c7f-98b6-8e45-3d4b3cfc2ae1"],"type":"function","description":"sends a message to a user with a specified ID indicating that their account has been confirmed.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user whose account confirmation message should be sent.\n\n* `UserId`: an integer representing the unique identifier for the user.\n\nThe function logs an informational message using `log.info()` with a custom message formatted by concatenating the string \"Account confirmed message sent to user with id=\" followed by the value of `user.getUserId()`. Finally, the function returns `true`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that the account has been confirmed for the specified user.","complex_type":false},"usage":{"language":"java","code":"User user = new User();\nuser.setUserId(\"123456\");\nsendAccountConfirmed(user);\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":22,"insert":22,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"61cd2731-5158-8e96-9949-86198afd4e3a","ancestors":["5a3c18f0-5c7f-98b6-8e45-3d4b3cfc2ae1"],"type":"function","description":"sends a message to a user indicating that their password has been successfully changed.","params":[{"name":"user","type_name":"User","description":"User object containing the user's information for whom the password change notification is being sent.\n\n* `user.getUserId()` - retrieves the user ID of the user whose password was successfully changed.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that the password has been successfully changed, along with the user's ID.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n}\n\n// Example Usage:\nsendPasswordSuccessfullyChanged(new User()); // returns true\n","description":""},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":28,"insert":28,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"4f9d9ffa-a49b-dd91-594d-d1aea3da4d39","ancestors":["5a3c18f0-5c7f-98b6-8e45-3d4b3cfc2ae1"],"type":"function","description":"sends an account creation message to a user with a unique identifier.","params":[{"name":"user","type_name":"User","description":"User object containing information about the created account, which is passed to the function for processing.\n\n* `user`: The user object containing information such as user ID (`getUserId()`), email address (`getEmail()`), and security token (`emailConfirmToken`).","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"SecurityToken that will be sent to the user's email address for email confirmation.\n\n* `User user`: The user object whose account has been created.\n* `SecurityToken emailConfirmToken`: A SecurityToken object representing an email confirmation token for the newly created account.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating that the account creation message was successfully sent to the user.","complex_type":false},"usage":{"language":"java","code":"@Override\npublic boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    // User and SecurityToken are required inputs \n    return true;\n}\n","description":""},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5}]}}}