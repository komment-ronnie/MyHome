{"name":"UserSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/UserSDJpaService.java","content":{"structured":{"description":"","items":[{"id":"0286b1af-3fc2-4b27-bef1-c8e796ddd0ec","ancestors":[],"type":"function","name":"createUser","location":{"offset":" ","indent":2,"insert":57,"start":57},"returns":"Optional<UserDto>","params":[{"name":"request","type":"UserDto"}],"code":"@Override\n  public Optional<UserDto> createUser(UserDto request) {\n    if (userRepository.findByEmail(request.getEmail()) == null) {\n      generateUniqueUserId(request);\n      encryptUserPassword(request);\n      User newUser = createUserInRepository(request);\n      SecurityToken emailConfirmToken = securityTokenService.createEmailConfirmToken(newUser);\n      mailService.sendAccountCreated(newUser, emailConfirmToken);\n      UserDto newUserDto = userMapper.userToUserDto(newUser);\n      return Optional.of(newUserDto);\n    } else {\n      return Optional.empty();\n    }\n  }","skip":false,"length":14,"comment":{"description":"generates a unique user ID, encrypts the password, creates a new user in the repository, sends an email confirmation token, and maps the user to a UserDto object for return.","params":[{"name":"request","type":"UserDto","description":"UserDto object containing the user's details to be created, which is used to generate a unique user ID, encrypt the password, create the user in the repository, and send an email confirmation token."}],"returns":{"type":"Optional<UserDto>","description":"an optional `UserDto` object representing the newly created user."}}},{"id":"a5e62b25-725c-429e-8a5b-fd2b965152ab","ancestors":[],"type":"function","name":"listAll","location":{"offset":" ","indent":2,"insert":77,"start":77},"returns":"Set<User>","params":[{"name":"pageable","type":"Pageable"}],"code":"@Override\n  public Set<User> listAll(Pageable pageable) {\n    return userRepository.findAll(pageable).toSet();\n  }","skip":false,"length":4,"comment":{"description":"from the provided code returns a set of all users in the user repository, fetched from the database using the `findAll` method and paginated using the `pageable` parameter.","params":[{"name":"pageable","type":"Pageable","description":"pagination information for retrieving a subset of users from the repository."}],"returns":{"type":"Set<User>","description":"a set of `User` objects."}}},{"id":"0b1ca672-a2b4-4b95-82e8-0757caa62d46","ancestors":[],"type":"function","name":"getUserDetails","location":{"offset":" ","indent":2,"insert":82,"start":82},"returns":"Optional<UserDto>","params":[{"name":"userId","type":"String"}],"code":"@Override\n  public Optional<UserDto> getUserDetails(String userId) {\n    Optional<User> userOptional = userRepository.findByUserIdWithCommunities(userId);\n    return userOptional.map(admin -> {\n      Set<String> communityIds = admin.getCommunities().stream()\n          .map(Community::getCommunityId)\n          .collect(Collectors.toSet());\n\n      UserDto userDto = userMapper.userToUserDto(admin);\n      userDto.setCommunityIds(communityIds);\n      return Optional.of(userDto);\n    }).orElse(Optional.empty());\n  }","skip":false,"length":13,"comment":{"description":"retrieves user details from a repository and maps them to a `UserDto`. It then returns an optional instance of `UserDto`.","params":[{"name":"userId","type":"String","description":"identifier of the user for whom details are being retrieved."}],"returns":{"type":"Optional<UserDto>","description":"an `Optional` instance containing a `UserDto` object with the user's community IDs and details."}}},{"id":"a266d429-0218-4683-85cc-a465ee0ee348","ancestors":[],"type":"function","name":"findUserByEmail","location":{"offset":" ","indent":2,"insert":96,"start":96},"returns":"Optional<UserDto>","params":[{"name":"userEmail","type":"String"}],"code":"public Optional<UserDto> findUserByEmail(String userEmail) {\n    return Optional.ofNullable(userRepository.findByEmail(userEmail))\n        .map(user -> {\n          Set<String> communityIds = user.getCommunities().stream()\n              .map(Community::getCommunityId)\n              .collect(Collectors.toSet());\n\n          UserDto userDto = userMapper.userToUserDto(user);\n          userDto.setCommunityIds(communityIds);\n          return userDto;\n        });\n  }","skip":false,"length":12,"comment":{"description":"maps a user repository findByEmail query to a UserDto object, transforming the user's community IDs into a set.","params":[{"name":"userEmail","type":"String","description":"email address of the user for whom the method is searching."}],"returns":{"type":"Optional<UserDto>","description":"a `Optional<UserDto>` object containing the user's community IDs and other information."}}},{"id":"08410851-8673-4e4f-b839-4f20c6fb3230","ancestors":[],"type":"function","name":"requestResetPassword","location":{"offset":" ","indent":2,"insert":109,"start":109},"returns":"boolean","params":[{"name":"forgotPasswordRequest","type":"ForgotPasswordRequest"}],"code":"@Override\n  public boolean requestResetPassword(ForgotPasswordRequest forgotPasswordRequest) {\n    return Optional.ofNullable(forgotPasswordRequest)\n        .map(ForgotPasswordRequest::getEmail)\n        .flatMap(email -> userRepository.findByEmailWithTokens(email)\n            .map(user -> {\n              SecurityToken newSecurityToken = securityTokenService.createPasswordResetToken(user);\n              user.getUserTokens().add(newSecurityToken);\n              userRepository.save(user);\n              return mailService.sendPasswordRecoverCode(user, newSecurityToken.getToken());\n            }))\n        .orElse(false);\n  }","skip":false,"length":13,"comment":{"description":"resets a user's password by generating a new security token and sending a password recovery code to the user's registered email address.","params":[{"name":"forgotPasswordRequest","type":"ForgotPasswordRequest","description":"email address of the user who is requesting a password reset."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the password reset process was successful."}}},{"id":"118d5f19-e65a-4d1a-945d-701c176bc666","ancestors":[],"type":"function","name":"resetPassword","location":{"offset":" ","indent":2,"insert":123,"start":123},"returns":"boolean","params":[{"name":"passwordResetRequest","type":"ForgotPasswordRequest"}],"code":"@Override\n  public boolean resetPassword(ForgotPasswordRequest passwordResetRequest) {\n    final Optional<User> userWithToken = Optional.ofNullable(passwordResetRequest)\n        .map(ForgotPasswordRequest::getEmail)\n        .flatMap(userRepository::findByEmailWithTokens);\n    return userWithToken\n        .flatMap(user -> findValidUserToken(passwordResetRequest.getToken(), user, SecurityTokenType.RESET))\n        .map(securityTokenService::useToken)\n        .map(token -> saveTokenForUser(userWithToken.get(), passwordResetRequest.getNewPassword()))\n        .map(mailService::sendPasswordSuccessfullyChanged)\n        .orElse(false);\n  }","skip":false,"length":12,"comment":{"description":"resets a user's password by verifying the provided token, finding the user with the matching email address, generating a new security token, and sending a notification to the user.","params":[{"name":"passwordResetRequest","type":"ForgotPasswordRequest","description":"ForgotPasswordRequest object containing the user's email address and a token for password reset, which is used to retrieve the user's security token from the database and update their password."}],"returns":{"type":"boolean","description":"a boolean value indicating whether the password reset was successful."}}},{"id":"3497a22a-debf-48a3-bd27-819b5fd1ce96","ancestors":[],"type":"function","name":"confirmEmail","location":{"offset":" ","indent":2,"insert":136,"start":136},"returns":"Boolean","params":[{"name":"userId","type":"String"},{"name":"emailConfirmToken","type":"String"}],"code":"@Override\n  public Boolean confirmEmail(String userId, String emailConfirmToken) {\n    final Optional<User> userWithToken = userRepository.findByUserIdWithTokens(userId);\n    Optional<SecurityToken> emailToken = userWithToken\n        .filter(user -> !user.isEmailConfirmed())\n        .map(user -> findValidUserToken(emailConfirmToken, user, SecurityTokenType.EMAIL_CONFIRM)\n        .map(token -> {\n          confirmEmail(user);\n          return token;\n        })\n        .map(securityTokenService::useToken)\n        .orElse(null));\n    return emailToken.map(token -> true).orElse(false);\n  }","skip":false,"length":14,"comment":{"description":"verifies if a user's email is confirmed by checking for a valid email confirmation token and marking the user as confirmed in the database.","params":[{"name":"userId","type":"String","description":"user ID of the user for whom the email confirmation needs to be checked."},{"name":"emailConfirmToken","type":"String","description":"10-digit token that is generated when an email address is confirmed, which is used to confirm the user's email address in the database."}],"returns":{"type":"Boolean","description":"a boolean value indicating whether the email confirmation token was successfully verified and the user's email confirmed."}}},{"id":"9d77b556-8e5e-46e4-9710-e19c1c1e79ef","ancestors":[],"type":"function","name":"resendEmailConfirm","location":{"offset":" ","indent":2,"insert":151,"start":151},"returns":"boolean","params":[{"name":"userId","type":"String"}],"code":"@Override\n  public boolean resendEmailConfirm(String userId) {\n    return userRepository.findByUserId(userId).map(user -> {\n      if(!user.isEmailConfirmed()) {\n        SecurityToken emailConfirmToken = securityTokenService.createEmailConfirmToken(user);\n        user.getUserTokens().removeIf(token -> token.getTokenType() == SecurityTokenType.EMAIL_CONFIRM && !token.isUsed());\n        userRepository.save(user);\n        boolean mailSend = mailService.sendAccountCreated(user, emailConfirmToken);\n        return mailSend;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }","skip":false,"length":14,"comment":{"description":"resends an email confirmation token to a user if they have not confirmed their email address.","params":[{"name":"userId","type":"String","description":"ID of the user for whom the email confirmation status is to be checked and updated."}],"returns":{"type":"boolean","description":"a boolean value indicating whether an email confirmation token was successfully sent to the user."}}},{"id":"bb961674-ab55-4409-90e5-2e588db9f0e3","ancestors":[],"type":"function","name":"saveTokenForUser","location":{"offset":" ","indent":2,"insert":166,"start":166},"returns":"User","params":[{"name":"user","type":"User"},{"name":"newPassword","type":"String"}],"code":"private User saveTokenForUser(User user, String newPassword) {\n    user.setEncryptedPassword(passwordEncoder.encode(newPassword));\n    return userRepository.save(user);\n  }","skip":false,"length":4,"comment":{"description":"saves a user's encrypted password to the database after updating it with a new password provided as an argument.","params":[{"name":"user","type":"User","description":"User object that contains the user's information and password, which is updated with the new password provided in the `newPassword` parameter before saving it to the database by the `userRepository.save()` method."},{"name":"newPassword","type":"String","description":"encrypted password for the user, which is then saved to the database by the `saveTokenForUser` function."}],"returns":{"type":"User","description":"a saved User object with an encrypted password."}}},{"id":"29667f1d-ec54-4946-9938-109b4d5491b5","ancestors":[],"type":"function","name":"findValidUserToken","location":{"offset":" ","indent":2,"insert":171,"start":171},"returns":"Optional<SecurityToken>","params":[{"name":"token","type":"String"},{"name":"user","type":"User"},{"name":"securityTokenType","type":"SecurityTokenType"}],"code":"private Optional<SecurityToken> findValidUserToken(String token, User user, SecurityTokenType securityTokenType) {\n    Optional<SecurityToken> userPasswordResetToken = user.getUserTokens()\n        .stream()\n        .filter(tok -> !tok.isUsed()\n            && tok.getTokenType() == securityTokenType\n            && tok.getToken().equals(token)\n            && tok.getExpiryDate().isAfter(LocalDate.now()))\n        .findFirst();\n    return userPasswordResetToken;\n  }","skip":false,"length":10,"comment":{"description":"queries the database for a SecurityToken that matches the input token, user, and security token type, and returns an Optional<SecurityToken> containing the matching token if found, otherwise returns an empty Optional.","params":[{"name":"token","type":"String","description":"SecurityToken to be checked for validity."},{"name":"user","type":"User","description":"user for whom the valid user token is being searched."},{"name":"securityTokenType","type":"SecurityTokenType","description":"token type that the function is searching for, and it is used to filter the stream of user tokens to only include tokens with the specified type."}],"returns":{"type":"Optional<SecurityToken>","description":"an `Optional` of a `SecurityToken` if one exists and meets the specified criteria, otherwise `Optional.empty`."}}},{"id":"24d5f128-f9ae-4970-8166-f89287bd644f","ancestors":[],"type":"function","name":"createUserInRepository","location":{"offset":" ","indent":2,"insert":182,"start":182},"returns":"User","params":[{"name":"request","type":"UserDto"}],"code":"private User createUserInRepository(UserDto request) {\n    User user = userMapper.userDtoToUser(request);\n    log.trace(\"saving user with id[{}] to repository\", request.getId());\n    return userRepository.save(user);\n  }","skip":false,"length":5,"comment":{"description":"creates a new user entity and saves it to the repository, using the provided UserDto as input.","params":[{"name":"request","type":"UserDto","description":"UserDto object containing information about the user to be created, which is used by the `userMapper` to convert it into a corresponding `User` entity before saving it to the repository."}],"returns":{"type":"User","description":"a saved user object in the repository."}}},{"id":"722cb85b-c19d-4819-b027-26adc0a239e7","ancestors":[],"type":"function","name":"confirmEmail","location":{"offset":" ","indent":2,"insert":188,"start":188},"returns":false,"params":[{"name":"user","type":"User"}],"code":"private void confirmEmail(User user) {\n    user.setEmailConfirmed(true);\n    mailService.sendAccountConfirmed(user);\n    userRepository.save(user);\n  }","skip":false,"length":5,"comment":{"description":"updates a user's email confirmation status to `true`, sends a notification to the user's registered email address, and saves the updated user object in the repository.","params":[{"name":"user","type":"User","description":"User object to be updated with the `emailConfirmed` field set to true and then saved in the user repository."}],"returns":null}},{"id":"f22b8def-e265-4034-8879-12a24279df5d","ancestors":[],"type":"function","name":"encryptUserPassword","location":{"offset":" ","indent":2,"insert":194,"start":194},"returns":false,"params":[{"name":"request","type":"UserDto"}],"code":"private void encryptUserPassword(UserDto request) {\n    request.setEncryptedPassword(passwordEncoder.encode(request.getPassword()));\n  }","skip":false,"length":3,"comment":{"description":"encrypts a user's password using a password encoder and stores the encrypted password in the `request` object.","params":[{"name":"request","type":"UserDto","description":"UserDto object containing the user's login details, which are encrypted using the `passwordEncoder.encode()` method and returned as an encrypted password."}],"returns":null}},{"id":"5c09276e-5d64-47a4-a5b9-002eb56d16a8","ancestors":[],"type":"function","name":"generateUniqueUserId","location":{"offset":" ","indent":2,"insert":198,"start":198},"returns":false,"params":[{"name":"request","type":"UserDto"}],"code":"private void generateUniqueUserId(UserDto request) {\n    request.setUserId(UUID.randomUUID().toString());\n  }","skip":false,"length":3,"comment":{"description":"generates a unique user ID for a given UserDto object using the `UUID.randomUUID()` method and assigns it to the `UserId` property of the request object.","params":[{"name":"request","type":"UserDto","description":"UserDto object that contains the user's information, and it is used to set the user's unique ID generated by the function."}],"returns":null}}]}}}