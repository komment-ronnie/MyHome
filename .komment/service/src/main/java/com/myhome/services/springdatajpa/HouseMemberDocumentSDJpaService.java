{"name":"HouseMemberDocumentSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/HouseMemberDocumentSDJpaService.java","content":{"structured":{"description":"A HouseMemberDocumentSDJpaService class that implements the HouseMemberDocumentService interface. It provides methods for finding and deleting house member documents, updating and creating new house member documents, and compressing and saving image files. The service uses Spring Data JPA and Java IO packages to perform its operations.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.HouseMember Pages: 1 -->\n<svg width=\"206pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 206.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.HouseMember</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"198,-19 0,-19 0,0 198,0 198,-19\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"188.5,-74 9.5,-74 9.5,-55 188.5,-55 188.5,-74\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-44.66C99,-35.93 99,-25.99 99,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-44.75 99,-54.75 102.5,-44.75 95.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"136,-129 62,-129 62,-110 136,-110 136,-129\"/>\n<text text-anchor=\"middle\" x=\"99\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99,-99.66C99,-90.93 99,-80.99 99,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"95.5,-99.75 99,-109.75 102.5,-99.75 95.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"1e14132c-c932-52b1-0343-866c78d8c9c5","ancestors":[],"type":"function","description":"is responsible for handling the creation and management of documents associated with house members in a Java application. It provides methods for finding and deleting documents, as well as creating new documents through the use of MultipartFiles. The service also compresses images before saving them to avoid exceeding file size limits.","name":"HouseMemberDocumentSDJpaService","code":"@Service\npublic class HouseMemberDocumentSDJpaService implements HouseMemberDocumentService {\n\n  private final HouseMemberRepository houseMemberRepository;\n  private final HouseMemberDocumentRepository houseMemberDocumentRepository;\n  @Value(\"${files.compressionBorderSizeKBytes}\")\n  private int compressionBorderSizeKBytes;\n  @Value(\"${files.maxSizeKBytes}\")\n  private int maxFileSizeKBytes;\n  @Value(\"${files.compressedImageQuality}\")\n  private float compressedImageQuality;\n\n  public HouseMemberDocumentSDJpaService(HouseMemberRepository houseMemberRepository,\n      HouseMemberDocumentRepository houseMemberDocumentRepository) {\n    this.houseMemberRepository = houseMemberRepository;\n    this.houseMemberDocumentRepository = houseMemberDocumentRepository;\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> findHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId)\n        .map(HouseMember::getHouseMemberDocument);\n  }\n\n  @Override\n  public boolean deleteHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      if (member.getHouseMemberDocument() != null) {\n        member.setHouseMemberDocument(null);\n        houseMemberRepository.save(member);\n        return true;\n      }\n      return false;\n    }).orElse(false);\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }\n\n  @Override\n  public Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }\n\n  private Optional<HouseMemberDocument> tryCreateDocument(MultipartFile multipartFile,\n      HouseMember member) {\n\n    try (ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream()) {\n      BufferedImage documentImage = getImageFromMultipartFile(multipartFile);\n      if (multipartFile.getSize() < DataSize.ofKilobytes(compressionBorderSizeKBytes).toBytes()) {\n        writeImageToByteStream(documentImage, imageByteStream);\n      } else {\n        compressImageToByteStream(documentImage, imageByteStream);\n      }\n      if (imageByteStream.size() < DataSize.ofKilobytes(maxFileSizeKBytes).toBytes()) {\n        HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream,\n            String.format(\"member_%s_document.jpg\", member.getMemberId()));\n        return Optional.of(houseMemberDocument);\n      } else {\n        return Optional.empty();\n      }\n    } catch (IOException e) {\n      return Optional.empty();\n    }\n  }\n\n  private HouseMember addDocumentToHouseMember(HouseMemberDocument houseMemberDocument,\n      HouseMember member) {\n    member.setHouseMemberDocument(houseMemberDocument);\n    return houseMemberRepository.save(member);\n  }\n\n  private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream,\n      String filename) {\n    HouseMemberDocument newDocument =\n        new HouseMemberDocument(filename, imageByteStream.toByteArray());\n    return houseMemberDocumentRepository.save(newDocument);\n  }\n\n  private void writeImageToByteStream(BufferedImage documentImage,\n      ByteArrayOutputStream imageByteStream)\n      throws IOException {\n    ImageIO.write(documentImage, \"jpg\", imageByteStream);\n  }\n\n  private void compressImageToByteStream(BufferedImage bufferedImage,\n      ByteArrayOutputStream imageByteStream) throws IOException {\n\n    try (ImageOutputStream imageOutStream = ImageIO.createImageOutputStream(imageByteStream)) {\n\n      ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      imageWriter.setOutput(imageOutStream);\n      ImageWriteParam param = imageWriter.getDefaultWriteParam();\n\n      if (param.canWriteCompressed()) {\n        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n        param.setCompressionQuality(compressedImageQuality);\n      }\n      imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);\n      imageWriter.dispose();\n    }\n  }\n\n  private BufferedImage getImageFromMultipartFile(MultipartFile multipartFile) throws IOException {\n    try (InputStream multipartFileStream = multipartFile.getInputStream()) {\n      return ImageIO.read(multipartFileStream);\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0,"comment":null},"item_type":"class","length":121},{"id":"57fc6936-35bd-2aba-4e43-f78576e8cc4e","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"retrieves a `HouseMemberDocument` object associated with a given `memberId`. It first queries the `houseMemberRepository` for the `HouseMember` object using the `memberId`, and then maps the `HouseMember` object to its corresponding `House Member Document`. The function returns an optional `HouseMemberDocument` object containing the mapped data.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the member for which the corresponding House Member Document is being searched.","complex_type":false}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an optional `HouseMemberDocument`.\n\nThe returned Optional object represents an optional HouseMemberDocument. If a HouseMemberDocument is found, the Optional will be Some(HouseMemberDocument), otherwise it will be None. The HouseMemberDocument contained in the Optional has a getHouseMemberDocument() method that returns the HouseMember document itself.","complex_type":true},"usage":{"language":"java","code":"Optional<HouseMemberDocument> houseMemberDocument = findHouseMemberDocument(\"memberId\");\n","description":"\nIn this example, we're calling the findHouseMemberDocument method with a string argument of \"memberId\". The method then takes that string and uses it to get an optional HouseMemberDocument object from the repository.\n\nIf the member ID exists in the repository and is associated with a document, the optional will contain a non-empty HouseMemberDocument object containing the document. Otherwise, it'll be empty.\n\nWe can then use this object to perform operations on the document if it exists (e.g., download it to the client, display its contents)."},"name":"findHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> findHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId)\n        .map(HouseMember::getHouseMemberDocument);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"cc01351c-ef05-58a0-f44f-0a0c4f1c5700","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"deletes a House Member Document associated with a given member ID by finding the document, setting it to null, and then saving the updated member entity back to the repository. If the document is successfully deleted, the function returns `true`.","params":[{"name":"memberId","type_name":"String","description":"ID of the member whose House Member Document is to be deleted.","complex_type":false}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the house member document was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"@Test\n  public void deleteHouseMemberDocument_validMemberId_success() {\n    String memberId = \"1234567890\";\n    boolean result = deleteHouseMemberDocument(memberId);\n    assertTrue(result);\n  }\n","description":"\nThis code is using a valid value for the input 'memberId' which exists in the database and will return true as the document has been successfully deleted.\n\nHowever, if we were to use an invalid member id, it would not be found by the repository and would return false as no changes had been made to the database.\n"},"name":"deleteHouseMemberDocument","code":"@Override\n  public boolean deleteHouseMemberDocument(String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      if (member.getHouseMemberDocument() != null) {\n        member.setHouseMemberDocument(null);\n        houseMemberRepository.save(member);\n        return true;\n      }\n      return false;\n    }).orElse(false);\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"210aec02-98ea-eeb3-dc4d-2c0a338255fa","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"updates a house member's document by finding the member in the repository, creating a new document if necessary, and adding it to the member's record.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file to be updated for the associated member.\n\n* `multipartFile`: A `MultipartFile` object representing the uploaded document. It has various attributes such as `filename`, `contentType`, `body`, and `originalFilename`.","complex_type":true},{"name":"memberId","type_name":"String","description":"id of the member whose House Member Document is being updated.","complex_type":false}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an Optional object containing a House Member Document, created or updated based on the provided Multipart File and member ID.\n\n* `Optional<HouseMemberDocument>` is the type of the output returned by the function. This means that the function may or may not return a `HouseMemberDocument`, depending on whether a document was found and created successfully.\n* `houseMemberRepository.findByMemberId(memberId)` returns an `Optional` containing a `HouseMember` object if a member with the given `memberId` exists in the repository, or `empty()` otherwise. This step is necessary to check whether there is a member with the given `memberId` before attempting to create a document for that member.\n* `map(member -> { ... })` is used to transform the `Optional<HouseMember>` returned by `houseMemberRepository.findBy MemberId()` into an `Optional<HouseMemberDocument>`. This involves calling the `tryCreateDocument` method on the `HouseMember` object and storing the resulting `Optional<HouseMemberDocument>` in a variable named `houseMemberDocument`.\n* `houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member))` is used to add the created document to the House Member object if the `houseMemberDocument` Optional is not empty. This involves calling the `addDocumentToHouseMember` method on the `HouseMember` object and passing in the `document` and `member` parameters.\n* `orElse(Optional.empty())` is used to return an `Optional` containing the result of the `tryCreateDocument` method if the `house MemberDocument` Optional is empty. This ensures that the function always returns a non-empty `Optional`, even if there was no document found or created.\n\nIn summary, the `updateHouseMemberDocument` function takes a `MultipartFile` and a `String memberId` as input, and returns an `Optional<HouseMemberDocument>` representing the created document, or `empty()` if no document was found or created.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile, String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n        Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n        houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n        return houseMemberDocument;\n    }).orElse(Optional.empty());\n}\n","description":"\nThis method would be used like so:\n"},"name":"updateHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"58cdd9df-09d3-09bb-a947-4830b4caea19","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"takes a `MultipartFile` and a `String` member ID as input, and returns an optional `HouseMemberDocument`. It first retrieves the member from the repository based on the ID, then creates a new document if not already present, adds it to the member, and returns the resulting document.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file containing the HouseMember document that needs to be created or updated.\n\n* `multipartFile`: A deserialized `MultipartFile` object representing a file upload. Its properties may include:\n\t+ `file`: The original file uploaded by the user.\n\t+ `originalFilename`: The original filename of the file as provided by the user.\n\t+ `filename`: The filename of the file after processing, if applicable.\n\t+ `contentType`: The content type of the file, such as \"image/jpeg\".\n\t+ `size`: The size of the file in bytes.\n\t+ `error`: Any error messages related to the file upload, if applicable.","complex_type":true},{"name":"memberId","type_name":"String","description":"ID of the member for whom the HouseMemberDocument is to be created.","complex_type":false}],"returns":{"type_name":"OptionalHouseMemberDocument","description":"an `Optional` of a `HouseMemberDocument`.\n\n* `Optional<HouseMemberDocument>`: This represents an optional instance of `HouseMemberDocument`, which means that the function may or may not return a valid document depending on the input.\n* `houseMemberRepository.findBy MemberId(memberId)`: This is a call to the `findBy MemberId` method of the `houseMemberRepository`, which returns an `Optional<HouseMember>` object representing a house member with the given `memberId`.\n* `map(member -> { ... })`: This is a call to the `map` method, which takes a function as an argument that transforms the `Optional<HouseMember>` object into an `Optional<HouseMemberDocument>`. The function is applied to the `house Member` object and returns an `Optional<HouseMemberDocument>` object if the transformation was successful.\n* `ifPresent(document -> addDocumentToHouseMember(document, member))` : This line adds an optional `HouseMemberDocument` to a `HouseMember` object if the `Optional<HouseMemberDocument>` output from the previous step is present. The `addDocumentToHouseMember` method takes the `HouseMemberDocument` and `House Member` objects as arguments and performs the necessary operations to add the document to the member's profile.\n* `orElse(Optional.empty())`: This line returns an `Optional<HouseMemberDocument>` object that is either empty or contains a valid `HouseMemberDocument` if the previous steps were successful in finding a house member with the given `memberId`.","complex_type":true},"usage":{"language":"java","code":"public class HouseMemberService {\n    private final HouseMemberRepository houseMemberRepository;\n    private final HouseMemberDocumentRepository houseMemberDocumentRepository;\n\n    public HouseMemberService(HouseMemberRepository houseMemberRepository, HouseMemberDocumentRepository houseMemberDocumentRepository) {\n        this.houseMemberRepository = houseMemberRepository;\n        this.houseMemberDocumentRepository = houseMemberDocumentRepository;\n    }\n\n    @Override\n    public Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile, String memberId) {\n        return houseMemberRepository.findByMemberId(memberId).map(member -> {\n            Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n            houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n            return houseMemberDocument;\n        }).orElse(Optional.empty());\n    }\n\n    private Optional<HouseMemberDocument> tryCreateDocument(MultipartFile multipartFile, HouseMember member) {\n        return Optional.ofNullable(multipartFile).map(this::getImageFromMultipartFile).map(image -> {\n            ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream();\n            BufferedImage documentImage = getBufferedImage(image);\n            if (image.size() < DataSize.ofKilobytes(compressionBorderSizeKBytes).toBytes()) {\n                writeImageToByteStream(documentImage, imageByteStream);\n            } else {\n                compressImageToByteStream(documentImage, imageByteStream);\n            }\n            if (imageByteStream.size() < DataSize.ofKilobytes(maxFileSizeKBytes).toBytes()) {\n                HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream, String.format(\"member_%s_document.jpg\", member.getMemberId()));\n                return Optional.of(houseMemberDocument);\n            } else {\n                return Optional.empty();\n            }\n        });\n    }\n\n    private HouseMember addDocumentToHouseMember(HouseMemberDocument houseMemberDocument, HouseMember member) {\n        member.setHouseMemberDocument(houseMemberDocument);\n        return houseMemberRepository.save(member);\n    }\n\n    private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream, String filename) {\n        HouseMemberDocument newDocument = new HouseMemberDocument(filename, imageByteStream.toByteArray());\n        return houseMemberDocumentRepository.save(newDocument);\n    }\n\n    private BufferedImage getBufferedImage(MultipartFile multipartFile) throws IOException {\n        try (InputStream inputStream = multipartFile.getInputStream()) {\n            return ImageIO.read(inputStream);\n        }\n    }\n\n    private void writeImageToByteStream(BufferedImage documentImage, ByteArrayOutputStream imageByteStream) throws IOException {\n        ImageIO.write(documentImage, \"jpg\", imageByteStream);\n    }\n\n    private void compressImageToByteStream(BufferedImage bufferedImage, ByteArrayOutputStream imageByteStream) throws IOException {\n        try (ImageOutputStream imageOutStream = ImageIO.createImageOutputStream(imageByteStream)) {\n            ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n            imageWriter.setOutput(imageOutStream);\n            ImageWriteParam param = imageWriter.getDefaultWriteParam();\n            if (param.canWriteCompressed()) {\n                param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n                param.setCompressionQuality(compressedImageQuality);\n            }\n            imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);\n            imageWriter.dispose();\n        }\n    }\n}\n","description":""},"name":"createHouseMemberDocument","code":"@Override\n  public Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId) {\n    return houseMemberRepository.findByMemberId(memberId).map(member -> {\n      Optional<HouseMemberDocument> houseMemberDocument = tryCreateDocument(multipartFile, member);\n      houseMemberDocument.ifPresent(document -> addDocumentToHouseMember(document, member));\n      return houseMemberDocument;\n    }).orElse(Optional.empty());\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"179fee5c-92d1-f4aa-5d4d-128b21797b71","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"takes a multipart file and a member object as input, creates an image from the file, compresses it if necessary, saves it to a file, and returns an optional document object if successful or an empty optional otherwise.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"file to be processed, which contains an image of a member's document.\n\n* `multipartFile.getSize()`: The size of the multipart file in bytes.\n* `DataSize.ofKilobytes(compressionBorderSizeKBytes)`: A constant representing a kilobyte-sized buffer for compression.\n* `DataSize.ofKilobytes(maxFileSizeKBytes)`: A constant representing a kilobyte-sized buffer for saving the document to file.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"HouseMember for which an image document is being created.\n\n* `member`: A HouseMember object representing the member whose document is being created.\n* `multipartFile`: A MultipartFile object containing the image file to be processed.\n* `compressionBorderSizeKBytes`: The size threshold for compressing an image, represented in bytes.\n* `maxFileSizeKBytes`: The maximum file size allowed for a HouseMember document, represented in bytes.","complex_type":true}],"returns":{"type_name":"Optional","description":"an optional `HouseMemberDocument`, which represents a document containing a member's image.\n\n* The `Optional` object contains a `HouseMemberDocument` object if the image was successfully compressed and saved to file, or it is empty if an error occurred during compression or saving.\n* The `HouseMemberDocument` object has a `memberId` field that represents the ID of the member whose document was created, and a `documentPath` field that contains the path to the saved document file.\n* The `documentPath` field is a string that includes the format string `\"member_%s_document.jpg\"` where `%s` is the value of the `memberId` field.","complex_type":true},"usage":{"language":"java","code":"Optional<HouseMemberDocument> document =\n    tryCreateDocument(MultipartFile multipartFile, HouseMember member);\n\nif (document.isPresent()) {\n  // document has been created and saved to the database\n} else {\n  // document was not created because it exceeded max file size or compression border size\n}\n","description":"\nHere are some possible inputs for 'multipartFile' and 'member':\n"},"name":"tryCreateDocument","code":"private Optional<HouseMemberDocument> tryCreateDocument(MultipartFile multipartFile,\n      HouseMember member) {\n\n    try (ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream()) {\n      BufferedImage documentImage = getImageFromMultipartFile(multipartFile);\n      if (multipartFile.getSize() < DataSize.ofKilobytes(compressionBorderSizeKBytes).toBytes()) {\n        writeImageToByteStream(documentImage, imageByteStream);\n      } else {\n        compressImageToByteStream(documentImage, imageByteStream);\n      }\n      if (imageByteStream.size() < DataSize.ofKilobytes(maxFileSizeKBytes).toBytes()) {\n        HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream,\n            String.format(\"member_%s_document.jpg\", member.getMemberId()));\n        return Optional.of(houseMemberDocument);\n      } else {\n        return Optional.empty();\n      }\n    } catch (IOException e) {\n      return Optional.empty();\n    }\n  }","location":{"start":95,"insert":95,"offset":" ","indent":2,"comment":null},"item_type":"method","length":21},{"id":"d7ee4030-715c-24a6-ec4e-575177186636","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"updates a `HouseMember` instance's `HouseMemberDocument` field and saves it to the repository, creating or updating the associated document in the database.","params":[{"name":"houseMemberDocument","type_name":"HouseMemberDocument","description":"HouseMemberDocument object that contains information about the member's documents, which is being added to the member's record in the database through the `save()` method of the `houseMemberRepository`.\n\n* `HouseMemberDocument`: This is a class that represents a document related to a house member.\n* `member`: This is an instance of the `HouseMember` class, which represents a member of a house.\n* `house MemberRepository`: This is an interface or class that provides methods for saving and retrieving house members from a repository.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"HouseMember that will have its `HouseMemberDocument` associated with it set to the provided `houseMemberDocument`.\n\n* `setHouseMemberDocument(houseMemberDocument)` sets the `HouseMemberDocument` field of the `member` object to the provided `houseMemberDocument`.\n* `save()` saves the updated `member` object in the repository.","complex_type":true}],"returns":{"type_name":"HouseMember","description":"a saved HouseMember object containing the updated document information.\n\n* The `houseMemberDocument` parameter is a `HouseMemberDocument` object that represents the document related to the specified `HouseMember`.\n* The `member` parameter is a `HouseMember` object that represents the member for whom the document is being added.\n* The `houseMemberRepository` is a `HouseMemberRepository` interface that provides methods for saving and retrieving `HouseMember` objects. The `save()` method is used to save the updated `HouseMember` object in the database.","complex_type":true},"usage":{"language":"java","code":"HouseMemberDocument houseMemberDocument = new HouseMemberDocument(\"member_1234567890_document.jpg\", byteArray);\nHouseMember member = new HouseMember();\nmember.setMemberId(\"1234567890\");\naddDocumentToHouseMember(houseMemberDocument, member);\n","description":""},"name":"addDocumentToHouseMember","code":"private HouseMember addDocumentToHouseMember(HouseMemberDocument houseMemberDocument,\n      HouseMember member) {\n    member.setHouseMemberDocument(houseMemberDocument);\n    return houseMemberRepository.save(member);\n  }","location":{"start":117,"insert":117,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"cb0c24c4-1650-6691-a24f-9fdfac6b2fd9","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"saves a HouseMemberDocument to the repository, given an image byte stream and a filename.","params":[{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"image data of the HouseMemberDocument that needs to be saved.\n\n* ` ByteArrayOutputStream imageByteStream`: This is an output stream that contains the serialized image data in a byte array. The size of the byte array can be determined by calling the `toByteArray()` method on the output stream, which returns a raw byte array representation of the image data.","complex_type":true},{"name":"filename","type_name":"String","description":"name of the file that contains the image data to be saved.","complex_type":false}],"returns":{"type_name":"HouseMemberDocument","description":"a saved HouseMemberDocument entity in the repository.\n\n* `HouseMemberDocument`: This is the type of object that is being saved in the `houseMemberDocumentRepository`. It has a filename and an image byte array.\n* `newDocument`: This is the newly created House Member Document object that is being saved. It has a filename and an image byte array.\n* `houseMemberDocumentRepository`: This is the repository where the document is being saved. It is responsible for storing the document in the database.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    // initialize ByteArrayOutputStream with image content\n    ByteArrayOutputStream imageByteStream = new ByteArrayOutputStream();\n    \n    // initialize HouseMemberDocument with filename and byte array from imageByteStream\n    HouseMemberDocument houseMemberDocument = saveHouseMemberDocument(imageByteStream, \"member_1234567890.jpg\");\n}\n","description":""},"name":"saveHouseMemberDocument","code":"private HouseMemberDocument saveHouseMemberDocument(ByteArrayOutputStream imageByteStream,\n      String filename) {\n    HouseMemberDocument newDocument =\n        new HouseMemberDocument(filename, imageByteStream.toByteArray());\n    return houseMemberDocumentRepository.save(newDocument);\n  }","location":{"start":123,"insert":123,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"403ab5df-849a-9781-7f49-ef3687207eae","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"writes a `BufferedImage` object to a `ByteArrayOutputStream` by calling the `ImageIO.write()` method with the image format as `\"jpg\"` and the output stream as the specified `ByteArrayOutputStream`.","params":[{"name":"documentImage","type_name":"BufferedImage","description":"2D image that is to be written to a byte stream as a JPEG file.\n\n* The `BufferedImage` object `documentImage` contains an image representation of data.\n* The image is serialized to a ` ByteArrayOutputStream` object `imageByteStream`.\n* The `ImageIO` class writes the image representation from `documentImage` to a JPEG file in `imageByteStream`.","complex_type":true},{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"byte array that will store the image data after it has been written by the `ImageIO.write()` method.\n\n* `imageByteStream` is an instance of `ByteArrayOutputStream`, which means it can be used to create a byte array containing the serialized image data.\n* The method `write(Image image, String format, OutputStream outputStream)` is called with the input `documentImage` as the Image object and `\"jpg\"` as the format string. This writes the image data to the `imageByteStream` instance in JPEG format.","complex_type":true}],"usage":{"language":"java","code":"// BufferedImage documentImage = ...; // create a buffered image\nByteArrayOutputStream imageByteStream = new ByteArrayOutputStream(); // initialize byte stream\nwriteImageToByteStream(documentImage, imageByteStream); // pass buffered image and outputstream to method\nimageByteStream.close(); // close the output stream\n","description":""},"name":"writeImageToByteStream","code":"private void writeImageToByteStream(BufferedImage documentImage,\n      ByteArrayOutputStream imageByteStream)\n      throws IOException {\n    ImageIO.write(documentImage, \"jpg\", imageByteStream);\n  }","location":{"start":130,"insert":130,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"66cbb16e-812c-2bad-e345-719cc182b0c0","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"compresses a `BufferedImage` using an `ImageWriter` and writes it to a byte stream, allowing for flexible control over compression mode and quality.","params":[{"name":"bufferedImage","type_name":"BufferedImage","description":"2D graphics image to be compressed and written to an output stream.\n\nThe `BufferedImage` object represents an image that has been loaded into memory using the `BufferedImage` class. The `BufferedImage` object has various attributes such as height, width, and depth, which correspond to the dimensions of the image in pixels. Additionally, it may have other properties or methods associated with its loading or manipulation.\n\nThe `ImageOutputStream` object is an output stream for images that allows for the writing of image data to a file or memory buffer. It provides methods for setting image write parameters and writing image data to the output stream.\n\nThe `ImageWriter` class represents an image writer that can be used to write image data to a variety of image file formats. The `ImageWriteParam` class defines the parameters for writing an image, including compression mode and quality.\n\nIn summary, the `compressImageToByteStream` function is a method that takes in an `BufferedImage` object and an ` ByteArrayOutputStream` object as input and writes the image data to a memory buffer in a compressed format using an `ImageWriter`.","complex_type":true},{"name":"imageByteStream","type_name":"ByteArrayOutputStream","description":"byte array that will be used to store the compressed image data.\n\n* The `BufferedImage` parameter `bufferedImage` is converted into an IIOImage object, which serves as the input for the image compression.\n* The `ByteArrayOutputStream` object `imageByteStream` is used to store the compressed image data in a byte array format.\n* The `ImageWriter` instance `imageWriter` is created with the JPEG format, and its default write parameters are retrieved using the `getDefaultWriteParam()` method.\n* The compression mode can be set explicitly using the `setCompressionMode()` method, and the compression quality can be adjusted using the `setCompressionQuality()` method.\n* Finally, the compressed image data is written to the output stream using the `write()` method, and the image writer is disposed of using the `dispose()` method.","complex_type":true}],"usage":{"language":"java","code":"BufferedImage bufferedImage = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);\nByteArrayOutputStream imageByteStream = new ByteArrayOutputStream();\ncompressImageToByteStream(bufferedImage, imageByteStream);\n","description":"\nThis example will compress the given BufferedImage to a byte array using the JPEG compression and then write it to the given ByteArrayOutputStream. This method is expected to work correctly if the input 'imageByteStream' has enough capacity to hold the compressed image data."},"name":"compressImageToByteStream","code":"private void compressImageToByteStream(BufferedImage bufferedImage,\n      ByteArrayOutputStream imageByteStream) throws IOException {\n\n    try (ImageOutputStream imageOutStream = ImageIO.createImageOutputStream(imageByteStream)) {\n\n      ImageWriter imageWriter = ImageIO.getImageWritersByFormatName(\"jpg\").next();\n      imageWriter.setOutput(imageOutStream);\n      ImageWriteParam param = imageWriter.getDefaultWriteParam();\n\n      if (param.canWriteCompressed()) {\n        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);\n        param.setCompressionQuality(compressedImageQuality);\n      }\n      imageWriter.write(null, new IIOImage(bufferedImage, null, null), param);\n      imageWriter.dispose();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"27467c8c-83cc-6ba1-1441-344617f45342","ancestors":["1e14132c-c932-52b1-0343-866c78d8c9c5"],"type":"function","description":"reads an image from an input stream provided by a `MultipartFile` object and returns a `BufferedImage`.","params":[{"name":"multipartFile","type_name":"MultipartFile","description":"MultipartFile object containing the image data that will be read and returned as a BufferedImage.\n\n* `InputStream multipartFileStream`: This is an input stream obtained from the `getInputStream()` method of the `MultipartFile` object. It provides access to the file's contents as a sequence of bytes.\n* The function then uses the `ImageIO` class to read the contents of the input stream and returns a `BufferedImage`.","complex_type":true}],"returns":{"type_name":"BufferedImage","description":"a `BufferedImage` object containing the image data from the provided Multipart File.\n\n* The output is an instance of `BufferedImage`, which represents a raster image.\n* The image has been read from the input stream using `ImageIO.read()` method.\n* The image is stored in memory for further processing or display.","complex_type":true},"usage":{"language":"java","code":"private void someMethod(){\n    MultipartFile multipartFile = ...; // a file chosen by the user\n    try {\n        BufferedImage image = getImageFromMultipartFile(multipartFile);\n        // Do something with the image, such as saving it to disk\n        ImageIO.write(image, \"jpg\", new File(\"path/to/new/file.jpg\"));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n","description":"\nThis example method would read the contents of a MultipartFile object and write them to disk as an image file using ImageIO. The exact path where the file is saved would be determined by the \"path/to/new/file.jpg\" variable in the example code."},"name":"getImageFromMultipartFile","code":"private BufferedImage getImageFromMultipartFile(MultipartFile multipartFile) throws IOException {\n    try (InputStream multipartFileStream = multipartFile.getInputStream()) {\n      return ImageIO.read(multipartFileStream);\n    }\n  }","location":{"start":154,"insert":154,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5}]}}}