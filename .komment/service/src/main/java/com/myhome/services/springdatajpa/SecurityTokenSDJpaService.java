{"name":"SecurityTokenSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/SecurityTokenSDJpaService.java","content":{"structured":{"description":"A `SecurityTokenSDJpaService` class that implements `SecurityTokenService` and provides functionality for creating and managing security tokens. The class uses Spring Data JPA to interact with a token repository, and it provides methods for creating email confirmation tokens, password reset tokens, and unused tokens. The code also includes a method for calculating the expiration date of tokens based on a specified number of days.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"846e1e82-61fb-4389-1342-3aff33bdeadf","ancestors":[],"type":"function","description":"is a Java class that implements a SecurityToken service using Spring Data JPA. It provides methods for creating and managing security tokens, including email confirmation and password reset tokens. The class uses Spring Boot configuration to set the expiration time of the tokens.","name":"SecurityTokenSDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class SecurityTokenSDJpaService implements SecurityTokenService {\n\n  private final SecurityTokenRepository securityTokenRepository;\n\n  @Value(\"${tokens.reset.expiration}\")\n  private Duration passResetTokenTime;\n  @Value(\"${tokens.email.expiration}\")\n  private Duration emailConfirmTokenTime;\n\n  private SecurityToken createSecurityToken(SecurityTokenType tokenType, Duration liveTimeSeconds, User tokenOwner) {\n    String token = UUID.randomUUID().toString();\n    LocalDate creationDate = LocalDate.now();\n    LocalDate expiryDate = getDateAfterDays(LocalDate.now(), liveTimeSeconds);\n    SecurityToken newSecurityToken = new SecurityToken(tokenType, token, creationDate, expiryDate, false, null);\n    newSecurityToken.setTokenOwner(tokenOwner);\n    newSecurityToken = securityTokenRepository.save(newSecurityToken);\n    return newSecurityToken;\n  }\n\n  @Override\n  public SecurityToken createEmailConfirmToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.EMAIL_CONFIRM, emailConfirmTokenTime, tokenOwner);\n  }\n\n  @Override\n  public SecurityToken createPasswordResetToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.RESET, passResetTokenTime, tokenOwner);\n  }\n\n  @Override\n  public SecurityToken useToken(SecurityToken token) {\n    token.setUsed(true);\n    token = securityTokenRepository.save(token);\n    return token;\n  }\n\n  private LocalDate getDateAfterDays(LocalDate date, Duration liveTime) {\n    return date.plusDays(liveTime.toDays());\n  }\n}","location":{"start":16,"insert":16,"offset":" ","indent":0,"comment":null},"item_type":"class","length":42},{"id":"da61cf89-6cae-2ca5-5441-416ba23d2dd2","ancestors":["846e1e82-61fb-4389-1342-3aff33bdeadf"],"type":"function","description":"generates a unique security token based on input parameters and saves it to a repository for later use.","params":[{"name":"tokenType","type_name":"SecurityTokenType","description":"type of security token being created, which determines the specific fields and values that are populated in the resulting security token object.\n\n1. `SecurityTokenType`: This enumeration value represents the type of security token being created. It can take on the following values: `None`, `Basic`, `KBAuth`, `OAuth2`, and `Jwt`.\n2. `Duration`: This class represents a duration in seconds, which is used to determine the lifetime of the security token.\n3. `LiveTimeSeconds`: This field represents the total number of seconds that the security token will be valid for, starting from the creation date.\n4. `User`: This field represents the user who owns the security token.\n\nThe function creates a new security token instance with the specified properties and saves it to the repository.","complex_type":true},{"name":"liveTimeSeconds","type_name":"Duration","description":"duration of time for which the security token is valid, and it is used to calculate the expiration date of the token.\n\n* `LiveTimeSeconds`: This represents the duration for which the security token is valid. It is a `Duration` object, which can be used to represent a time interval in seconds.\n* `getDateAfterDays()`: This is a method that takes a date as input and returns a new date after a specified number of days have passed since the date. It is used to calculate the expiration date of the security token based on the `liveTimeSeconds` parameter.","complex_type":true},{"name":"tokenOwner","type_name":"User","description":"user associated with the generated security token.\n\n* `tokenOwner`: The owner of the security token, which can be a user or an organization.\n* `tokenType`: The type of security token created, such as `USER_TOKEN` or `ORGANIZATION_TOKEN`.\n* `liveTimeSeconds`: The number of seconds that the security token is valid for.\n* `creationDate`: The date and time when the security token was created.\n* `expiryDate`: The date and time when the security token expires.\n* `false`: A boolean value indicating whether the security token is revoked or not.\n* `null`: A null value representing the absence of any additional attributes or properties.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a newly created SecurityToken instance with the specified token type, owner, creation date, expiry date, and other properties.\n\n* `token`: A unique token string generated using the `UUID.randomUUID()` method.\n* `creationDate`: The current date and time when the token was created, represented as a `LocalDate` object.\n* `expiryDate`: The date and time after which the token will expire, calculated by subtracting the `liveTimeSeconds` from the current date and time using the `getDateAfterDays()` method. Also represented as a `LocalDate` object.\n* `tokenOwner`: The user who owns the token, represented as an instance of the `User` class.\n* `newSecurityToken`: A new `SecurityToken` instance created by calling the `securityTokenRepository.save()` method and passing in the generated token details.","complex_type":true},"usage":{"language":"java","code":"// Example usage\npublic static void main(String[] args) {\n    User user = new User();\n    SecurityTokenType tokenType = SecurityTokenType.EMAIL_CONFIRM;\n    Duration liveTimeSeconds = Duration.ofDays(30); // 30 days expiration\n    SecurityToken securityToken = createSecurityToken(tokenType, liveTimeSeconds, user);\n}\n","description":""},"name":"createSecurityToken","code":"private SecurityToken createSecurityToken(SecurityTokenType tokenType, Duration liveTimeSeconds, User tokenOwner) {\n    String token = UUID.randomUUID().toString();\n    LocalDate creationDate = LocalDate.now();\n    LocalDate expiryDate = getDateAfterDays(LocalDate.now(), liveTimeSeconds);\n    SecurityToken newSecurityToken = new SecurityToken(tokenType, token, creationDate, expiryDate, false, null);\n    newSecurityToken.setTokenOwner(tokenOwner);\n    newSecurityToken = securityTokenRepository.save(newSecurityToken);\n    return newSecurityToken;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"c821661b-d682-6893-7742-0992774b0f56","ancestors":["846e1e82-61fb-4389-1342-3aff33bdeadf"],"type":"function","description":"creates a security token for an user with the type \"EMAIL_CONFIRM\". It returns the created security token based on the email confirm token time and the user's identity.","params":[{"name":"tokenOwner","type_name":"User","description":"user for whom an email confirmation token is being generated.\n\n* `tokenOwner`: A `User` object representing the user for whom an email confirmation token is being created. The `User` class has various attributes, including `id`, `username`, and `email`.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a security token with the type `EMAIL_CONFIRM`.\n\n* `SecurityTokenType`: This field indicates the type of security token generated, specifically `EMAIL_CONFIRM`.\n* `emailConfirmTokenTime`: The time at which the token was created.\n* `tokenOwner`: The user whose account is being confirmed through this token.","complex_type":true},"usage":{"language":"java","code":"SecurityToken newEmailToken = securityTokenService.createEmailConfirmToken(tokenOwner);\n","description":""},"name":"createEmailConfirmToken","code":"@Override\n  public SecurityToken createEmailConfirmToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.EMAIL_CONFIRM, emailConfirmTokenTime, tokenOwner);\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"de253cfc-b5cb-5d9d-4242-cb8fa48525c6","ancestors":["846e1e82-61fb-4389-1342-3aff33bdeadf"],"type":"function","description":"creates a security token for password reset with a specified expiration time and owner user.","params":[{"name":"tokenOwner","type_name":"User","description":"user for whom the password reset token is being generated.\n\n* `tokenOwner`: The user whose password is being reset.\n* `passResetTokenTime`: The time when the password reset token was created.","complex_type":true}],"returns":{"type_name":"instance","description":"a SecurityToken instance representing a password reset token.\n\nThe function returns a SecurityToken object named `createPasswordResetToken`. The SecurityToken object has three attributes: `type`, which is set to `SecurityTokenType.RESET`; `time`, which is set to the current time; and `owner`, which refers to the user for whom the token was created.","complex_type":true},"usage":{"language":"java","code":"User user = new User(1L, \"john\", \"doe\");\nSecurityToken token = securityTokenService.createPasswordResetToken(user);\n","description":"\nIn this example, a SecurityToken object is created with the type of RESET and the User object as its tokenOwner."},"name":"createPasswordResetToken","code":"@Override\n  public SecurityToken createPasswordResetToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.RESET, passResetTokenTime, tokenOwner);\n  }","location":{"start":42,"insert":42,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"92632c67-0e1d-1d89-f34b-f7afa7dfc2eb","ancestors":["846e1e82-61fb-4389-1342-3aff33bdeadf"],"type":"function","description":"updates a provided SecurityToken by marking it as used and saving it to the repository for future reference.","params":[{"name":"token","type_name":"SecurityToken","description":"SecurityToken object that will be used and then saved in the repository after being marked as used.\n\n* `setUsed(true)` sets the `used` property to `true`, indicating that the token has been used.\n* The `securityTokenRepository` saves the modified token in its database.\n* The returned token is the updated one with the `used` property set to `true`.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a new SecurityToken object with updated 'used' field set to true and persisted in the repository.\n\n* `token`: The SecurityToken instance that has been modified by setting its `used` field to `true`.\n* `save()`: This method is used to save the SecurityToken instance in the repository.\n\nThe returned SecurityToken instance represents a token that has been marked as used and is stored in the repository for future reference or further processing.","complex_type":true},"usage":{"language":"java","code":"SecurityToken token = new SecurityToken(SecurityTokenType.EMAIL_CONFIRM, UUID.randomUUID().toString(), LocalDate.now(), LocalDate.now().plusDays(3), false, null);\ntoken.setUsed(true);\nsecurityTokenRepository.save(token);\n","description":""},"name":"useToken","code":"@Override\n  public SecurityToken useToken(SecurityToken token) {\n    token.setUsed(true);\n    token = securityTokenRepository.save(token);\n    return token;\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"2120913c-36f9-c0a0-4948-d2cc567f4a2f","ancestors":["846e1e82-61fb-4389-1342-3aff33bdeadf"],"type":"function","description":"takes a `LocalDate` and a `Duration` as input, and returns the result of adding the specified number of days to the input date.","params":[{"name":"date","type_name":"LocalDate","description":"initial date that will be extended by the specified `liveTime`.\n\n* `LocalDate`: The input date is represented as a `LocalDate`, which means it can be interpreted as a date without time zone information.\n* `date`: This variable holds the initial date value passed to the function.\n* `liveTime`: The `Duration` object represents the number of days that the `date` should be advanced after its original value.","complex_type":true},{"name":"liveTime","type_name":"Duration","description":"number of days to add to the input `LocalDate` to obtain the desired date after the specified duration has passed.\n\n* `Duration liveTime`: A `Duration` object representing the time duration in days to be added to the input `LocalDate`.\n* `toDays()`: A method that returns the number of days represented by the `Duration` value.","complex_type":true}],"returns":{"type_name":"LocalDate","description":"a new `LocalDate` instance representing the date that is `liveTime` days after the original `date`.\n\n* The output is a `LocalDate` object, which represents a date in the format of \"YYYY-MM-DD\".\n* The output has been calculated by adding a specified number of days to the input `LocalDate` parameter.\n* The resulting date is always in the future, as the method adds days to the original date.","complex_type":true},"usage":{"language":"java","code":"LocalDate today = LocalDate.now();\nDuration twoDays = Duration.ofDays(2);\nLocalDate tomorrow = getDateAfterDays(today, twoDays); //tomorrow is a day after today\n","description":"\nIn this example, the method getDateAfterDays takes in a LocalDate date and a Duration liveTime as inputs. The method then returns a new LocalDate that is calculated by adding the duration to the original LocalDate. In this case, the returned value would be two days after \"today\"."},"name":"getDateAfterDays","code":"private LocalDate getDateAfterDays(LocalDate date, Duration liveTime) {\n    return date.plusDays(liveTime.toDays());\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3}]}}}