{"name":"AmenitySDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java","content":{"structured":{"description":"An AmenitySDJpaService class that implements amenity service functionality using Spring Data JPA. The class has several methods for creating, retrieving, updating, and deleting amenities. These methods use the Spring Data JPA repository interface to interact with the database. Specifically, the class uses the AmenityRepository, CommunityRepository, CommunityService, and AmenityApiMapper classes to perform these operations.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a46ab1d7-c8f2-d08a-8d4e-83c088667951","ancestors":[],"type":"function","description":"is a Java class that provides amenity-related operations such as creating, updating, and deleting amenities in a database using JPA. The class provides methods for creating new amenities, retrieving amenity details, deleting amenities, and listing all amenities for a specific community.","name":"AmenitySDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class AmenitySDJpaService implements AmenityService {\n\n  private final AmenityRepository amenityRepository;\n  private final CommunityRepository communityRepository;\n  private final CommunityService communityService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }\n\n  @Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }\n\n  @Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }\n\n  @Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }\n}","location":{"start":35,"insert":35,"offset":" ","indent":0,"comment":null},"item_type":"class","length":71},{"id":"f299be2d-8148-549e-454e-96c4c300c4d7","ancestors":["a46ab1d7-c8f2-d08a-8d4e-83c088667951"],"type":"function","description":"creates a list of `AmenityDto` objects from a set of `Amenity` objects, and then saves them to the database. It returns an `Optional` containing the created `AmenityDto` objects.","params":[{"name":"amenities","type_name":"Set<AmenityDto>","description":"set of amenities to be created in the community, which are transformed into a list of `AmenityDto` objects and then saved in the database.\n\n* `Set<AmenityDto> amenities`: A set containing the amenities to be created in the community. Each amenity is represented as an `AmenityDto`.\n* `String communityId`: The ID of the community where the amenities will be created.\n\nThe function first retrieves the community details using `communityService.getCommunityDetailsById(communityId)`, and then maps each `AmenityDto` to an `Amenity` object using `amenityApiMapper.amenityDtoToAmenity`. The resulting list of `Amenity` objects is then transformed into a list of `AmenityDto` objects using `amenityApiMapper.amenityToAmenityDto`. Finally, the list of created `AmenityDto` objects is returned as an `Optional`.","complex_type":true},{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added or updated.","complex_type":false}],"returns":{"type_name":"OptionalListAmenityDto","description":"a list of `AmenityDto` objects representing the created amenities.\n\n* `Optional<List<AmenityDto>>`: This indicates that the function returns an optional list of amenities, which means that the list may be empty if no amenities were created successfully.\n* `createAmenities(Set<AmenityDto> amenities, String communityId)`: This parameter represents the input set of amenities and the community ID to create amenities for.\n* `final Optional<Community> community = communityService.getCommunityDetailsById(communityId);`: This line retrieves the community details for the specified community ID using the `communityService`. If the community is not found, the `Optional` object will be empty.\n* `if (!community.isPresent()) {`: This line checks if the community was found or not. If it wasn't, the function returns an empty list.\n* `final List<Amenity> amenitiesWithCommunity = amenities.stream()`: This line streams the input set of amenities and transforms each amenity into a new `Amenity` object that has a reference to the retrieved community.\n* `map(amenity -> {`: This line maps each amenity to a new `Amenity` object with the retrieved community reference.\n* `amenity.setCommunity(community.get());`: This line sets the community reference of each transformed amenity to the retrieved community.\n* `return amenitiesWithCommunity.stream()`: This line streams the list of transformed amenities and saves them in the database using the `amenityRepository`.\n* `final List<AmenityDto> createdAmenities =`: This line retrieves the list of newly created amenities from the database using the `amenityRepository`.\n* `return Optional.of(createdAmenities);`: This line returns an optional list of newly created amenities.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    // Obtain the Community entity object by passing a valid community ID to the getCommunityDetailsById() method.\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    \n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    \n    // Transform AmenityDto objects to Amenity entity objects using the amenityApiMapper object's amenityDtoToAmenity() method.\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          // Set the obtained Community entity object to each Amenity entity object's community property.\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    \n    // Save all Amenity entity objects to the database using the repository's saveAll() method.\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    \n    return Optional.of(createdAmenities);\n  }\n}\n","description":""},"name":"createAmenities","code":"@Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2,"comment":null},"item_type":"method","length":19},{"id":"c63cbc3f-3a75-8483-f740-e150cb2fc401","ancestors":["a46ab1d7-c8f2-d08a-8d4e-83c088667951"],"type":"function","description":"retrieves an Optional<Amenity> object representing the details of an amenity with the specified `amenityId`.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity for which details are being retrieved.","complex_type":false}],"returns":{"type_name":"Optional","description":"an Optional object containing the details of the amenity with the provided ID.\n\n* `Optional<Amenity>` represents an optional amenity details object, which means that if no amenity is found with the given `amenityId`, the function will return an empty Optional.\n* `amenityRepository.findByAmenityId(amenityId)` is a method call that retrieves an amenity details object from the repository based on the `amenityId` parameter.","complex_type":true},"usage":{"language":"java","code":"Optional<Amenity> result = getAmenityDetails(\"amenityId\");\nif (result.isPresent()) {\n    Amenity amenity = result.get();\n    // Use the amenity object as needed...\n} else {\n    System.out.println(\"Amenity not found with id \" + amenityId);\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"a92027d3-d2d8-1fa4-034e-a89de98ed347","ancestors":["a46ab1d7-c8f2-d08a-8d4e-83c088667951"],"type":"function","description":"deletes an amenity from a community by removing it from the community's amenities list and then deleting the amenity from the repository.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity that needs to be deleted.","complex_type":false}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the amenity was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"boolean success = deleteAmenity(\"amenityId\");\n","description":""},"name":"deleteAmenity","code":"@Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }","location":{"start":69,"insert":69,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"dba0f004-a565-2198-0d4d-6f31541bd482","ancestors":["a46ab1d7-c8f2-d08a-8d4e-83c088667951"],"type":"function","description":"retrieves a set of amenities associated with a given community ID using a combination of repository and method calls, and returns the result in a set object.","params":[{"name":"communityId","type_name":"String","description":"community ID that is used to retrieve the amenities associated with it.","complex_type":false}],"returns":{"type_name":"SetAmenity","description":"a set of amenities associated with a specific community.\n\n* The output is a `Set<Amenity>` containing all the amenities associated with a specific community.\n* The `Community` objects in the input are used to retrieve the amenities for each community.\n* If there are no amenities associated with a particular community, the output will be an empty set (`{}`).\n* The `map()` method is used to transform the `Community` objects into `Amenity` objects, and the resulting `Set<Amenity>` is returned as the output.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    AmenitySDJpaService service = new AmenitySDJpaService();\n    String communityId = \"123456789\";\n    Set<Amenity> amenities = service.listAllAmenities(communityId);\n    // ...\n}\n","description":""},"name":"listAllAmenities","code":"@Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }","location":{"start":81,"insert":81,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"0ac9ff60-2a48-4496-054d-4989999df58c","ancestors":["a46ab1d7-c8f2-d08a-8d4e-83c088667951"],"type":"function","description":"updates an amenity in the database based on the input `updatedAmenity`. It first retrieves the existing amenity with the matching `amenityId`, then updates its name, price, and other properties using the `findByCommunityId` method. Finally, it saves the updated amenity to the repository.","params":[{"name":"updatedAmenity","type_name":"AmenityDto","description":"updated amenity object containing the latest values for name, price, community Id and description.\n\n* `amenityId`: A string representing the amenity ID.\n* `communityId`: A string representing the community ID associated with the amenity.\n* `name`: A string representing the name of the amenity.\n* `price`: An integer representing the price of the amenity.\n* `description`: A string representing the description of the amenity.\n\nThe function then queries the `amenityRepository` to find an existing amenity with the same `amenityId`, and if found, it updates the `communityId` associated with that amenity using the `communityRepository`. If no matching amenity is found, the function creates a new `Amenity` object with the provided values and saves it to the repository.","complex_type":true}],"returns":{"type_name":"OptionalAmenity","description":"a boolean value indicating whether the amenity was updated successfully or not.\n\n* `map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())`: This line returns a stream of `Community` objects that are associated with the given `Amenity` object. The `findByCommunityId` method is called on the `communityRepository` to retrieve the communities associated with the `Amenity`.\n* `map(community -> { ... })`: This line returns a stream of `Amenity` objects that are updated with the latest values from the `updatedAmenity` object. The `setName`, `setPrice`, `setId`, `setAmenityId`, and `setDescription` methods are called on each `Amenity` object to update its properties.\n* `orElse(null)`: This line returns a stream of `Amenity` objects that are either updated or returned as `null` if there is no community associated with the given `Amenity`.\n* `map(amenityRepository::save)`: This line saves the updated `Amenity` objects in the database using the `amenityRepository`.\n\nThe output of the `updateAmenity` function is a stream of `Amenity` objects that are either updated or returned as `null`, depending on whether there is a community associated with the given `Amenity`.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n                Amenity updated = new Amenity();\n                updated.setName(updatedAmenity.getName());\n                updated.setPrice(updatedAmenity.getPrice());\n                updated.setId(amenity.getId());\n                updated.setAmenityId(amenityId);\n                updated.setDescription(updatedAmenity.getDescription());\n                return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n}\n","description":"\nThis method will update the amenity with the given id in the database with the values from the AmenityDto object."},"name":"updateAmenity","code":"@Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }","location":{"start":88,"insert":88,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17}]}}}