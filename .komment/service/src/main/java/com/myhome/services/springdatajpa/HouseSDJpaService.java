{"name":"HouseSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java","content":{"structured":{"description":"A HouseSDJpaService class that implements HouseService, providing CRUD operations for houses and their members through JPA repositories. The service uses Lombok to simplify constructor injection and Spring Data JPA to query and save data. The code lists all houses, adds and removes members from houses, and retrieves house details and member information by ID.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.springdatajpa.HouseSDJpaService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.springdatajpa.HouseSDJpaService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"interfacecom_1_1myhome_1_1services_1_1HouseService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"180.5,-96 19.5,-96 19.5,-66 180.5,-66 180.5,-96\"/>\n<text text-anchor=\"start\" x=\"27.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"5d650c18-0e14-fe84-944c-9f39fd29c2ad","ancestors":[],"type":"function","description":"is an implementation of the HouseService interface that provides methods for managing houses and their members using JPA. The class has several methods for adding, listing, and deleting house members, as well as retrieving details of a specific house. It also provides methods for listing house members based on user ID.","name":"HouseSDJpaService","code":"@RequiredArgsConstructor\n@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseMemberRepository houseMemberRepository;\n  private final HouseMemberDocumentRepository houseMemberDocumentRepository;\n  private final CommunityHouseRepository communityHouseRepository;\n\n  private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }\n\n  @Override\n  public Set<CommunityHouse> listAllHouses() {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll().forEach(communityHouses::add);\n    return communityHouses;\n  }\n\n  @Override\n  public Set<CommunityHouse> listAllHouses(Pageable pageable) {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);\n    return communityHouses;\n  }\n\n  @Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      Set<HouseMember> savedMembers = new HashSet<>();\n      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));\n      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));\n      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);\n\n      communityHouse.getHouseMembers().addAll(savedMembers);\n      communityHouseRepository.save(communityHouse);\n      return savedMembers;\n    }).orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean deleteMemberFromHouse(String houseId, String memberId) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      boolean isMemberRemoved = false;\n      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {\n        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();\n        for (HouseMember member : houseMembers) {\n          if (member.getMemberId().equals(memberId)) {\n            houseMembers.remove(member);\n            communityHouse.setHouseMembers(houseMembers);\n            communityHouseRepository.save(communityHouse);\n            member.setCommunityHouse(null);\n            houseMemberRepository.save(member);\n            isMemberRemoved = true;\n            break;\n          }\n        }\n      }\n      return isMemberRemoved;\n    }).orElse(false);\n  }\n\n  @Override\n  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {\n    return communityHouseRepository.findByHouseId(houseId);\n  }\n\n  @Override\n  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)\n    );\n  }\n\n  @Override\n  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,\n      Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)\n    );\n  }\n}","location":{"start":35,"insert":35,"offset":" ","indent":0,"comment":null},"item_type":"class","length":84},{"id":"5fe8c848-34e2-04b6-1549-f86bed21b489","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"generates a unique identifier using the `UUID.randomUUID()` method and returns it as a string.","params":[],"returns":{"type_name":"String","description":"a unique string of characters generated using the `UUID` class.","complex_type":false},"usage":{"language":"java","code":"private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }\n\n// Example usage\nString uniqueID = generateUniqueId();\n","description":""},"name":"generateUniqueId","code":"private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":42,"insert":42,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"c2aa2210-6c11-4080-9449-e4123b9be42b","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"queries the community House repository to retrieve a list of all Community Houses, then returns a `Set` of those houses.","params":[],"returns":{"type_name":"Set","description":"a set of all community houses stored in the database.\n\n* `Set<CommunityHouse> communityHouses`: This is a set of `CommunityHouse` objects representing all the houses in the system.\n* Each element in the set is a `CommunityHouse` object, which contains information about a specific house, such as its name, address, and category.\n* The set is empty when no houses exist in the system.\n* The set is populated by calling the `findAll()` method on the `communityHouseRepository`, which retrieves all the houses from the database or data source.\n* The `forEach()` method is used to iterate through the elements of the set and add each house to the `communityHouses` set.","complex_type":true},"usage":{"language":"java","code":"Set<CommunityHouse> communityHouses = new HashSet<>();\ncommunityHouseRepository.findAll().forEach(communityHouses::add);\nreturn communityHouses;\n","description":"\nThis code uses the repository to find all instances of CommunityHouse and adds each instance to a Set, which is returned as the result of the method."},"name":"listAllHouses","code":"@Override\n  public Set<CommunityHouse> listAllHouses() {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll().forEach(communityHouses::add);\n    return communityHouses;\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"ba988515-8d6f-d797-554f-195bcf3a3134","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"retrieves a list of `CommunityHouse` objects from the repository and returns a set containing all the retrieved objects.","params":[{"name":"pageable","type_name":"Pageable","description":"page number and the number of houses per page to be retrieved from the database, allowing for efficient retrieval of a subset of the community houses.\n\n* `Pageable`: This is an interface in Java that provides methods for navigating and retrieving a page of data from a larger dataset. It has various attributes/properties such as `getPageNumber()`, `getPageSize()`, `getTotalPages()`, and `getTotalElements()` to aid in navigation and data retrieval.","complex_type":true}],"returns":{"type_name":"Set","description":"a set of `CommunityHouse` objects.\n\nThe output is a `Set` of `CommunityHouse` objects, which means it is an unordered collection of items that can contain duplicates and is guaranteed to be a unique set.\n\nThe `Set` is generated by calling the `findAll` method on the `communityHouseRepository`, passing in a `Pageable` object as a parameter. This method returns a stream of `CommunityHouse` objects, which are then added to the `Set`.\n\nThe `Pageable` object used in the method call is responsible for paginating the results, meaning it controls the number of items returned in each page of the result set.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public Set<CommunityHouse> listAllHouses(Pageable pageable) {\n    // this method returns a set of community houses based on the Pageable input provided\n    // here, we create an empty set to store our results\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    // we use the repository method findAll(Pageable pageable) to find all community houses and add them to the set\n    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);\n    // return the set of community houses\n    return communityHouses;\n  }\n","description":"\nAn example input for this method would be a Pageable object, which can include information about what page of results to return and how many results to return per page."},"name":"listAllHouses","code":"@Override\n  public Set<CommunityHouse> listAllHouses(Pageable pageable) {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);\n    return communityHouses;\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"f717459e-4d64-3597-a644-829b3fc78bef","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"updates an existing house's members by generating unique member IDs, linking them to the community house and its members, and saving all changes.","params":[{"name":"houseId","type_name":"String","description":"id of the house for which new members are being added.","complex_type":false},{"name":"houseMembers","type_name":"Set<HouseMember>","description":"set of house members that need to be added or saved in the database.\n\n* `houseId`: The unique identifier of the house for which the members are being added.\n* `houseMembers`: A set of `HouseMember` objects containing the new members to be added to the community house. Each member has a unique `memberId` attribute generated using the `generateUniqueId()` method, and is associated with the community house through the `setCommunityHouse()` method.\n* `houseMemberRepository`: A repository object used for saving the newly created or updated `HouseMember` objects in the database.","complex_type":true}],"returns":{"type_name":"HashSetHouseMember","description":"a `Set` of `HouseMember` objects, each with a unique ID and a reference to the corresponding `CommunityHouse`.\n\nThe output is a `Set` of `HouseMember` objects, representing the newly added members to the community house.\n\nThe `Set` is generated using the `map` method, which applies a given function (in this case, an anonymous inner class that creates and saves new `HouseMember` objects) to each element in the input `Set` of `HouseMember` objects.\n\nThe inner class uses the `generateUniqueId()` method to generate unique IDs for each new `HouseMember` object, and sets the `memberId` property accordingly. It also sets the `CommunityHouse` property to the corresponding `CommunityHouse` object, using the `setCommunityHouse()` method.\n\nFinally, the `saveAll()` method of the `house MemberRepository` is called to save all the new `HouseMember` objects, and the `orElse()` method is used to return the `Set` of saved objects if any, or an empty `Set` otherwise.","complex_type":true},"usage":{"language":"java","code":"// The houseId is the unique identifier for a house in the system, and the Set<HouseMember> contains the list of HouseMembers that you want to add to the house. \nSet<HouseMember> houseMembers = new HashSet<>();\nhouseMembers.add(new HouseMember(\"member1\", \"Member1's name\", \"Member1's email\", \"Member1's phone number\"));\nhouseMembers.add(new HouseMember(\"member2\", \"Member2's name\", \"Member2's email\", \"Member2's phone number\"));\nhouseMembers.add(new HouseMember(\"member3\", \"Member3's name\", \"Member3's email\", \"Member3's phone number\"));\nSet<HouseMember> savedHouseMembers = addHouseMembers(\"101\", houseMembers);\n","description":""},"name":"addHouseMembers","code":"@Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      Set<HouseMember> savedMembers = new HashSet<>();\n      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));\n      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));\n      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);\n\n      communityHouse.getHouseMembers().addAll(savedMembers);\n      communityHouseRepository.save(communityHouse);\n      return savedMembers;\n    }).orElse(new HashSet<>());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"3946764d-f5f0-17a3-c848-ad4714c90179","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"deletes a member from a community house by finding the house and its members, removing the member from the house's membership list, and saving the changes to the database.","params":[{"name":"houseId","type_name":"String","description":"ID of the house for which the member is being deleted.","complex_type":false},{"name":"memberId","type_name":"String","description":"ID of the member to be removed from the community house.","complex_type":false}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified member was removed from the house.","complex_type":false},"usage":{"language":"java","code":"String houseId = \"12345\";\nString memberId = \"67890\";\nboolean success = deleteMemberFromHouse(houseId, memberId);\nif (success) {\n\tSystem.out.println(\"The member was removed successfully.\");\n} else {\n\tSystem.out.println(\"Failed to remove the member from the house.\");\n}\n","description":""},"name":"deleteMemberFromHouse","code":"@Override\n  public boolean deleteMemberFromHouse(String houseId, String memberId) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      boolean isMemberRemoved = false;\n      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {\n        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();\n        for (HouseMember member : houseMembers) {\n          if (member.getMemberId().equals(memberId)) {\n            houseMembers.remove(member);\n            communityHouse.setHouseMembers(houseMembers);\n            communityHouseRepository.save(communityHouse);\n            member.setCommunityHouse(null);\n            houseMemberRepository.save(member);\n            isMemberRemoved = true;\n            break;\n          }\n        }\n      }\n      return isMemberRemoved;\n    }).orElse(false);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":null},"item_type":"method","length":23},{"id":"0b89048c-0941-cdbd-554f-e6fc4730e1b6","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"retrieves CommunityHouse details by ID. It calls the `findByHouseId` method of the `communityHouseRepository` and returns an Optional object containing the details if found, otherwise returns an empty Optional.","params":[{"name":"houseId","type_name":"String","description":"identifier of the house for which details are being retrieved.","complex_type":false}],"returns":{"type_name":"Optional","description":"an optional instance of `CommunityHouse`.\n\n* `Optional<CommunityHouse>` is the type of the output, indicating that it may contain a value or be empty.\n* `communityHouseRepository.findByHouseId(houseId)` is the method called to retrieve the house details by ID, which returns an optional object containing the details if found, or an empty optional if not found.","complex_type":true},"usage":{"language":"java","code":"CommunityHouse house =  HouseService.getHouseDetailsById(\"houseId\");\nSystem.out.println(house);\n","description":""},"name":"getHouseDetailsById","code":"@Override\n  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {\n    return communityHouseRepository.findByHouseId(houseId);\n  }","location":{"start":99,"insert":99,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"b60f0213-5bf6-54a3-bb40-d5661a16adf2","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"retrieves a list of `HouseMember` instances associated with a specified `houseId`. It uses the `houseMemberRepository` to find the members and returns an optional list.","params":[{"name":"houseId","type_name":"String","description":"identifier of the house for which the list of members is being retrieved.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and page size for fetching a subset of the `HouseMember` entities from the repository.\n\n* `houseId`: The ID of the house for which members are being retrieved.\n* `Pageable`: A class that represents a page of results, providing methods to navigate through the page hierarchy. It contains information about the current page, such as the number of results per page and the total number of results.","complex_type":true}],"returns":{"type_name":"OptionalListHouseMember","description":"a list of `HouseMember` objects retrieved from the repository.\n\n* `Optional<List<HouseMember>>`: The output is an optional list of house members associated with the provided house ID.\n* `List<HouseMember>`: If the output is not `null`, it contains a list of house members retrieved from the repository.\n* `String` `houseId`: The ID of the house for which the list of house members is being retrieved.\n* `Pageable` `pageable`: A pageable object used to retrieve a subset of the house members based on the page number and size.","complex_type":true},"usage":{"language":"java","code":"public class HouseMemberService {\n  private final HouseMemberRepository houseMemberRepository;\n\n  public Optional<List<HouseMember>> getHouseMembers(String houseId, Pageable pageable) {\n    return houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable);\n  }\n}\n","description":""},"name":"getHouseMembersById","code":"@Override\n  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)\n    );\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"9136e136-fc68-fd8c-db47-9b407ea96568","ancestors":["5d650c18-0e14-fe84-944c-9f39fd29c2ad"],"type":"function","description":"retrieves a list of `HouseMember` objects from the database based on the user ID and pageable parameters.","params":[{"name":"userId","type_name":"String","description":"ID of the user for whom the list of house members is being retrieved.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and page size for fetching a subset of the HouseMembers for the user Id.\n\n* `user_id`: The unique identifier for the user whose houses are to be listed.\n* `pageable`: A pageable object representing the pagination configuration for the list of house members.","complex_type":true}],"returns":{"type_name":"OptionalListHouseMember","description":"a list of `HouseMember` objects for the specified user ID, paginated based on the input pageable.\n\n* `Optional<List<HouseMember>>`: This is the type of the returned value, which can be either an empty list if no house members exist for the specified user ID or a non-empty list containing the house members.\n* `listHouseMembersForHousesOfUserId(String userId, Pageable pageable)`: This is the method that returns the list of house members for a given user ID when passed a pageable parameter.\n* `houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)`: This is the method called within the `listHouseMembersForHousesOfUserId` method to retrieve the list of house members for a given user ID using the `houseMemberRepository`.\n* `findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)`: This is the method called within the `houseMemberRepository` to retrieve the list of house members for a given user ID and pageable parameter.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId, Pageable pageable) {\n    return Optional.ofNullable(houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable));\n  }\n}\n","description":"\nThe method listHouseMembersForHousesOfUserId retrieves all the House members of a specific user ID from the database by first querying the database for all the House members that have been associated with a community house where the current user is an admin. The returned value is an Optional list of House members, which may be empty if no matches were found in the database."},"name":"listHouseMembersForHousesOfUserId","code":"@Override\n  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,\n      Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)\n    );\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}