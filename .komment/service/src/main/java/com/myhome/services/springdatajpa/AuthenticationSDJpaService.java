{"name":"AuthenticationSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AuthenticationSDJpaService.java","content":{"structured":{"description":"An AuthenticationSDJpaService class that implements the AuthenticationService interface. It uses Spring Security's JWT functionality to handle user authentication. The class takes in various configuration parameters and constructs a JWT token based on a user's details, which it then returns to the login requester.","items":[{"id":"a13c167c-61fa-289c-3044-83d3b0c3b1bb","ancestors":[],"type":"function","description":"is an implementation of the AuthenticationService interface, providing authentication functionality using Spring Data JPA and Spring Security's JWT. The class takes in various parameters such as token expiration time, secret, and user service, and uses them to create a JWT and validate credentials.","name":"AuthenticationSDJpaService","code":"@Slf4j\n@Service\npublic class AuthenticationSDJpaService implements AuthenticationService {\n\n  private final Duration tokenExpirationTime;\n  private final String tokenSecret;\n\n  private final UserSDJpaService userSDJpaService;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n  private final PasswordEncoder passwordEncoder;\n\n  public AuthenticationSDJpaService(@Value(\"${token.expiration_time}\") Duration tokenExpirationTime,\n      @Value(\"${token.secret}\") String tokenSecret,\n      UserSDJpaService userSDJpaService,\n      AppJwtEncoderDecoder appJwtEncoderDecoder,\n      PasswordEncoder passwordEncoder) {\n    this.tokenExpirationTime = tokenExpirationTime;\n    this.tokenSecret = tokenSecret;\n    this.userSDJpaService = userSDJpaService;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }\n\n  private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }\n\n  private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":18,"insert":18,"offset":" ","indent":0,"comment":null},"item_type":"class","length":48},{"id":"166644c3-3aea-8690-6746-3691032d3bc6","ancestors":["a13c167c-61fa-289c-3044-83d3b0c3b1bb"],"type":"function","description":"authenticates a user by verifying their password and generating an JWT token for authorization.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"login request received by the method, providing the email address and password of the user attempting to log in.\n\n* `LoginRequest`: This class represents the login request, containing email and password for authentication.\n* `email`: A string property representing the user's email address for login.\n* `password`: A string property representing the user's password for login.\n* `orElseThrow()`: An method that throws a `UserNotFoundException` if the user with the provided email is not found in the database.\n* `isPasswordMatching()`: A method that compares the provided password with the encrypted password stored for the user, and returns `true` if they match, otherwise `false`.\n* `createJwt()`: An method that creates an JWT token based on the user's data, using the `appJwtEncoderDecoder`.\n* `encode()`: An method of the `appJwtEncoderDecoder` class that encodes the JWT token into a string.","complex_type":true}],"returns":{"type_name":"AuthenticationData","description":"an `AuthenticationData` object containing an encoded JWT token and the user ID.\n\n* `AuthenticationData`: This is the class that represents the authentication data, which consists of an encoded token and a user ID.\n* `encodedToken`: This is a string representing the encoded JWT token issued by the login function.\n* `userID`: This is the ID of the user who has successfully logged in.\n\nIn addition to these properties, the output also includes information about the login request, such as the email address and password provided by the user.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n}\n","description":"\nThe above example shows how the login method would be used. The input for this method is a LoginRequest object which contains an email and password. First, the user's UserDto object is retrieved from the database using the email provided in the request. If no such user exists, a UserNotFoundException is thrown. Then, the provided password is matched against the encrypted password stored in the database. If there is a mismatch, a CredentialsIncorrectException is thrown. Finally, an AppJwt object is created from the user's Dto and then encoded with the token secret using the appJwtEncoderDecoder. The resulting encoded JWT token is then returned as part of an AuthenticationData object along with the user ID."},"name":"login","code":"@Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }","location":{"start":41,"insert":41,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"1852bc1b-97e8-3b96-1a4d-4a44c18437a5","ancestors":["a13c167c-61fa-289c-3044-83d3b0c3b1bb"],"type":"function","description":"compares a provided password with an equivalent password stored in a database, returning `true` if they match and `false` otherwise.","params":[{"name":"requestPassword","type_name":"String","description":"password provided by the user for authentication purposes.","complex_type":false},{"name":"databasePassword","type_name":"String","description":"password stored in the database that the function compares to the `requestPassword`.","complex_type":false}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the provided request password matches the password stored in the database.\n\n* The function returns a boolean value indicating whether the request password matches the database password.\n* The `passwordEncoder` is used to perform the comparison between the request password and the database password.\n* The comparison is performed using the `matches()` method, which takes two parameters - the request password and the database password - and returns a boolean value indicating whether they match.","complex_type":true},"usage":{"language":"java","code":"// Create a passwordEncoder instance using the PasswordEncoder class in Spring Security\nPasswordEncoder passwordEncoder = new PasswordEncoder();\nString requestPassword = \"password\";\nString databasePassword = \"$2a$10$n5RKqZ3CkH67dXDzUxbL4uQVeMiE.fNh9Kp84jKFoYvWwl/6gYrIe\";\n\n// Verify that the request password and database password are matching\nboolean isPasswordMatching = isPasswordMatching(requestPassword, databasePassword);\n","description":""},"name":"isPasswordMatching","code":"private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"76a4e95c-af2e-e8af-8441-90b4388e94ee","ancestors":["a13c167c-61fa-289c-3044-83d3b0c3b1bb"],"type":"function","description":"creates a JWT token with an expiration time based on the provided `tokenExpirationTime`. It sets the user ID and expiration date in the JWT builder and builds the final JWT.","params":[{"name":"userDto","type_name":"UserDto","description":"user's details, including their ID, which are used to generate an expiration time for the JWT token.\n\n* `userId`: The user ID of the user for whom the JWT token is being created.\n* `expirationTime`: The expiration time of the JWT token in LocalDateTime format, calculated by adding the `tokenExpirationTime` to the current date and time.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"a `AppJwt` object containing user ID and expiration time.\n\n1. `userId`: The user ID of the user to whom the JWT is being created for.\n2. `expiration`: The expiration time of the JWT in LocalDateTime format, which represents the time when the JWT will expire.\n3. `build()`: This method creates a new AppJwt instance with the specified properties and returns it.","complex_type":true},"usage":{"language":"java","code":"UserDto userDto = // get some user data \nAppJwt jwtToken = new AuthenticationSDJpaService().createJwt(userDto);\n","description":""},"name":"createJwt","code":"private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}