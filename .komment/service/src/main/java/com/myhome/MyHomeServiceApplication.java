{"name":"MyHomeServiceApplication.java","path":"service/src/main/java/com/myhome/MyHomeServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that uses the BCrypt PasswordEncoder to encrypt passwords. The application also includes configuration properties scanning using the `@ConfigurationPropertiesScan` annotation. Additionally, it defines a `main()` method for launching the application and a `getPasswordEncoder()` bean method that returns a BCryptPasswordEncoder instance.","items":[{"id":"80c5f202-ba31-1a95-5c41-75e25fa7eea9","ancestors":[],"type":"function","description":"is a Spring Boot application that includes a password encoder using BCrypt. The main method starts the application and runs it with the given arguments. The getPasswordEncoder() method returns a BCryptPasswordEncoder object, which is used to encrypt passwords in the application.","name":"MyHomeServiceApplication","code":"@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":13},{"id":"07d80a03-1135-0d9d-5c45-ecdf3f995656","ancestors":["80c5f202-ba31-1a95-5c41-75e25fa7eea9"],"type":"function","description":"starts a Spring application using the `SpringApplication.run()` method, passing the class `MyHomeServiceApplication` as an argument.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the `SpringApplication.run()` method when invoking the application.\n\n* `SpringApplication.run()` method is called with the `MyHomeServiceApplication.class` and `args` as arguments.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"48c845f6-747f-2b8b-a949-2a8f57ec6617","ancestors":["80c5f202-ba31-1a95-5c41-75e25fa7eea9"],"type":"function","description":"returns a `BCryptPasswordEncoder` instance, which is a widely-used password hashing algorithm that provides strong security for password storage.","params":[],"returns":{"type_name":"instance","description":"a `BCryptPasswordEncoder` instance, which is used to encrypt passwords securely.\n\n* The function returns an instance of the `BCryptPasswordEncoder` class, which is a popular password hashing algorithm used for encrypting passwords securely.\n* The `BCryptPasswordEncoder` class provides several methods for encrypting and verifying passwords using the bcrypt algorithm.\n* The encoder uses a salt value to generate a unique hash for each password, making it difficult for attackers to use precomputed tables or rainbow tables to crack the password.","complex_type":true},"usage":{"language":"java","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4}]}}}