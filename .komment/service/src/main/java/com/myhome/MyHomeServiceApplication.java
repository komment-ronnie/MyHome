{"name":"MyHomeServiceApplication.java","path":"service/src/main/java/com/myhome/MyHomeServiceApplication.java","content":{"structured":{"description":"A Spring Boot application that uses the Spring Security module for password encryption. The `BCryptPasswordEncoder` class is used to encode and decode passwords. The `getPasswordEncoder()` method returns an instance of `BCryptPasswordEncoder`, which is then used throughout the application to handle password validation and storage.","items":[{"id":"afad02e4-1c16-80b7-6c40-e11b7befae8c","ancestors":[],"type":"function","description":"is a Spring Boot application that provides a password encoder using BCrypt. The main method starts the application and the @Bean annotation defines a bean for the password encoder.","name":"MyHomeServiceApplication","code":"@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":13},{"id":"3cc49a90-4bf9-4a9b-c242-9883a1a05979","ancestors":["afad02e4-1c16-80b7-6c40-e11b7befae8c"],"type":"function","description":"runs a Spring application named `MyHomeServiceApplication`.","params":[{"name":"args","type_name":"String[]","description":"command-line arguments passed to the `SpringApplication.run()` method when it is called, allowing the application to be launched with specific configuration options or other parameters.\n\n* `String[]`: Represents an array of strings, indicating the command-line arguments passed to the program during execution.","complex_type":true}],"name":"main","code":"public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"548c5254-6ae1-0f98-4347-fafa761e5fc0","ancestors":["afad02e4-1c16-80b7-6c40-e11b7befae8c"],"type":"function","description":"returns a `BCryptPasswordEncoder` instance, which is a cryptographic hash function for password storage and verification.","params":[],"returns":{"type_name":"instance","description":"a BCryptPasswordEncoder instance, which is used to encrypt passwords securely.\n\nThe `BCryptPasswordEncoder` object is an implementation of the `PasswordEncoder` interface in Java.\nIt uses the BCrypt hashing algorithm to encrypt passwords securely.\nThis algorithm is considered secure because it takes into account the length and complexity of the password being encrypted, making it more resistant to brute-force attacks.","complex_type":true},"usage":{"language":"java","code":"public class MyHomeService {\n  @Autowired\n  private PasswordEncoder passwordEncoder;\n\n  public void registerUser(String username, String password) {\n    User user = new User();\n    user.setUsername(username);\n    user.setPassword(passwordEncoder.encode(password));\n    // save the user to the database\n  }\n}\n","description":""},"name":"getPasswordEncoder","code":"@Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }","location":{"start":34,"insert":34,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4}]}}}