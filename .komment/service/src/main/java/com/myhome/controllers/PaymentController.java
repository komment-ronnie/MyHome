{"name":"PaymentController.java","path":"service/src/main/java/com/myhome/controllers/PaymentController.java","content":{"structured":{"description":"A REST controller that provides endpoints for managing payments in a community. The controller uses Spring Data and Spring Web Flux to handle HTTP requests and returns responses. It provides methods for scheduling a payment, listing all member payments, and listing all admin scheduled payments. The controller also includes a method to check if an admin is present in a given community.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"e976c576-5e4c-7388-d047-e9f757172a4c","ancestors":[],"type":"function","description":"is responsible for handling requests related to payments in the system. It provides endpoints for creating, reading, updating, and deleting payments, as well as listing all payments for a specific member or admin. The controller uses dependency injection to inject the necessary services, such as the payment service, community service, and schedule payment API mapper. It also handles exceptions and returns appropriate responses based on the request method and input parameters.","name":"PaymentController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0,"comment":{"start":47,"end":50}},"item_type":"class","length":94},{"id":"fdbcefdf-3987-5bb7-4a48-0de0ee81ad44","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"schedules a payment for a community member based on their administrator's authorization and the community house they reside in.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"Schedule Payment Request sent by the user, containing information such as the member ID and the administrator ID of the community house.\n\n* `request.getMemberId()`: This is a string attribute that contains the ID of the house member to be scheduled for payment.\n* `request.getAdminId()`: This is a string attribute that contains the ID of the community admin to be used for scheduling the payment.","complex_type":true}],"returns":{"type_name":"SchedulePaymentResponse","description":"a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response with a status code and a body. In this case, the status code is set to `HttpStatus.CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: This is the `SchedulePaymentResponse` object, which contains information about the scheduled payment.\n\nThe attributes of the `SchedulePaymentResponse` object are:\n\n* `status`: This is an integer status code that indicates whether the payment was successful (201) or not (404).\n* `paymentId`: This is a unique identifier for the scheduled payment.\n* `memberId`: This is the ID of the member whose payment has been scheduled.\n* `adminId`: This is the ID of the admin who scheduled the payment.\n* `communityHouseId`: This is the ID of the community house where the payment was made.\n* `paymentDate`: This is the date and time when the payment was scheduled.\n* `amount`: This is the amount of the payment.","complex_type":true},"usage":{"language":"java","code":"HouseMember houseMember = new HouseMember(1, 2, \"memberId\", \"memberName\");\nUser admin = new User(1, \"adminId\", \"adminName\");\nSchedulePaymentRequest request = new SchedulePaymentRequest(houseMember.getCommunityHouse().getCommunity().getId(),\n    houseMember.getId(), admin.getId());\nschedulePayment(request);\n","description":"\nThis would call the schedulePayment method and pass in a HouseMember object, which is the member who is paying, and an User object, which is the admin scheduling the payment. The request object would contain the community ID, house member ID, and admin ID. The method would then verify that the user is an admin of the community associated with the house member making the payment, and if so, it would map the SchedulePaymentRequest to a PaymentDto which is used by the paymentService to schedule the payment and return a PaymentDto to the caller.\n\nAlternatively, if the user is not an admin of the community, then the method would return ResponseEntity with a status code of 404 (not found) as the request would be invalid and the method would not have been able to process it."},"name":"schedulePayment","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"149254bb-0a19-b1bd-5d40-fc207c1c0cdc","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"determines if a specified `User` is an administrator of a given `CommunityHouse`. It does so by checking if the `User` is contained within the `CommunityHouse` 's admin list.","params":[{"name":"communityHouse","type_name":"CommunityHouse","description":"CommunityHouse object that is being checked for admin status.\n\n* `communityHouse`: A `CommunityHouse` object representing the community house being checked for admin status.\n* `getCommunity()`: A method of the `CommunityHouse` class that returns a `Community` object representing the community associated with the house.\n* `getAdmins()`: A method of the `Community` class that returns an array of `User` objects representing the admins of the community.","complex_type":true},{"name":"admin","type_name":"User","description":"User object to be checked if they are an administrator of the CommunityHouse.\n\n* `communityHouse`: This is an instance of the `CommunityHouse` class, representing a community house with various attributes and methods.\n* `getCommunity()`: This method returns a reference to the community associated with the `communityHouse` object.\n* `getAdmins()`: This method returns a collection of `User` objects representing the administrators of the community.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified user is an administrator of the community house.","complex_type":false},"usage":{"language":"java","code":"CommunityHouse communityHouse = new CommunityHouse();\nUser admin = new User();\nadmin.setId(\"admin-id\");\ncommunityHouse.getCommunity().addAdmin(admin);\nisUserAdminOfCommunityHouse(communityHouse, admin); // returns true\n","description":"\nThis example would return `true` because the `admin` object that is being passed in has an ID that matches one of the IDs found in the set of admins for the community house."},"name":"isUserAdminOfCommunityHouse","code":"private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"b7aca91d-95a6-1583-0048-b15871f4117c","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"receives a payment ID and retrieves the corresponding payment details from the payment service, then maps them to a `SchedulePaymentResponse` object using the `paymentToSchedulePaymentResponse` method and returns the result as an `ResponseEntity`.","params":[{"name":"paymentId","type_name":"String","description":"id of the payment for which details are to be retrieved.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing a payment detail response.\n\n* `paymentId`: The unique identifier for the payment being retrieved, which is passed as a parameter in the function call.\n* `paymentService`: A service that provides methods for interacting with the payment system, which is used to retrieve the details of the payment.\n* `schedulePaymentApiMapper`: A mapping service that converts the payment details returned by the payment service into a Schedule Payment response object.\n* `ResponseEntity`: An object that represents the overall response to the function call, including any errors or exceptions that may occur during the execution of the function. In this case, the response entity is created with an `ok` status code if the payment details are successfully retrieved.\n\nOverall, the `listPaymentDetails` function provides a way to retrieve the details of a specific payment by its unique identifier, using a combination of logging and mapping services to handle the response from the payment service.","complex_type":true},"usage":{"language":"java","code":"@GetMapping(path = \"/payments/{paymentId}\")\npublic ResponseEntity<SchedulePaymentResponse> listPaymentDetails(@PathVariable(\"paymentId\") String paymentId) {\n    return paymentService.getPaymentDetails(paymentId)\n            .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n            .map(ResponseEntity::ok)\n            .orElseGet(() -> ResponseEntity.notFound().build());\n}\n","description":"\nThe example code above uses the paymentService to retrieve a payment with the given id, which is then mapped into a SchedulePaymentResponse using schedulePaymentApiMapper and wrapped in a ResponseEntity. If the payment could not be found, the method returns a not found response instead."},"name":"listPaymentDetails","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":91,"insert":91,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"a7e929f1-8b69-34be-d34a-8ba3fb845bb1","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"list all payments for a specified member ID using the Payment Service and map the response to a `ListMemberPaymentsResponse` object.","params":[{"name":"memberId","type_name":"String","description":"13-digit unique identifier of the member for whom all payments are to be listed.","complex_type":false}],"returns":{"type_name":"ResponseEntityListMemberPaymentsResponse","description":"a `ResponseEntity` object containing a list of `Payment` objects representing the member's payments.\n\n* `ResponseEntity<ListMemberPaymentsResponse>`: This is the top-level class that represents the response to the list all member payments request. It contains a list of `Payment` objects inside a `List`.\n* `List MemberPaymentsResponse`: This inner class represents the list of payments for a specific member. It has several attributes, including the payment date, amount, and status.\n* `paymentService.getHouseMember(memberId)`: This method returns a `HouseMember` object representing the member whose payments are to be listed.\n* `paymentService.getPaymentsByMember(memberId)`: This method returns a list of `Payment` objects associated with the specified member.\n* `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`: This method maps the `Payment` object to a corresponding `MemberPayment` object, which is then included in the response.\n\nOverall, the `listAllMemberPayments` function returns a list of payments associated with a specific member, along with additional information about each payment.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n","description":"\nThis example assumes that the `paymentService` is an instance of a service class implementing the payment functionality, and that the `schedulePaymentApiMapper` is a class containing mappers for converting domain objects into REST API response DTOs.\n\nThe code first retrieves the house member object using `paymentService.getHouseMember(memberId)`. If this method returns an empty optional, then a 404 (Not Found) response is returned immediately, without any further processing.\n\nIf the previous step resulted in a non-empty optional containing a house member object, then the next line of code calls `paymentService.getPaymentsByMember(memberId)` to retrieve all payments associated with the given house member id. The resulting list of payments is converted into a REST API response DTO using `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet`.\n\nThe resulting payment list DTO is then added to a new instance of `ListMemberPaymentsResponse`, and the entire response object is wrapped in an optional using `Optional::of`. The resulting optional is then converted into a 200 (OK) HTTP status code if it contains a non-empty value, or into a 404 (Not Found) status code if it is empty.\n\nIn summary, the example uses `paymentService` to retrieve all payments associated with a given house member id, and then converts this list of payments into a REST API response DTO using the mapper class `schedulePaymentApiMapper`. If no payment was found for the given house member, a 404 (Not Found) status code is returned, otherwise a 200 (OK) status code with the resulting response object."},"name":"listAllMemberPayments","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":101,"insert":101,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"8442c3ac-9b3f-959e-e743-b5153485ebbd","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"receives a request to list all payments scheduled by an admin, checks if the admin is in the given community, retrieves the payments, and returns them in a response entity.","params":[{"name":"communityId","type_name":"String","description":"community that the admin belongs to, which is used to filter the list of payments to be returned in the response.","complex_type":false},{"name":"adminId","type_name":"String","description":"ID of the administrator for whom scheduled payments are to be listed.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"pagination information for the list of payments, allowing the function to filter and limit the result set accordingly.\n\n* `communityId`: A string representing the community ID.\n* `adminId`: A string representing the admin ID.\n* `pageable`: An instance of the `Pageable` class, which provides a way to page large data sets. Its properties include:\n\t+ `pageNumber`: The current page number being requested.\n\t+ `pageSize`: The number of elements per page.\n\t+ `totalPages`: The total number of pages in the data set.\n\t+ `totalElements`: The total number of elements in the data set.","complex_type":true}],"returns":{"type_name":"ListAdminPaymentsResponse","description":"a `ResponseEntity` object containing a `ListAdminPaymentsResponse` object with the scheduled payments and page information.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin ID in the specified community.\n* `pageInfo`: A `PageInfo` object containing information about the page of payments returned, including the total number of payments and the total number of pages.\n\nThe function returns a `ResponseEntity` with the list of scheduled payments and the page information in the body of the response. The status code of the response is set to `200 OK`.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<ListAdminPaymentsResponse> response = paymentService.listAllAdminScheduledPayments(\n    \"communityId\", \"adminId\", PageRequest.of(0, 10));\n\nif (response.getStatusCode().is2xxSuccessful()) {\n  ListAdminPaymentsResponse body = response.getBody();\n  System.out.println(\"Payments:\");\n  for (AdminPayment adminPayment : body.getPayments()) {\n    System.out.printf(\"%s - %s%n\", adminPayment.getId(), adminPayment.getAmount());\n  }\n  PageInfo pageInfo = body.getPageInfo();\n  System.out.println(\"Page Info:\");\n  System.out.printf(\n      \"Page: %d/%d%nTotal: %d%n\",\n      pageInfo.getNumber(),\n      pageInfo.getTotalPages(),\n      pageInfo.getTotalElements()\n  );\n} else {\n  System.out.println(\"Error:\");\n  System.out.printf(\"%s%n\", response.getStatusCode());\n}\n","description":""},"name":"listAllAdminScheduledPayments","code":"@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"f7381e7b-8cda-4a90-124b-0a8d428c693e","ancestors":["e976c576-5e4c-7388-d047-e9f757172a4c"],"type":"function","description":"returns a Boolean value indicating whether a specified administrator is an admin of a given community based on the community's details and admins stream.","params":[{"name":"communityId","type_name":"String","description":"id of the community whose details are to be retrieved.","complex_type":false},{"name":"adminId","type_name":"String","description":"12-digit ID of an admin user within the specified community, which is used as a filter to determine if the admin exists within that community.","complex_type":false}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the specified administrator is an admin in the given community.\n\n* The function returns a `Boolean` value indicating whether an admin with the given `adminId` exists in the specified `communityId`.\n* The `communityService.getCommunityDetailsByIdWithAdmins()` method is called to retrieve the details of the community with the given `communityId`, including its admins.\n* The `map()` methods are used to transform the `List<Admin>` returned by `getCommunityDetailsByIdWithAdmins()` into a stream of `Admin` objects.\n* The `stream().anyMatch()` method is used to check if any admin in the community has the given `adminId`. If no such admin exists, the function returns `false`.\n* If an admin with the given `adminId` exists in the community, the function returns `true`.\n* If the community with the given `communityId` does not exist, the function throws a `RuntimeException`.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    String communityId = \"507f191e810c19729de860ea\";\n    String adminId = \"admin@email.com\";\n    Boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n    System.out.println(\"Is the admin in the community? : \" + isAdminInGivenCommunity);\n}\n","description":"\nThis code would first find a Community with the given `communityId` and then check if an Admin with the email address `admin@email.com` exists within that Community. If it does, the method would return true and print out \"Is the admin in the community? : True\". Otherwise, it would print out \"Is the admin in the community? : False\".\n\nIt is important to note that this method would only work correctly if a valid `communityId` and an email address for an Admin exist. If the `communityId` does not correspond to any Community or if no Admin with the given email exists within that Community, then the method will throw an exception."},"name":"isAdminInGivenCommunity","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}