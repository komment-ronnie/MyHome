{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements the `AuthenticationApi` interface. It has a single method `login()` that takes a `LoginRequest` object as input and returns a `ResponseEntity<Void>` object with custom headers containing user ID and JWT token. The method calls the `login()` method of an `AuthenticationService` class to perform the actual authentication, and then creates and populates the custom headers based on the result of the authentication process.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"d5065615-16e5-2194-9847-5f285889797b","ancestors":[],"type":"function","description":"is a Spring REST controller that implements the AuthenticationApi interface. It handles login requests and returns a ResponseEntity with the user ID and JWT token in the HTTP headers.","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":13,"insert":13,"offset":" ","indent":0,"comment":null},"item_type":"class","length":21},{"id":"5d8fac9c-5b1a-8f99-aa47-d38c7cb1d285","ancestors":["d5065615-16e5-2194-9847-5f285889797b"],"type":"function","description":"authenticates a user using the `AuthenticationService`, and returns an `ResponseEntity` with an `OK` status code and custom headers containing authentication data.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"authentication request containing the user credentials for validation and authentication by the authentication service.\n\n* `@Valid`: This annotation indicates that the `loginRequest` parameter must be valid and contain all required fields.\n* `LoginRequest`: This class represents the request for logging in, with attributes such as `username`, `password`, and `grantType`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing headers generated based on the authentication data.\n\n* `ResponseEntity`: This class represents a response entity that contains information about the status of the request. In this case, it is set to `OK`, indicating that the login was successful.\n* `headers`: This attribute contains a list of headers that are added to the response entity. The headers contain information about the authentication data, such as the user's username and the authentication method used.\n* `build()`: This method creates the response entity by combining the header and body attributes. In this case, it returns a response entity with the `OK` status and the authentication data headers.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate AuthenticationController authenticationController;\n\npublic void useLoginMethod() {\n    LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n    ResponseEntity<Void> responseEntity = authenticationController.login(loginRequest);\n    if (responseEntity.getStatusCode().equals(HttpStatus.OK)) {\n        System.out.println(\"Login Successful!\");\n    } else {\n        System.err.println(\"Login Unsuccessful!\");\n    }\n}\n","description":"\nIn this example, the \"useLoginMethod\" method is a part of the main class, and it uses the login method to log in with a username and password that are provided in the LoginRequest object. The responseEntity variable is then created using the return value from the login method. If the status code of the response entity is equal to HttpStatus.OK (200), the user is logged in successfully. Otherwise, an error message is printed to the console."},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"a2dc5549-3588-3f8f-af4a-c053f5456f60","ancestors":["d5065615-16e5-2194-9847-5f285889797b"],"type":"function","description":"creates an HTTP headers object containing user ID and JWT token for authentication purposes based on provided AuthenticationData object.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"user's login information, providing the user ID and JWT token used to authenticate the request.\n\n* `getUserId()`: retrieves the user ID associated with the authentication data.\n* `getJwtToken()`: retrieves the JWT token associated with the authentication data.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class from the Java `javax.net.http` package.\n* `add()` methods: These are methods that allow adding headers to the overall HTTP headers for a request or response. In this case, they add two headers: \"userId\" and \"token\".","complex_type":true},"usage":{"language":"java","code":"AuthenticationController authenticationController = new AuthenticationController(authenticationService);\nString userId = \"userId\";\nString token = \"token\";\nAuthenticationData authenticationData = new AuthenticationData(userId, token);\nHttpHeaders headers = authenticationController.createLoginHeaders(authenticationData);\nheaders.get(\"userId\"); // returns the userId from the input\nheaders.get(\"token\"); // returns the token from the input\n","description":""},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6}]}}}