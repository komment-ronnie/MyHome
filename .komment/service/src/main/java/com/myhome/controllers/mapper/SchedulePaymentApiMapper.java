{"name":"SchedulePaymentApiMapper.java","path":"service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java","content":{"structured":{"description":"An interface `SchedulePaymentApiMapper` which maps between different types related to payment scheduling in a housing community platform. The interface provides methods for mapping between different types such as `PaymentDto`, `EnrichedSchedulePaymentRequest`, `SchedulePaymentResponse`, and more. It also defines various utility methods for handling the mapping process.","items":[{"id":"b463e0f1-1b50-8ea4-7049-d53e199f7f5e","ancestors":[],"type":"function","description":"provides a set of mappings between different entities and DTOs used in a payment API, including mapping between Payment, User, HouseMember, and Community entities to corresponding DTOs, as well as providing additional methods for enriching the schedule payment request with user and house member details.","name":"SchedulePaymentApiMapper","code":"@Mapper\npublic interface SchedulePaymentApiMapper {\n\n  @Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }\n\n  @Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n\n  @Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }\n\n  @Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }\n\n  @Mappings({\n      @Mapping(source = \"adminId\", target = \"admin\", qualifiedByName = \"adminIdToAdmin\"),\n      @Mapping(source = \"memberId\", target = \"member\", qualifiedByName = \"memberIdToMember\")\n  })\n  PaymentDto schedulePaymentRequestToPaymentDto(SchedulePaymentRequest schedulePaymentRequest);\n\n  PaymentDto enrichedSchedulePaymentRequestToPaymentDto(\n      EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest);\n\n  @AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n\n  Set<MemberPayment> memberPaymentSetToRestApiResponseMemberPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"memberId\", expression = \"java(payment.getMember().getMemberId())\")\n  MemberPayment paymentToMemberPayment(Payment payment);\n\n  Set<AdminPayment> adminPaymentSetToRestApiResponseAdminPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"adminId\", expression = \"java(payment.getAdmin().getUserId())\")\n  AdminPayment paymentToAdminPayment(Payment payment);\n\n  @Mappings({\n      @Mapping(source = \"admin\", target = \"adminId\", qualifiedByName = \"adminToAdminId\"),\n      @Mapping(source = \"member\", target = \"memberId\", qualifiedByName = \"memberToMemberId\")\n  })\n  SchedulePaymentResponse paymentToSchedulePaymentResponse(PaymentDto payment);\n\n  default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }\n\n  default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }\n\n  default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }\n}","location":{"start":41,"insert":41,"offset":" ","indent":0,"comment":null},"item_type":"interface","length":103},{"id":"4748b6b6-9b71-5c9a-ba49-b13daa659802","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"converts a `String` representing an administrator ID into a `UserDto` object containing the ID and other relevant information.","params":[{"name":"adminId","type_name":"String","description":"user ID of an admin to be converted into a `UserDto` object.","complex_type":false}],"returns":{"type_name":"UserDto","description":"a `UserDto` object representing the admin with the specified `adminId`.\n\n1. `userId`: A string representing the user ID of the admin.\n2. `build()`: Creates a new instance of `UserDto` with the specified `userId`.","complex_type":true},"name":"adminIdToAdminDto","code":"@Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6},{"id":"d7a8ece8-9c87-bbae-6b4d-a1129d98850d","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"converts a `memberId` string into a `HouseMemberDto` object, which contains the original member ID as its sole property.","params":[{"name":"memberId","type_name":"String","description":"12-digit unique identifier of a member in the House, which is used to retrieve the corresponding member details in the `HouseMemberDto` object created by the function.","complex_type":false}],"returns":{"type_name":"HouseMemberDto","description":"a `HouseMemberDto` object containing the input `memberId`.\n\n* `memberId`: This is a String attribute that represents the member ID passed as an input to the function.\n* Other attributes not mentioned in the function signature or documentation are not included in the output.","complex_type":true},"name":"memberIdToMemberDto","code":"@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"ca83a48d-7f43-fb9e-8b48-74029fa2b52d","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"maps a `UserDto` object to its corresponding `userId`.","params":[{"name":"userDto","type_name":"UserDto","description":"User object that contains information about an administrator, and it is used to extract the user's ID from the object.\n\n* `getUserId()` returns the user ID of the admin.","complex_type":true}],"returns":{"type_name":"String","description":"a `String` representing the user ID of the admin.","complex_type":false},"name":"adminToAdminId","code":"@Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"74a2c548-b7aa-35b8-4445-4649e01188e1","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"converts a `HouseMemberDto` object into its corresponding member ID.","params":[{"name":"houseMemberDto","type_name":"HouseMemberDto","description":"House Member object containing information about a member of a household, which is used to retrieve the member's ID in the `memberToMemberId` function.\n\n* `getMemberId()`: Returns the `MemberId` field of `houseMemberDto`.","complex_type":true}],"returns":{"type_name":"String","description":"a string representing the member ID of the input `HouseMemberDto` object.","complex_type":false},"name":"memberToMemberId","code":"@Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"107b5094-35cc-b5bb-544e-fda44f8204d7","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"maps the user details from the enriched schedule payment request to the admin and member fields of the PaymentDto object using the `@MappingTarget` annotation.","params":[{"name":"paymentDto","type_name":"PaymentDto.PaymentDtoBuilder","description":"PaymentDto object, which is being modified to include user details from the enriched schedule payment request.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a class annotated with `@Builder`, which provides a way to construct instances of the `PaymentDto` class.\n* `EnrichedSchedulePaymentRequest`: This is the input parameter to the function, which contains the user details of the payment request.\n* `getEnrichedRequestMember()` and `getEnrichedRequestAdmin()`: These are methods that extract the member and admin details from the input `EnrichedSchedulePaymentRequest` object, respectively.\n\nTherefore, the `setUserFields` function takes a `PaymentDto.PaymentDtoBuilder` instance and an `EnrichedSchedulePaymentRequest` object as inputs, and updates the `member` and `admin` properties of the deserialized `paymentDto` instance using the extracted member and admin details.","complex_type":true},{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"payment request with user details enriched for further processing and mapping, providing the necessary data for the `setUserFields()` method to operate effectively.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` type, which is annotated with `@Builder`. The builder is required to pass in the instance of the class when using the `AfterMapping` method.\n* `EnrichedSchedulePaymentRequest`: This is the deserialized input object containing information about a payment request, including member and admin details.","complex_type":true}],"usage":{"language":"java","code":"@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n","description":"\nLet's break this example down:\n\n1. The method is annotated with `@AfterMapping`. This annotation tells MapStruct to run the mapping after the default mapping has been applied.\n2. The method takes two arguments, both of which are annotated with @MappingTarget. This annotation tells MapStruct that these arguments are targets for mapping, and they should be mapped using the default mapping.\n3. Inside the method, we call getEnrichedRequestMember() and getEnrichedRequestAdmin(). These methods return a HouseMemberDto and UserDto instance, respectively, which are built using the EnrichedSchedulePaymentRequest object passed as an argument to the setUserFields method.\n4. The paymentDto.member() and paymentDto.admin() methods are used to assign these objects to the member and admin fields of the PaymentDtoBuilder class.\n5. Finally, we call build() on the paymentDto builder object to create a new PaymentDto instance, which contains all the data from the original SchedulePaymentRequest and EnrichedSchedulePaymentRequest objects.\n\nHere is an example of how this method would be used:\n"},"name":"setUserFields","code":"@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }","location":{"start":76,"insert":76,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"3ee88611-f6e6-5e90-594a-b833dc617f81","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"takes a `SchedulePaymentRequest` object and enhances it with additional information from the user and community, such as the admin's name, email, encrypted password, and community IDs, as well as the member's ID and house document filename.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"SchedulePaymentRequest object that contains information about the payment request to be enriched, including its type, description, recurrence status, charge amount, due date, and administrator and member details.\n\n* `getType()`: The type of schedule payment request (e.g., \"Monthly\")\n* `getDescription()`: A brief description of the payment request\n* `isRecurring()`: Whether the payment request is recurring or not\n* `getCharge()`: The charge amount for the payment request\n* `getDueDate()`: The due date of the payment request\n* `getAdminId()`: The ID of the admin who created the payment request\n* `admin.getId()`: The ID of the admin who is associated with the payment request\n* `admin.getName()`: The name of the admin who is associated with the payment request\n* `admin.getEmail()`: The email address of the admin who is associated with the payment request\n* `admin.getEncryptedPassword()`: The encrypted password of the admin who is associated with the payment request\n* `communityIds`: A set of community IDs that the payment request is related to\n* `member.getMemberId()`: The ID of the member who made the payment request\n* `member.getId()`: The ID of the member who made the payment request\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"`: The filename of the House Member document associated with the member (if it exists)\n* `member.getName()`: The name of the member who made the payment request\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"\"`: The ID of the community house associated with the member (if it exists)","complex_type":true},{"name":"admin","type_name":"User","description":"User object containing information about the admin user who made the request, and provides the admin's ID, name, email, encrypted password, and communities.\n\n* `getCommunities()`: Returns a stream of `Community` objects representing the communities that the admin is a member of.\n* `map()`: Maps each `Community` object to its community ID using the `map()` method.\n* `collect()`: Collects the mapped community IDs into a set using the `collect()` method.\n* `getAdminId()`: Returns the admin's ID.\n* `getId()`: Returns the admin's ID.\n* `getName()`: Returns the admin's name.\n* `getEmail()`: Returns the admin's email address.\n* `getEncryptedPassword()`: Returns the admin's encrypted password.\n* `communityIds`: Returns a set of community IDs associated with the admin.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"HouseMember object that provides additional information about the member for whom the payment request is being enriched, including their community ID and document filename.\n\n* `member.getMemberId()` - The unique identifier for the member in the system.\n* `member.getId()` - The ID of the member in the database.\n* `member.getHouseMemberDocument()` - If not null, it contains information about the member's house membership, including the document filename.\n* `member.getName()` - The member's name.\n* `member.getCommunityHouse()` - If not null, it references the community house associated with the member.","complex_type":true}],"returns":{"type_name":"EnrichedSchedulePaymentRequest","description":"an enriched `SchedulePaymentRequest` object with additional fields.\n\n1. `type`: The type of payment request, which could be \"one-time\" or \"recurring\".\n2. `description`: A brief description of the payment request.\n3. `isRecurring`: Indicates whether the payment request is recurring or not.\n4. `charge`: The amount to be charged for the payment request.\n5. `dueDate`: The date by which the payment must be made.\n6. `adminId`: The ID of the admin who created the payment request.\n7. `adminName`: The name of the admin who created the payment request.\n8. `adminEmail`: The email address of the admin who created the payment request.\n9. `encryptedPassword`: The encrypted password of the admin who created the payment request.\n10. `communityIds`: A set of community IDs associated with the payment request.\n11. `memberId`: The ID of the member to whom the payment request is addressed.\n12. `houseMemberDocumentFilename`: The filename of the House Member document, if available.\n13. `memberName`: The name of the member to whom the payment request is addressed.\n14. `communityHouseId`: The ID of the community house associated with the member to whom the payment request is addressed.","complex_type":true},"usage":{"language":"java","code":"public class SchedulePaymentController {\n  private final PaymentService paymentService;\n  \n  @PostMapping(\"/schedule-payment\")\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(\n      @RequestBody @Valid EnrichedSchedulePaymentRequest request) {\n    UserDto admin = new UserDto().setUserId(\"admin123\");\n    HouseMemberDto member = new HouseMemberDto().setMemberId(\"member123\");\n    \n    return paymentService.schedulePayment(request, admin, member);\n  }\n}\n","description":"\nThis example uses a SchedulePaymentRequest to enrich the request with an Admin and a Member. Then it calls schedulePayment on the payment service using those values."},"name":"enrichSchedulePaymentRequest","code":"default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }","location":{"start":102,"insert":102,"offset":" ","indent":2,"comment":null},"item_type":"method","length":24},{"id":"d4fc503d-0144-fba1-914f-b3256d18810d","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"builds a `UserDto` object representing an administrator for a payment request, using the provided `EnrichedSchedulePaymentRequest` object as input.","params":[{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"administrative user for whom the request is being enriched, providing their user ID, entity ID, name, email, and encrypted password.\n\n* `adminId`: The ID of the administrator associated with the schedule payment request.\n* `adminEntityId`: The entity ID of the administrator associated with the schedule payment request.\n* `adminName`: The name of the administrator associated with the schedule payment request.\n* `adminEmail`: The email address of the administrator associated with the schedule payment request.\n* `adminEncryptedPassword`: An encrypted password for the administrator associated with the schedule payment request.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the administrator's details.\n\n* `userId`: The ID of the administrator associated with the enriched schedule payment request.\n* `id`: The entity ID of the administrator associated with the enriched schedule payment request.\n* `name`: The name of the administrator associated with the enriched schedule payment request.\n* `email`: The email address of the administrator associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the administrator associated with the enriched schedule payment request.","complex_type":true},"usage":{"language":"java","code":"EnrichedSchedulePaymentRequest request = new EnrichedSchedulePaymentRequest(\"admin\", \"1234567890\", \"Test\", true, 100, LocalDate.now().plusDays(3));\nUserDto admin = mapper.getEnrichedRequestAdmin(request);\n","description":"\nExplanation:\nWe create a new EnrichedSchedulePaymentRequest with the given parameters and then we pass it to the method getEnrichedRequestAdmin which returns an instance of UserDto. The returned UserDto has the following attributes:\n* userId (which is \"admin\")\n* id (which is \"1234567890\")\n* name (\"Test\")\n* email (null)\n* encryptedPassword (\"1234567890\")\n\nNote that the email and encryptedPassword are null because they are not provided in the EnrichedSchedulePaymentRequest."},"name":"getEnrichedRequestAdmin","code":"default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }","location":{"start":127,"insert":127,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"3733f821-2d5c-829e-f04f-c3e4968f70ef","ancestors":["b463e0f1-1b50-8ea4-7049-d53e199f7f5e"],"type":"function","description":"transforms an `EnrichedSchedulePaymentRequest` object into a `HouseMemberDto` object, containing the member's ID, name, and entity ID.","params":[{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"payment request with additional data, such as the member entity ID and name, which are used to create a new `HouseMemberDto`.\n\n* `memberEntityId`: A unique identifier for the member associated with the schedule payment request.\n* `memberId`: The ID of the member associated with the schedule payment request.\n* `houseMemberName`: The name of the member associated with the schedule payment request.","complex_type":true}],"returns":{"type_name":"HouseMemberDto","description":"a `HouseMemberDto` object containing the member's ID, name, and member ID from the input `EnrichedSchedulePaymentRequest`.\n\n* `id`: The ID of the member entity associated with the enriched schedule payment request.\n* `memberId`: The ID of the member associated with the enriched schedule payment request.\n* `name`: The name of the house member associated with the enriched schedule payment request.","complex_type":true},"usage":{"language":"java","code":"HouseMemberDto enrichedHouseMember = enrichedSchedulePaymentRequestMapper.getEnrichedRequestMember(enrichedSchedulePaymentRequest);\n","description":"\nHere, we pass in an instance of EnrichedSchedulePaymentRequest to the method getEnrichedRequestMember, and it returns a HouseMemberDto instance with the details of the member from the input EnrichedSchedulePaymentRequest. The mapping is defined by the @Mapping annotation on top of the method declaration. \n\nWe then assign the returned instance to an enrichedHouseMember variable of type HouseMemberDto. The resulting object can be used as a representation of the member details from the input EnrichedSchedulePaymentRequest."},"name":"getEnrichedRequestMember","code":"default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6}]}}}