{"name":"UserController.java","path":"service/src/main/java/com/myhome/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that implements the `UsersApi` interface. It handles various user-related operations such as signing up, listing all users, getting details of a specific user, resetting passwords, and confirming email addresses. The controller uses dependency injection to inject required services and mappers, and it utilizes Spring Data's pagination capabilities for handling pageable requests.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"c1c50289-e4a8-a3b2-1a4c-141381a73af8","ancestors":[],"type":"function","description":"is a RESTful API for managing users and their details, passwords, and email confirmations. It provides endpoints for signing up new users, listing all users, getting the details of a specific user, resetting or resetting a user's password, and resending an email confirmation request. Additionally, it also handles the mappings between different data structures and returns appropriate responses to client requests.","name":"UserController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0,"comment":{"start":46,"end":49}},"item_type":"class","length":96},{"id":"12bd7648-cafb-4f8f-3a47-35cb7562ab7f","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"receives a `CreateUserRequest` and maps it to a `UserDto`, then creates a new user using the `userService`. If successful, it returns a `ResponseEntity` with a `CreateUserResponse`, otherwise it returns a `ResponseEntity` with a `HttpStatus.CONFLICT`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"CreateUserRequest object passed from the client, which contains user information to be created in the system.\n\n* `@Valid` is an annotation that indicates the request has been validated by the `@Validated` processor, ensuring it meets certain criteria before entering this method.\n* `CreateUserRequest request` represents a user creation request containing various attributes such as username, email, password, and other relevant information.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of `CREATED` and the created user response as its body.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object that can have a status and a body. The status is set to `HttpStatus.CREATED`, indicating that the user has been created successfully.\n* `body`: This is a reference to the `CreateUserResponse` object that contains the details of the created user. The `body` attribute is not null, indicating that a response was generated.\n\nThe `orElseGet` method is used to provide a fallback response if no user is created successfully. In this case, the response status is set to `HttpStatus.CONFLICT`, indicating that there was an error creating the user.","complex_type":true},"usage":{"language":"java","code":"// request parameter\nCreateUserRequest createUserRequest = new CreateUserRequest();\ncreateUserRequest.setName(\"Example Name\");\ncreateUserRequest.setEmail(\"example@email.com\");\ncreateUserRequest.setPassword(\"Example Password\");\n\n// call signUp method and return ResponseEntity<CreateUserResponse>\nResponseEntity<CreateUserResponse> response = userService.signUp(createUserRequest);\n","description":""},"name":"signUp","code":"@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"de21130c-4778-f3b3-124a-5dcd5407ba57","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"receives a `Pageable` parameter and retrieves all users from the database using the `userService`. It then maps the retrieved users to a response object using the `userApiMapper`, before returning it as a `ResponseEntity` with a status code of `OK` and the response body.","params":[{"name":"pageable","type_name":"Pageable","description":"page number and limit for retrieving user details, allowing for efficient pagination of a large dataset.\n\n* The `log.trace()` statement indicates that the method has started processing the request.\n* The `Set<User> userDetails` variable holds the list of users returned by the `userService.listAll(pageable)` call.\n* The `userApiMapper.userSetToRestApiResponseUserSet()` method converts the `User` set to a `GetUserDetailsResponseUserSet`.\n* The `GetUserDetailsResponse response` variable holds the final response object, which contains the list of users in its `users` field.","complex_type":true}],"returns":{"type_name":"GetUserDetailsResponse","description":"a list of user details in a Rest API response format.\n\n* `GetUserDetailsResponse`: This is the class that represents the response from the API. It has a single property called `users`, which is a set of `GetUserDetailsResponseUser` objects.\n* `GetUserDetailsResponseUser`: This is a inner class of `GetUserDetailsResponse` that represents a user object in the response. It has several properties, including `id`, `username`, `email`, and `roles`.\n* `userService`: This is the class that provides the list of users through the `listAll()` method. It is not destructured in this function.\n* `userApiMapper`: This is the class that maps the user list from the service to the API response format. It is not destructured in this function.","complex_type":true},"usage":{"language":"java","code":"import org.springframework.data.domain.Pageable;\n// Import the Pageable class from Spring Data\n\n@Autowired // Inject the userService instance from the Spring context\nprivate UserService userService;\n\npublic void example() {\n    Pageable pageable = new PageRequest(0, 10); // Request the first page with a size of 10\n    List<User> users = userService.listAllUsers(pageable); // Retrieve the first 10 users from the database\n    for (User user : users) {\n        System.out.println(\"User: \" + user);\n    }\n}\n","description":""},"name":"listAllUsers","code":"@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"3a236f36-7b2c-7fb2-3f4e-7754b39d4008","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"retrieves user details given a user ID, maps them to `GetUserDetailsResponse`, and returns a `ResponseEntity` with the transformed response.","params":[{"name":"userId","type_name":"String","description":"unique identifier of the user whose details are to be retrieved.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an HTTP status code of OK and a body containing the user details.\n\n* The `ResponseEntity` object represents a response with an HTTP status code of OK (HttpStatus.OK) and a body containing the user details in the form of a `GetUserDetailsResponseUser` object.\n* The `getUserDetails` function returns a `Optional` instance of `ResponseEntity`, which means that the function may or may not return a response, depending on whether a user with the given `userId` exists in the database. If no user is found, the function returns a `ResponseEntity` with an HTTP status code of NOT_FOUND (HttpStatus.NOT_FOUND).\n* The `map` method is used to transform the result of the `userService.getUserDetails(userId)` call into a `ResponseEntity` instance. The `map` method takes two lambda functions as arguments: one that maps the `UserDto` object returned by `userService.getUserDetails(userId)` to a `GetUserDetailsResponseUser` object using `userApiMapper.userDtoToGetUserDetailsResponse`, and another that maps the resulting `GetUserDetailsResponseUser` object to a `ResponseEntity` instance with an HTTP status code of OK (HttpStatus.OK) and a body containing the user details.\n* If the `getUserDetails` function does not find a user with the given `userId` in the database, it returns an empty `Optional` instance, which is then mapped to a `ResponseEntity` instance with an HTTP status code of NOT_FOUND (HttpStatus.NOT_FOUND) using the second lambda function.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    UserService userService = new UserService();\n    GetUserDetailsResponse response = userService.getUserDetails(\"test\");\n}\n","description":""},"name":"getUserDetails","code":"@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"65a085f3-893d-2b90-3948-c0338ab461c2","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"handles password reset requests from users. It determines whether the action is FORGOT or RESET, and based on that, it calls the corresponding methods to reset or validate a password. If successful, it returns an `OK` response entity, otherwise it returns a `BAD_REQUEST` response entity.","params":[{"name":"action","type_name":"String","description":"password action to be performed, with possible values of `FORGOT` or `RESET`, which determine the corresponding action to be taken by the function.","complex_type":false},{"name":"forgotPasswordRequest","type_name":"ForgotPasswordRequest","description":"Forgot Password Request object containing the user's email address and other information required for password reset.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` object must be valid according to its schema.\n* `@RequestBody`: The `forgotPasswordRequest` object is passed as a request body in the HTTP request.\n* `ForgotPasswordRequest`: This class represents the request body for resetting or retrieving a password. It contains properties such as `email`, `password`, and `reason`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing an HTTP 200 OK response.\n\n* `ResponseEntity`: This is an object that represents a response to a HTTP request. It has a `statusCode` field that indicates the status of the response (e.g. 200 for OK, 404 for Not Found).\n* `build()`: This is a method that creates a new `ResponseEntity` instance with the specified properties.\n* `ok()`: This is an instance of `ResponseEntity` with a status code of 200 (OK).\n\nIn the function, the output of the `usersPasswordPost` function depends on the value of the `parsedAction` variable, which is set to one of three values: `FORGOT`, `RESET`, or `UNKNOWN`. If the value of `parsedAction` is `FORGOT`, then the function returns a response with a status code of 200 (OK) indicating that the password reset process has been initiated. If the value of `parsedAction` is `RESET`, then the function returns a response with a status code of 204 (No Content) indicating that the password has been reset successfully. Otherwise, the function returns a response with a status code of 400 (Bad Request) indicating that there is an error in the request.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class ExampleController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/users/password\")\n    public ResponseEntity<Void> passwordAction(\n            @NotNull @Valid String action, \n            @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n        boolean result = false;\n        PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n        if (parsedAction == PasswordActionType.FORGOT) {\n            result = true;\n            userService.requestResetPassword(forgotPasswordRequest);\n        } else if (parsedAction == PasswordActionType.RESET) {\n            result = userService.resetPassword(forgotPasswordRequest);\n        }\n        if (result) {\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n}\n","description":"\nThe action input can be either \"FORGOT\" or \"RESET\". The forgotten password request body will be processed by the userService if the action is \"FORGOT\", and the reset password request body will be processed if the action is \"RESET\". If the action is not recognized, a bad request response will be returned."},"name":"usersPasswordPost","code":"@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"4f543d92-db9b-939e-3f47-274b1977d65d","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"receives a request to list all members of all houses of a user, retrieves the members from the houses of the user, maps them to a Rest API response format, and returns it as a ResponseEntity with an OK status or a NOT_FOUND status if there are no members.","params":[{"name":"userId","type_name":"String","description":"ID of the user for whom the list of house members is being requested.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and page size required for fetching all house members of a particular user.\n\n* `userId`: The user ID for which the houses and members will be listed.\n* `pageable`: A `Pageable` object that contains information about the pagination of results, such as the page number, page size, total pages, and total items.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a list of `HouseMemberSet` objects representing all housemembers of the specified user.\n\n* `ResponseEntity`: This is the top-level class in Spring Web Flux that represents a response entity, which can be either a success or failure response.\n* `ok`: This is a subclass of `ResponseEntity` that indicates a successful response with a 200 status code and a list of `HouseMemberSet` objects as its body.\n* `notFound`: This is a subclass of `ResponseEntity` that indicates a failed response with a 404 status code and a message indicating that the requested resource could not be found.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n","description":""},"name":"listAllHousemates","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"3a91129b-7d89-c28e-cc45-bba18e5a1187","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"verifies whether an email address is confirmed for a given user ID by making a call to the `userService`. If the email is confirmed, it returns an `OK` response entity. Otherwise, it returns a `BAD_REQUEST` response entity.","params":[{"name":"userId","type_name":"String","description":"user whose email is being confirmed.","complex_type":false},{"name":"emailConfirmToken","type_name":"String","description":"token sent to the user's email for confirmation of their email address.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status of `ok` or `badRequest`, depending on whether the email confirmation was successful or not.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a web service request. It contains an `Ok` or `BadRequest` status, as well as other attributes such as headers and body.\n* `ok()`: This is a method that builds an `ResponseEntity` with an `Ok` status.\n* `build()`: This is a method that builds the entire response entity, including the status, headers, and body.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n","description":"\nThe confirmEmail method takes two inputs: userId and emailConfirmToken. It then passes these values to the userService.confirmEmail method, which checks if the email is confirmed or not. If the email is confirmed it returns true and we return a ResponseEntity with an OK status code. If the email is not confirmed it returns false and we return a ResponseEntity with a BAD_REQUEST status code."},"name":"confirmEmail","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":126,"insert":126,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"48a40074-69cd-8692-d144-12981a6832ab","ancestors":["c1c50289-e4a8-a3b2-1a4c-141381a73af8"],"type":"function","description":"resends an email confirmation to a user if one was previously sent and failed, returning a response entity with a status of `ok` or `badRequest`.","params":[{"name":"userId","type_name":"String","description":"ID of the user for whom the email confirmation status is to be resent.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"an `ResponseEntity` object with a status of either `ok` or `badRequest`.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a HTTP request. It has a `statusCode` field that indicates the status of the response (either `OK` or `BAD_REQUEST`).\n* `ok()`: This is a method of the `ResponseEntity` class that returns an instance of the `OkResponse` subclass, which represents a successful response with a `statusCode` of `200`.\n* `build()`: This is a method of the `ResponseEntity` class that returns a new instance of the response object, allowing the caller to add additional attributes or modify the existing ones.","complex_type":true},"usage":{"language":"java","code":"// Example usage of the method resendConfirmEmailMail\npublic static void main(String[] args) {\n  UserController userController = new UserController();\n  ResponseEntity<Void> response = userController.resendConfirmEmailMail(\"userId\");\n}\n","description":""},"name":"resendConfirmEmailMail","code":"@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9}]}}}