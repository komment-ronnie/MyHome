{"name":"CommunityController.java","path":"service/src/main/java/com/myhome/controllers/CommunityController.java","content":{"structured":{"description":"An API for managing communities, admins, and houses. The API includes endpoints for listing all communities, details about a specific community, adding or removing admins or houses from a community, and deleting a community. The code uses various packages such as Spring WebFlux, Spring Data JPA, and Jackson for JSON serialization and deserialization.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"824d5f42-504c-0e9b-114c-0577fc038cb6","ancestors":[],"type":"function","description":"handles various operations related to communities, including listing all communities, listing community admins, listing community houses, adding a new community, adding a new house to a community, removing a house from a community, removing an admin from a community, and deleting a community. The controller uses the `CommunityService` class to perform these operations and returns response entities based on the outcome of each operation.","name":"CommunityController","code":"@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":56,"insert":56,"offset":" ","indent":0,"comment":{"start":52,"end":55}},"item_type":"class","length":152},{"id":"d7af3480-20ca-ba83-504c-47fd3c3dc700","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"receives a `CreateCommunityRequest` object, converts it into a `CommunityDto`, creates a new community using the `communityService`, and maps the created community back to a `CreateCommunityResponse`. The response is then returned with a status code of `HttpStatus.CREATED`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object that contains the data required to create a new community, which is then used by the function to create the community and return the response.\n\n* `@Valid`: This annotation indicates that the `CreateCommunityRequest` object has been validated by the `@Valid` processor.\n* `@RequestBody`: This annotation specifies that the `CreateCommunityRequest` object should be passed in the request body of the API.\n* `CreateCommunityRequest`: This class represents the request to create a community, containing various attributes such as name, description, and tags.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the newly created community details.\n\n* `ResponseEntity`: This is a class that represents a response entity, which is an aggregation of metadata and content. In this case, the content is the `CreateCommunityResponse`.\n* `HttpStatus`: This is an enumeration that indicates the HTTP status code of the response. In this case, it is set to `CREATED`, which means the request was successful and the community was created.\n* `body`: This is a reference to the content of the response entity, which in this case is a `CreateCommunityResponse`.\n* `CreateCommunityResponse`: This class represents the response to the create community request. It contains various properties, including the ID of the newly created community, the name of the community, and the status of the creation (either `CREATED` or `FAILED`).","complex_type":true},"usage":{"language":"java","code":"CreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My Community\");\nrequest.setDescription(\"This is my community.\");\nrequest.setIsPrivate(false);\nrequest.setAdmins(new HashSet<String>() {{\n    add(\"user-1\");\n}});\nrequest.setHouses(new HashSet<CommunityHouseName>() {{\n    CommunityHouseName house = new CommunityHouseName();\n    house.setName(\"house-1\");\n    house.setDescription(\"This is house 1.\");\n    add(house);\n}});\nResponseEntity<CreateCommunityResponse> response = communityApiController.createCommunity(request);\n","description":"\nIn this example, the method createCommunity is called with an instance of CreateCommunityRequest as input. The name and description fields are set to \"My Community\" and \"This is my community.\" respectively. The isPrivate field is set to false indicating that it is a public community. The admin field contains a single user id \"user-1\". The houses field contains a single house with the name \"house-1\" and the description field containing \"This is house 1.\"\nThe response from this request would be an instance of CreateCommunityResponse which contains the newly created Community object in the community field."},"name":"createCommunity","code":"@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"fdb134dd-1577-e496-9e4b-a73c531ba8d5","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"retrieves a list of all communities from the community service and maps them to a REST API response object using the `communityApiMapper`. The response is then returned as a `ResponseEntity` with an HTTP status code of `OK` and the mapped community details in the body.","params":[{"name":"pageable","type_name":"Pageable","description":"page size and sort order for retrieving community details from the service.\n\n* `@PageableDefault(size = 200)` - The page size is set to 200 by default.","complex_type":true}],"returns":{"type_name":"GetCommunityDetailsResponse","description":"a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This is the class that represents the response entity returned by the function. It has a `getCommunities()` method that adds all the community details returned by the function to a list.\n* `pageable`: This is an optional parameter that represents the pageable request parameters. If present, it defines the size of the page and the Sort order for the results.\n* `communityService`: This is the class that provides the methods for listing all communities.\n* `communityApiMapper`: This is the class that maps the community service results to a rest API response.\n\nIn summary, the function receives a `pageable` parameter, lists all communities using the `communityService`, and maps the results to a REST API response using the `communityApiMapper`. The response entity returned by the function has a list of community details as its property.","complex_type":true},"usage":{"language":"java","code":"Pageable pageable = PageRequest.of(0, 20);\nSet<Community> communityDetails = communityService.listAll(pageable);\nSet<GetCommunityDetailsResponseCommunity> communityDetailsResponse = communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n","description":"\nIn this example the method listAllCommunity is invoked with a pageable parameter, which contains information about the pagination of the request. The response from the service is then mapped to a response object for REST API using a mapper class that maps the Community objects into the GetCommunityDetailsResponseCommunity objects and finally stored in the response variable as a Set of GetCommunityDetailsResponseCommunity."},"name":"listAllCommunity","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"002e3dfc-faad-b6a8-c14c-47679dcd1b9e","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"retrieves community details based on the given ID and maps them to a REST API response. It returns an `ResponseEntity` with the converted communities list.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community whose details are being requested.","complex_type":false}],"returns":{"type_name":"ResponseEntityGetCommunityDetailsResponse","description":"a `ResponseEntity` object with a status of `ok` and a list of communities.\n\n* `ResponseEntity<GetCommunityDetailsResponse>` is an entity that wraps the response to the request. It has an `ok` field which is set to `true` if the request was successful and a `body` field that contains the `GetCommunityDetailsResponse`.\n* `GetCommunityDetailsResponse` is a class that represents the response to the request. It has a `communities` field that contains a list of communities.\n* The `communities` list is an array of `Community` objects, each representing a community with its ID, name, and other details.\n* The `map` methods are used to convert the entities returned by the service into the desired response format. For example, `map(communityApiMapper::communityToRestApiResponseCommunity)` maps the `Community` object to the `GetCommunityDetailsResponse.communities` list.\n* The `orElseGet` method is used to provide a default response if the request fails. In this case, it returns a `ResponseEntity.notFound().build()` object with an error message indicating that the community with the provided ID could not be found.","complex_type":true},"usage":{"language":"java","code":"GetCommunityDetailsResponse response = communityApiService.listCommunityDetails(communityId).block();\nif (response != null) {\n    return ResponseEntity.ok(response);\n} else {\n    return ResponseEntity.notFound().build();\n}\n","description":"\nIn this example, the listCommunityDetails method is called on a CommunityApiService with the communityId parameter set to the ID of the community we want to retrieve details for. The response returned by the service method is then stored in a variable named \"response\". If the response is not null, we return an OK (200) HTTP response code along with the response object, otherwise we return a NOT_FOUND (404) HTTP response code."},"name":"listCommunityDetails","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"ced5e290-d708-2583-df4a-e4632bb0b294","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"receives a community ID and pageable parameter, queries the community service to retrieve a list of admins, maps the results to a REST API response format, and returns the response entity.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which the list of admins is requested.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page request parameters, such as the page number, size, and sort order, that determine how the list of community admins is retrieved and paginated.\n\n* `@PageableDefault(size = 200)` specifies that the pageable request should default to a page size of 200.\n* `Pageable pageable` represents the pageable request, which can be modified or expanded based on the requirements of the function.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing a successful response with a list of community admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the generic type of the response entity, which contains a list of `CommunityAdmin` objects.\n* `ListCommunityAdminsResponse`: This class represents the response to the API request, which contains a list of `CommunityAdmin` objects.\n* `admins(List<CommunityAdmin>)`: This method returns the list of `CommunityAdmin` objects contained in the response.\n* `ok()`: This method builds an HTTP 200 OK response entity with the list of `CommunityAdmin` objects.\n* `notFound()`: This method builds an HTTP 404 NOT FOUND response entity.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityApi communityApi;\n\npublic void getAdminsExample() {\n  String communityId = \"1\"; // Replace with the appropriate community id\n  Pageable pageable = PageRequest.of(0, 20); // Replace with the appropriate parameters\n  \n  ListCommunityAdminsResponse response = communityApi.listCommunityAdmins(communityId, pageable).getBody();\n  \n  if (response == null) {\n    System.out.println(\"No admins found in this community\");\n  } else {\n    Set<String> admins = response.getAdmins();\n    for (String admin : admins) {\n      System.out.println(admin);\n}\n","description":"\nThis code would retrieve a list of admins from the community with id=1, and print each admin on a new line in the console.\n\n\nThe following is an example on how method deleteCommunity would be used:\n"},"name":"listCommunityAdmins","code":"@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"c7dd9717-a631-76ad-9c42-8d8c7ca2a8b7","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"receives a community ID and a pageable parameter, and returns a `ResponseEntity` containing a list of houses belonging to that community.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the user wants to list all houses.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and page size for fetching houses from the community, allowing for pagination of the result set.\n\n* `@PageableDefault(size = 200)` specifies the default page size for the list of houses returned in the response. The value `200` indicates that the list will contain a maximum of 200 houses per page.","complex_type":true}],"returns":{"type_name":"ResponseEntityGetHouseDetailsResponse","description":"a `ResponseEntity` object representing a successful response with a list of community houses in a JSON format.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the type of the returned entity, which contains a `houses` field that is a list of `CommunityHouseSet` objects.\n* `GetHouseDetailsResponse`: This is the inner type of the returned entity, which represents the response to the list houses API endpoint. It has a `houses` field that is a list of `CommunityHouse` objects.\n* `CommunityHouseSet`: This is the inner type of the `houses` field in the returned entity, which represents a set of `CommunityHouse` objects for a particular community ID.\n* `CommunityHouse`: This is the inner type of the `CommunityHouse` field in the `CommunityHouseSet` object, which represents a single house belonging to a particular community. It has fields for the house ID, community ID, and other house-related details.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\n@Test\npublic void testListCommunityHouses() {\n    // given\n    String communityId = \"test-community\";\n    Pageable pageable = PageRequest.of(0, 1);\n\n    // when\n    ResponseEntity<GetHouseDetailsResponse> response = communityController.listCommunityHouses(communityId, pageable);\n\n    // then\n    assertThat(response).isNotNull();\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.getBody().getHouses()).hasSizeGreaterThanOrEqualTo(1);\n}\n","description":"\nIn this example, a mock CommunityController is created and used to test the listCommunityHouses method. The community ID is set to \"test-community\" and the pageable object is defined to retrieve only one result. The response is then checked to ensure it has an OK status code, the body contains at least one house, and is not null."},"name":"listCommunityHouses","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":118,"insert":118,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"8b29d955-9ab1-79bc-ee4a-4b5f57a8554f","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"adds admins to a community identified by the provided ID. It first checks if there are any admins to be added, then calls the `addAdminsToCommunity` method to perform the addition. The function returns a response entity with the updated admin set.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which admins are being added.","complex_type":false},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the admin details to be added to the specified community.\n\n* `@Valid`: Indicates that the request body is valid and contains the required information for adding admins to a community.\n* `@RequestBody`: Represents the request body as a whole, which contains the `AddCommunityAdminRequest` object.\n* `AddCommunityAdminRequest`: A class that represents the request sent by the client to add admins to a community. It contains several attributes:\n\t+ `communityId`: The ID of the community to which the admins will be added.\n\t+ `admins`: A list of user IDs that will be added as admins to the specified community.\n\nThe function then processes the request and returns a response entity accordingly.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of `CREATED` and a body containing an `AddCommunityAdminResponse` object with the added admins.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response object in the REST API. It has a `status` field that indicates the HTTP status code of the response (e.g., 200 for OK, 404 for Not Found).\n* `body`: This is a reference to the body of the response entity. In this case, it contains an instance of the `AddCommunityAdminResponse` class, which represents the result of adding admins to a community.\n* `admins`: This is a set of strings that represent the IDs of the added admins.\n\nThe `addCommunityAdmins` function either returns a response entity with a status code of 201 (Created) and a body containing an `AddCommunityAdminResponse`, or it returns a response entity with a status code of 404 (Not Found) if the community with the given ID does not exist.","complex_type":true},"usage":{"language":"java","code":"@Autowired CommunityController communityController;\n\n// Add admins to a community by id\ncommunityController.addCommunityAdmins(\"1\", new AddCommunityAdminRequest(\n    Arrays.asList(\"user@mail.com\")));\n","description":"\nThis code would add an admin with the email address \"user@mail.com\" to the community with id 1. The method returns a ResponseEntity containing a body of type AddCommunityAdminResponse, which is a set of admin user IDs.\n\nPlease note that the input values provided are strings only. If any other types were accepted in the request body, they would need to be casted in this example.\n\nThis method call would return an HTTP 201 (Created) response code if successful, or a HTTP 404 (Not Found) if the community with the given id was not found, or a HTTP 500 (Internal Server Error) if there was an internal problem with the server."},"name":"addCommunityAdmins","code":"@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":132,"insert":132,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"3e9a070f-0ced-219b-984e-61656f0954d2","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"receives a request to add houses to a community, retrieves the list of houses and their corresponding IDs, adds them to the community using the community service, and returns the response with the added houses.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which the houses will be added.","complex_type":false},{"name":"request","type_name":"AddCommunityHouseRequest","description":"AddCommunityHouseRequest object containing the house names to be added to the specified community, which is passed in from the HTTP request body.\n\n* `@Valid`: Indicates that the request body must be valid according to the provided validation rules.\n* `@PathVariable String communityId`: The ID of the community to which the houses will be added.\n* `@RequestBody AddCommunityHouseRequest request`: The request body contains the houses to be added to the community, which are mapped to a `Set` of `CommunityHouseName` objects using the `communityApiMapper`.","complex_type":true}],"returns":{"type_name":"AddCommunityHouseResponse","description":"a `ResponseEntity` object with a ` HttpStatus` code of `CREATED` and a `AddCommunityHouseResponse` object containing the added houses.\n\n* `AddCommunityHouseResponse`: This is the class that represents the response to the API request. It has a single field called `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: The status code of the response, which can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This is the class that represents the response object returned by the API. It has a status code and a body, which in this case is an instance of `AddCommunityHouseResponse`.","complex_type":true},"usage":{"language":"java","code":"AddCommunityHouseRequest request = new AddCommunityHouseRequest();\nrequest.setHouses(Set.of(\"house1\", \"house2\"));\n\nResponseEntity<AddCommunityHouseResponse> response = communityApiService.addCommunityHouses(\"communityId\", request);\n","description":"\nThis code will create two house in the community with id `communityId` and return an HTTP status of 201 (CREATED) if successful. If there is a failure in adding the houses, it will return an HTTP status of 400 (BAD REQUEST)."},"name":"addCommunityHouses","code":"@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"7149ddbe-feb0-6ba0-e248-48f6846222e5","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"retrieves a community and a house ID from the request parameters, then deletes the house from the community using the `communityService`. If successful, it returns a `ResponseEntity` with a `Void` body.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the house belongs, which is used to retrieve the community details and remove the house from it.","complex_type":false},{"name":"houseId","type_name":"String","description":"ID of the house to be removed from the specified community.","complex_type":false}],"returns":{"type_name":"ResponseEntityVoid","description":"a `ResponseEntity` object representing a successful removal of the house from the specified community.\n\n* `ResponseEntity<Void>`: The type of the response entity, which is Void in this case.\n* `noContent()`: This method returns a ResponseEntity with a status code of 204 (No Content), indicating that the house has been successfully removed from the community without any content returned in the response body.\n* `<Void>`: The type parameter of the ResponseEntity, which represents Void in this case.\n\nTherefore, the output of the `removeCommunityHouse` function can be destructured as follows:\n\nResponseEntity<Void> removed = communityOptional.filter(community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n            .map(removed -> ResponseEntity.noContent().<Void>build())\n            .orElseGet(() -> ResponseEntity.notFound().build());","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void removeCommunityHouse() {\n  String communityId = \"community-id\";\n  String houseId = \"house-id\";\n\n  ResponseEntity<Void> response = communityController.removeCommunityHouse(communityId, houseId);\n\n  assertThat(response).isEqualTo(ResponseEntity.noContent().<Void>build());\n}\n","description":"\nThis code creates a test that demonstrates how the removeCommunityHouse method would be used with the communityId and houseId parameters set to \"community-id\" and \"house-id\". The ResponseEntity object is compared with the expected response of ResponseEntity.noContent().<Void>build() using AssertJ's isEqualTo method. This ensures that the response is the same as what would be returned from the removeCommunityHouse method if it were called with these parameters.\nWhen a unit test is run, it will verify that the method removes the house from the community by comparing the response to ResponseEntity.noContent().<Void>build(). If the response is not equal to this object, then the test would fail and report an error."},"name":"removeCommunityHouse","code":"@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":167,"insert":167,"offset":" ","indent":2,"comment":null},"item_type":"method","length":15},{"id":"7ec1a4af-2cd2-5eb6-da4c-7fae6981a903","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"removes an admin from a community based on the provided community ID and admin ID, returning a response entity with HTTP status code indicating success or failure.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which an admin is to be removed.","complex_type":false},{"name":"adminId","type_name":"String","description":"ID of the admin to be removed from the community.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the request was successful and resulted in no content being modified or created.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the admin could not be removed from the community, likely because the community or the admin does not exist.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\n// ...\n\ncommunityController.removeAdminFromCommunity(\"123456789\", \"adminId\");\n","description":"\nIn this example, the method is being autowired and called with two inputs: a String representing the ID of the community that the admin is to be removed from (\"123456789\"), and another string representing the ID of the admin that needs to be removed (\"adminId\"). The method returns a ResponseEntity, which contains information about the response received. In this case, if the admin was successfully removed, the response would contain no content (status code 204), otherwise it would return a status code of 404 indicating that the admin could not be found or the community could not be found."},"name":"removeAdminFromCommunity","code":"@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":183,"insert":183,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"957f9b8c-b39e-7695-9a40-f69a87d0cb45","ancestors":["824d5f42-504c-0e9b-114c-0577fc038cb6"],"type":"function","description":"receives a community ID and deletes it from the service, returning a HTTP status code indicating the result of the operation.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to be deleted.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the community was successfully deleted.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the community was successfully deleted.\n* `HttpStatus.NOT_FOUND`: This indicates that the specified community could not be found.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\ncommunityController.deleteCommunity(\"123\");\n","description":"\nThis call will delete the community with the id of \"123\" from the database, and return a ResponseEntity with a status code 204 (No Content) if it was successfully deleted or a response with a status code 404 (Not Found) if it was not found."},"name":"deleteCommunity","code":"@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":197,"insert":197,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10}]}}}