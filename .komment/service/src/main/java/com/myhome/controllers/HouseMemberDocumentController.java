{"name":"HouseMemberDocumentController.java","path":"service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java","content":{"structured":{"description":"A REST controller class that handles endpoints for managing house member documents. The class implements the `DocumentsApi` interface and provides methods for getting, uploading, updating, and deleting house member documents. The methods use the `HouseMemberDocumentService` class to interact with the document database.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"f3638e69-591e-7792-ff47-e7f69f645930","ancestors":[],"type":"function","description":"provides endpoints for managing house member documents. The class has methods for getting, updating, and deleting house member documents, along with handling HTTP responses.","name":"HouseMemberDocumentController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0,"comment":{"start":35,"end":38}},"item_type":"class","length":66},{"id":"3be2029c-27ac-eab8-144e-47136d41c43d","ancestors":["f3638e69-591e-7792-ff47-e7f69f645930"],"type":"function","description":"retrieves a house member document from the service and returns it as a byte array in the response entity with appropriate headers for caching and content type.","params":[{"name":"memberId","type_name":"String","description":"ID of the member for whom the corresponding house member document is being retrieved.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the requested document content as a byte array and HTTP headers.\n\n* `HttpHeaders headers`: This contains metadata about the response, such as caching directives and content type.\n* `byte[] content`: The actual document content in byte form.\n* `ContentDisposition contentDisposition`: Contains information about how to display or handle the response, such as filename and inline/attachment status.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"getHouseMemberDocument","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":24},{"id":"3ea523f3-4802-0cbc-d040-68b1c1353dd2","ancestors":["f3638e69-591e-7792-ff47-e7f69f645930"],"type":"function","description":"receives a request to upload a house member document, creates a new document using the provided file and member ID, and returns a response entity indicating whether the operation was successful or not.","params":[{"name":"memberId","type_name":"String","description":"ID of the house member whose document is being uploaded.","complex_type":false},{"name":"memberDocument","type_name":"MultipartFile","description":"file containing the member's document to be uploaded.\n\n* `@PathVariable String memberId`: The unique identifier for the house member whose document is being uploaded.\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: The file containing the house member's document, which can be either a PDF or JPEG image.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the document was successfully uploaded or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)`: This indicates that the operation was successful and no content was returned to the client.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND)`: This indicates that the house member document could not be found, likely because it does not exist or has been deleted.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n    \n    // create a new HouseMemberDocument with the uploaded multipart file and the given memberId\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    \n    // return a ResponseEntity with status NO_CONTENT if successful or NOT_FOUND otherwise\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"uploadHouseMemberDocument","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"621bf8f1-ba27-b1aa-a44d-a3abda28db75","ancestors":["f3638e69-591e-7792-ff47-e7f69f645930"],"type":"function","description":"receives a request to update a house member's document and updates the corresponding document in the database using the provided document and member ID. If the document is successfully updated, a NO_CONTENT status code is returned. If the document cannot be found or the request fails, a NOT_FOUND status code is returned.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the member whose document is being updated.","complex_type":false},{"name":"memberDocument","type_name":"MultipartFile","description":"document to be updated for the corresponding member ID.\n\n* `memberId`: The ID of the house member whose document is being updated.\n* `memberDocument`: A MultipartFile containing the updated document for the house member.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a response entity with a status code of NO_CONTENT or NOT_FOUND, depending on whether the update was successful.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT).build()`: This is a response entity with a status code of NO_CONTENT, indicating that the update was successful and no additional content was returned.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND).build()`: This is a response entity with a status code of NOT_FOUND, indicating that the requested member document could not be found.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":""},"name":"updateHouseMemberDocument","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":83,"insert":83,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10},{"id":"2c7b212c-c47d-3ca6-3e48-06498116945f","ancestors":["f3638e69-591e-7792-ff47-e7f69f645930"],"type":"function","description":"deletes a house member document based on the provided member ID, returning a HTTP status code indicating whether the operation was successful or not.","params":[{"name":"memberId","type_name":"String","description":"ID of a house member whose document is to be deleted.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the requested resource has been successfully deleted and no content was returned.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the requested house member document could not be found, which means it may have been deleted or never existed in the first place.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = houseMemberDocumentController.deleteHouseMemberDocument(\"memberId\");\n","description":""},"name":"deleteHouseMemberDocument","code":"@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10}]}}}