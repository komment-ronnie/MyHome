{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A REST controller class named AmenityController that implements the AmenitiesApi interface. The class contains methods for retrieving and updating amenities in a community, as well as deleting an amenity and listing all amenities in a community. The class uses Lombok, Spring Web Flux, and Spring Data JPA.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9ddebb44-d3b0-9aa1-544f-9d54254447c7","ancestors":[],"type":"function","description":"provides functionality for retrieving and manipulating amenities in a system. It exposes several endpoints for getting and updating amenities, as well as deleting them when they are no longer needed.","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0,"comment":null},"item_type":"class","length":59},{"id":"9b8db035-49ab-dc9d-3c4f-30159716c42e","ancestors":["9ddebb44-d3b0-9aa1-544f-9d54254447c7"],"type":"function","description":"retrieves the details of an amenity with a given ID from the database using `amenitySDJpaService`, maps it to a response object using `amenityApiMapper`, and returns it as a `ResponseEntity` with a status code of `OK` or `NOT_FOUND` depending on the result.","params":[{"name":"amenityId","type_name":"String","description":"identifier of the amenity for which details are requested.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing the amenity details in JSON format.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is a response entity that contains the amenity details in the form of `GetAmenityDetailsResponse`.\n* `GetAmenityDetailsResponse`: This class represents the response to the `getAmenityDetails` function, which contains the amenity details fetched from the database. It has several attributes, including `amenityId`, `name`, `description`, `icon`, and `latitude`.\n* `map(Function<T, U> mapper)`: This line uses the `map` method to apply a function to the output of the `getAmenityDetails` function. In this case, the function is `amenityApiMapper::amenityToAmenityDetailsResponse`, which maps the `GetAmenityDetailsResponse` object to a more accessible form.\n* `orElse(T alternative)`: This line provides an alternative output if the original output is not found. In this case, the alternative output is a `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testGetAmenityDetails() {\n    ResponseEntity<GetAmenityDetailsResponse> response =\n        amenityController.getAmenityDetails(\"amenityId\");\n    \n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertNotNull(response.getBody().getName());\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8},{"id":"b15b20cc-a89a-a69c-b643-599e816764b4","ancestors":["9ddebb44-d3b0-9aa1-544f-9d54254447c7"],"type":"function","description":"retrieves a list of amenities from the database using `amenitySDJpaService`, and maps them to `GetAmenityDetailsResponse` objects using `amenityApiMapper`. It then returns an `ResponseEntity` with the mapped response.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community whose amenities are to be listed.","complex_type":false}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the details of the amenities for a specific community.\n\n* `ResponseEntity`: This is the outermost class that represents a response entity in RESTful APIs. It has an `ok` field that indicates whether the response is successful or not.\n* `Set<GetAmenityDetailsResponse>`: This is a set of `GetAmenityDetailsResponse` objects, which are the inner most class representing the amenities with their details.\n* `amenitySDJpaService`: This is an instance of a JPA service that provides methods for interacting with the database.\n* `communityId`: This is the parameter passed to the function, which represents the community ID.\n* `amenityApiMapper`: This is an instance of an API mapper class that maps the JPA entities to the response entity.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"communityId\";\nSet<GetAmenityDetailsResponse> response = amenityController.listAllAmenities(communityId);\n","description":""},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8},{"id":"eeb16424-f30e-bf9e-d24f-371478ae746d","ancestors":["9ddebb44-d3b0-9aa1-544f-9d54254447c7"],"type":"function","description":"adds amenities to a community through the creation of new amenities in the database and returns a response entity indicating whether the operation was successful.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.","complex_type":false},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the `amenitySDJpaService` to create the new amenities in the database.\n\n* `communityId`: A string representing the ID of the community to which the amenities will be added.\n* `requestBody`: The AddAmenityRequest object containing the amenities to be added to the community. It has attributes such as `amenities`, which is a list of Amenity objects, and `id`, which is an identifier for the request.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"an `AddAmenityResponse` object containing a list of created amenities.\n\n* The `ResponseEntity<AddAmenityResponse>` object represents a successful response with an `AddAmenityResponse` object inside it.\n* The `AddAmenityResponse` object contains a list of `Amenity` objects representing the newly created amenities in the community.\n* The `map` method is used to transform the `ResponseEntity<AddAmenityResponse>` object into a `ResponseEntity` object with an `ok` status code.\n* The `orElse` method is used as a fallback to return a `ResponseEntity.notFound().build()` object if the original response cannot be converted to an `ok` status code.","complex_type":true},"usage":{"language":"java","code":"String communityId = \"123\";\nAddAmenityRequest request = new AddAmenityRequest();\nrequest.setAmenities(new ArrayList<Amenity>(){{\n    Amenity amenity1 = new Amenity();\n    amenity1.setName(\"Amenity 1\");\n    Amenity amenity2 = new Amenity();\n    amenity2.setName(\"Amenity 2\");\n    add(amenity1);\n    add(amenity2);\n}});\nResponseEntity<AddAmenityResponse> response = controller.addAmenityToCommunity(communityId, request);\n","description":"\nExplanation: In this example, we have a community with ID \"123\" and two amenities with names \"Amenity 1\" and \"Amenity 2\". We create an AddAmenityRequest object with these two amenities. Then, we pass the request to the addAmenityToCommunity method of the controller. The method creates a new response entity with the list of created amenities as its body."},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"46e4fd63-62af-70af-8240-ed56b9dd176e","ancestors":["9ddebb44-d3b0-9aa1-544f-9d54254447c7"],"type":"function","description":"deletes an amenity based on its ID, returning a response entity indicating whether the operation was successful or not.","params":[{"name":"amenityId","type_name":"String","description":"id of the amenity to be deleted.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a HTTP status code of `NO_CONTENT` or `NOT_FOUND`, indicating whether the amenity was successfully deleted or not.\n\n* `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully deleted or not.\n* `HttpStatus`: The HTTP status code of the response entity, which is either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was found and deleted successfully or not.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}\n","description":""},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"d3b7c001-b97b-249c-6d43-10b9e2b4842a","ancestors":["9ddebb44-d3b0-9aa1-544f-9d54254447c7"],"type":"function","description":"updates an amenity's information in the database based on a request body containing the updated amenity details, and returns a response indicating whether the update was successful or not.","params":[{"name":"amenityId","type_name":"String","description":"unique identifier of the amenity being updated.","complex_type":false},{"name":"request","type_name":"UpdateAmenityRequest","description":"`UpdateAmenityRequest` object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must be valid according to the schema defined in the `@VALID` annotation.\n* `@RequestBody`: Marks the `request` parameter as a serialized JSON object in the request body.\n* `UpdateAmenityRequest`: Represents the request body schema for updating an amenity, containing fields such as `amenityId`, `name`, `description`, and `location`.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was updated successfully.\n\n* `HttpStatus`: This is an instance of the `HttpStatus` class, which represents the HTTP status code returned by the function. In this case, it can be either `NO_CONTENT` or `NOT_FOUND`.\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response entity that contains the HTTP status code and other information about the response. The `status()` method returns the `HttpStatus` object representing the status code.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n","description":"\nHere is an example of how to use this Java method:\n"},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}