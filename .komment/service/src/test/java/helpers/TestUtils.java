{"name":"TestUtils.java","path":"service/src/test/java/helpers/TestUtils.java","content":{"structured":{"description":"Various helper classes for generating test data for a web application that manages real estate properties and their respective amenities, users, communities, houses, and payments. The code provides methods for generating test data for these entities, including users, communities, houses, and payments. It also provides utilities for generating unique identifiers and encrypting passwords. Additionally, it includes a MailProperties class for defining email settings and an EmailTemplateLocalization class for defining localization settings for email templates.","items":[{"id":"b0941e51-a399-0684-e346-26c542e12c06","ancestors":[],"type":"function","description":"provides various helpers for testing purposes in the context of an API for managing a community and its members, including:\n\n* Helpers for creating test data sets of users, houses, communities, and amenities\n* Methods for generating unique IDs and passwords\n* Amenity helpers for creating test amenities and linking them to a community\n* User helpers for creating test users and linking them to a community\n* Mail properties helper for creating test mail properties\n* Payment helpers for creating test payments with different fields filled or left empty.","name":"TestUtils","code":"public class TestUtils {\n\n  public static class General {\n\n    public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }\n\n    public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }\n  }\n\n  public static class CommunityHouseHelpers {\n\n    public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }\n\n    public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }\n  }\n\n  public static class HouseMemberHelpers {\n\n    public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n    public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }\n  }\n\n  public static class CommunityHelpers {\n\n    public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }\n\n    public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }\n\n    public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }\n  }\n\n  public static class AmenityHelpers {\n\n    public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }\n\n    public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n  }\n\n  public static class UserHelpers {\n\n    public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n  }\n\n  public static class MailPropertiesHelper {\n\n    public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }\n\n    public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }\n\n    public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }\n  }\n\n  public static class PaymentHelpers {\n\n    public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }\n    public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0,"comment":null},"item_type":"class","length":209},{"id":"d1a76eb7-097e-5bac-8340-6e219f67bb81","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"is a utility class that provides various functionality for image processing and unique identifier generation. The getImageAsByteArray method takes height and width parameters and returns the image as a byte array, while the generateUniqueId method generates a unique identifier using the UUID random generator.","name":"General","code":"public static class General {\n\n    public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }\n\n    public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2,"comment":null},"item_type":"class","length":14},{"id":"dd87df83-3b82-9dbd-a846-616cb1a4630b","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","d1a76eb7-097e-5bac-8340-6e219f67bb81"],"type":"function","description":"converts a `BufferedImage` object to a byte array, representing an image as a JPEG file.","params":[{"name":"height","type_name":"int","description":"vertical dimension of the image to be converted into a byte array.","complex_type":false},{"name":"width","type_name":"int","description":"horizontal resolution of the resulting byte array, which is the size of the output image.","complex_type":false}],"returns":{"type_name":"byte","description":"a byte array containing the image data in JPEG format.","complex_type":false},"name":"getImageAsByteArray","code":"public static byte[] getImageAsByteArray(int height, int width) throws IOException {\n      BufferedImage documentImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n      try (ByteArrayOutputStream imageBytesStream = new ByteArrayOutputStream()) {\n        ImageIO.write(documentImage, \"jpg\", imageBytesStream);\n        return imageBytesStream.toByteArray();\n      }\n    }","location":{"start":37,"insert":37,"offset":" ","indent":4,"comment":null},"item_type":"method","length":7},{"id":"875d74f8-1ccc-4e83-604f-9a3af9205893","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","d1a76eb7-097e-5bac-8340-6e219f67bb81"],"type":"function","description":"generates a unique identifier based on a randomly generated UUID string, returned as a String.","params":[],"returns":{"type_name":"String","description":"a unique, randomly generated string of characters.","complex_type":false},"name":"generateUniqueId","code":"public static String generateUniqueId() {\n      return UUID.randomUUID().toString();\n    }","location":{"start":45,"insert":45,"offset":" ","indent":4,"comment":null},"item_type":"method","length":3},{"id":"62a149ed-e1b7-e4a8-654c-902289f27bc2","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"provides utility methods for creating and manipulating CommunityHouses in a Spring Boot application. The class offers several methods for generating sets of CommunityHouses with different parameters, as well as methods for creating individual CommunityHouses with customized values.","name":"CommunityHouseHelpers","code":"public static class CommunityHouseHelpers {\n\n    public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }\n\n    public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }\n  }","location":{"start":50,"insert":50,"offset":" ","indent":2,"comment":null},"item_type":"class","length":24},{"id":"a0a6076a-bad6-5f87-a54a-aeb3008499f5","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","62a149ed-e1b7-e4a8-654c-902289f27bc2"],"type":"function","description":"generates a set of `CommunityHouse` objects using a Stream API, with each object having a unique ID and default name. The function limits the number of generated objects to the input `count`.","params":[{"name":"count","type_name":"int","description":"number of CommunityHouse instances to be generated and returned by the function.","complex_type":false}],"returns":{"type_name":"SetCommunityHouse","description":"a set of `CommunityHouse` objects generated randomly with unique IDs and default names.\n\n* The output is a `Set` of `CommunityHouse` objects.\n* Each element in the set represents a unique `CommunityHouse` instance with its own `houseId` and `name`.\n* The `houseId` for each element is generated uniquely using `generateUniqueId()`.\n* The `name` for each element is set to a default value of \"default-house-name\".\n* The total number of elements in the set is limited to the specified `count`.\n\nThe output of the function can be described as a collection of randomized `CommunityHouse` instances with unique identifiers and default names.","complex_type":true},"name":"getTestHouses","code":"public static Set<CommunityHouse> getTestHouses(int count) {\n      return Stream\n          .generate(() -> new CommunityHouse()\n              .withHouseId(generateUniqueId())\n              .withName(\"default-house-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":52,"insert":52,"offset":" ","indent":4,"comment":null},"item_type":"method","length":9},{"id":"d90e6dec-c8c3-d187-e644-d26f864645b4","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","62a149ed-e1b7-e4a8-654c-902289f27bc2"],"type":"function","description":"creates a new `CommunityHouse` instance with a unique ID and default name.","params":[],"returns":{"type_name":"CommunityHouse","description":"a new instance of the `CommunityHouse` class with a unique ID and a default community name.\n\nThe function returns a new instance of the `CommunityHouse` class with a unique `houseId`.\n\nThe `CommunityHouse` object has a `name` attribute set to a default value.","complex_type":true},"name":"getTestCommunityHouse","code":"public static CommunityHouse getTestCommunityHouse() {\n      return new CommunityHouse()\n          .withHouseId(generateUniqueId())\n          .withName(\"default-community-name\");\n    }","location":{"start":62,"insert":62,"offset":" ","indent":4,"comment":null},"item_type":"method","length":5},{"id":"e42121f0-7ec6-68a4-4d48-ec889c6b59f8","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","62a149ed-e1b7-e4a8-654c-902289f27bc2"],"type":"function","description":"creates a new instance of `CommunityHouse` with a specified `houseId` and default `name`.","params":[{"name":"houseId","type_name":"String","description":"ID of the community house to be created or retrieved.","complex_type":false}],"returns":{"type_name":"CommunityHouse","description":"a new `CommunityHouse` object with an assigned `houseId` and a default `name`.\n\n* The function returns a new instance of `CommunityHouse`.\n* The `withHouseId` method is called on the newly created instance, passing in the `houseId` parameter.\n* The `withName` method is called on the instance, passing in the default community name.","complex_type":true},"name":"getTestCommunityHouse","code":"public static CommunityHouse getTestCommunityHouse(String houseId) {\n      return new CommunityHouse()\n          .withHouseId(houseId)\n          .withName(\"default-community-name\");\n    }","location":{"start":68,"insert":68,"offset":" ","indent":4,"comment":null},"item_type":"method","length":5},{"id":"34a96a22-1a97-d68a-5644-d65e8e4b1d10","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"provides utility methods for working with house members in a housing platform. These methods include generating sets of test house members and creating new individual house members with randomized IDs, names, and other properties.","name":"HouseMemberHelpers","code":"public static class HouseMemberHelpers {\n\n    public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n    public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":null},"item_type":"class","length":17},{"id":"deb57720-53c4-b9a2-e347-3b97fea19b6c","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","34a96a22-1a97-d68a-5644-d65e8e4b1d10"],"type":"function","description":"generates `count` instances of a custom `HouseMember` class, each with a unique identifier and a default name, and returns them as a set.","params":[{"name":"count","type_name":"int","description":"number of house members to be generated, and it determines the size of the set returned by the `getTestHouseMembers()` method.","complex_type":false}],"returns":{"type_name":"Set","description":"a set of `HouseMember` objects generated randomly.\n\n1. The output is a `Set` of `HouseMember` objects.\n2. Each `HouseMember` object has a unique `memberId`.\n3. Each `HouseMember` object has a default name of \"default-house-member-name\".\n4. The total number of `HouseMember` objects in the set is determined by the input parameter `count`.","complex_type":true},"name":"getTestHouseMembers","code":"public static Set<HouseMember> getTestHouseMembers(int count) {\n      return Stream\n          .generate(() -> new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":77,"insert":77,"offset":" ","indent":4,"comment":null},"item_type":"method","length":9},{"id":"57c9a290-1bf1-c9a6-d14a-741f8d06da7c","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","34a96a22-1a97-d68a-5644-d65e8e4b1d10"],"type":"function","description":"generates a new instance of `HouseMember` with a unique ID and a default name.","params":[],"returns":{"type_name":"HouseMember","description":"a new instance of the `HouseMember` class with a randomly generated ID and a predetermined name.\n\nThe `HouseMember` object is created with a unique `memberId` generated by the function itself.\nThe `name` attribute of the `HouseMember` object is set to a default value, \"default-house-member-name\".\nBoth these properties are essential for the proper functioning of the code and cannot be changed or altered in any way.","complex_type":true},"name":"getTestHouseMember","code":"public static HouseMember getTestHouseMember() {\n      return new HouseMember()\n              .withMemberId(generateUniqueId())\n              .withName(\"default-house-member-name\");\n    }","location":{"start":86,"insert":86,"offset":" ","indent":4,"comment":null},"item_type":"method","length":5},{"id":"8f6b36ea-c26a-7fa0-7b4a-ee813cc5a5de","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"provides various utility methods for creating and manipulating communities in the application. These methods include generating test communities, creating new communities with admins and houses, and getting test communities of various counts. The class also provides methods for creating amenities, users, and payments.","name":"CommunityHelpers","code":"public static class CommunityHelpers {\n\n    public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n    public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }\n\n    public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }\n\n    public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2,"comment":null},"item_type":"class","length":48},{"id":"f20ddbd1-8770-ebb8-9a4a-9ceeafa085e2","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","8f6b36ea-c26a-7fa0-7b4a-ee813cc5a5de"],"type":"function","description":"iteratively creates `Community` objects based on a unique id, name, and district, and limits the number of generated communities to the provided count.","params":[{"name":"count","type_name":"int","description":"maximum number of community objects to return in the Set.","complex_type":false}],"returns":{"type_name":"SetCommunity","description":"a set of `Community` objects, each with a unique ID and name generated using a prefix based on the index.\n\nThe return value is a `Set` of `Community` objects, containing `n` communities where `n` is the input parameter `count`. Each community object represents a unique community instance with a randomly generated ID, name, and district. The `Stream.iterate` method is used to generate the community instances in a sequence, starting from 0 and incrementing by 1 for each iteration. The `map` method is used to apply a transformation to each community instance, which involves calling the `getTestCommunity` function with a unique ID, name, and district for each instance. Finally, the `limit` method is used to limit the number of community instances returned to `count`.","complex_type":true},"name":"getTestCommunities","code":"public static Set<Community> getTestCommunities(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> getTestCommunity(\n              generateUniqueId(),\n              \"default-community-name\" + index,\n              \"default-community-district\" + index,\n              0, 0)\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":95,"insert":95,"offset":" ","indent":4,"comment":null},"item_type":"method","length":11},{"id":"0898a8a4-7e55-cfad-7f47-c2f99c1f84e5","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","8f6b36ea-c26a-7fa0-7b4a-ee813cc5a5de"],"type":"function","description":"generates a test community with a unique ID, name, and district, and returns it as an object of type `Community`.","params":[],"returns":{"type_name":"Community","description":"a ` Community` object representing a test community with a unique ID, name, district, and population of 0.\n\n* The function returns a `Community` object, which represents a community in the system.\n* The `generateUniqueId()` method is called to generate an unique ID for the community.\n* The `default-community-name`, `default-community-district`, and `0`, `0` parameters are used to set default values for various attributes of the community.","complex_type":true},"name":"getTestCommunity","code":"public static Community getTestCommunity() {\n      return getTestCommunity(\n          generateUniqueId(),\n          \"default-community-name\",\n          \"default-community-district\",\n          0, 0);\n    }","location":{"start":107,"insert":107,"offset":" ","indent":4,"comment":null},"item_type":"method","length":7},{"id":"4ee024ed-7a24-02a8-7848-576be46b1de3","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","8f6b36ea-c26a-7fa0-7b4a-ee813cc5a5de"],"type":"function","description":"retrieves and returns a pre-created community object, adds it to the administrator's communities list, sets the administrator as the sole admin of the community, and returns the community.","params":[{"name":"admin","type_name":"User","description":"User who is adding the test community to their list of managed communities.\n\n* `User`: A class that represents a user in the community. It has properties such as `id`, `username`, `email`, and `role`.\n* `admin`: A property of the `User` class that indicates whether the user is an administrator or not.","complex_type":true}],"returns":{"type_name":"Community","description":"a new `Community` object with the specified admin user added as an administrator.\n\n* The Community object, `testCommunity`, is created by calling the `getTestCommunity()` method.\n* The `admin` parameter's `getCommunities()` method adds the `testCommunity` to its list of communities.\n* The `setAdmins()` method sets the `testCommunity` as the sole admin for the community, using the `Collections.singleton()` method to provide a single instance of the `Admin` class.\n\nNo summary is provided at the end of this response.","complex_type":true},"name":"getTestCommunity","code":"public static Community getTestCommunity(User admin) {\n      Community testCommunity = getTestCommunity();\n      admin.getCommunities().add(testCommunity);\n      testCommunity.setAdmins(Collections.singleton(admin));\n      return testCommunity;\n    }","location":{"start":115,"insert":115,"offset":" ","indent":4,"comment":null},"item_type":"method","length":6},{"id":"e6097a47-05ea-1e87-934c-14193a35d8fd","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","8f6b36ea-c26a-7fa0-7b4a-ee813cc5a5de"],"type":"function","description":"creates a new community with given name, ID and district, and then links it to a set of houses and administrators.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community being created, which is used to assign the correct name and district to the new community.","complex_type":false},{"name":"communityName","type_name":"String","description":"name of the community being created or retrieved, which is used to set the name of the new `Community` object returned by the function.","complex_type":false},{"name":"communityDistrict","type_name":"String","description":"district of the community being created, which is used to set the `communityDistrict` field of the generated `Community` object.","complex_type":false},{"name":"adminsCount","type_name":"int","description":"number of administrators to be associated with the community generated by the function, and it is used to set the `Admins` field of the generated `Community` object.","complex_type":false},{"name":"housesCount","type_name":"int","description":"number of houses to generate for the created community, and it is used to populate the `communityHouses` set with the generated houses.","complex_type":false}],"returns":{"type_name":"instance","description":"a new `Community` object representing a test community with houses and admins.\n\n* `Community testCommunity`: This is an instance of the `Community` class, which represents a fictional community with various attributes and memberships.\n* `HashSet<>`: The two `HashSet` instances represent the sets of houses and users that belong to the community.\n* `communityName`: The name of the community, which is provided as an input parameter.\n* `communityId`: The ID of the community, which is also provided as an input parameter.\n* `communityDistrict`: The district where the community is located, which is also provided as an input parameter.\n* `adminsCount`: The number of administrators for the community, which is provided as an input parameter.\n* `housesCount`: The number of houses in the community, which is provided as an input parameter.\n* `Set<CommunityHouse> communityHouses`: A set of `CommunityHouse` instances that represent the houses in the community. Each house is associated with the community through its membership in the `communityHouses` set.\n* `Set<User> communityAdmins`: A set of `User` instances that represent the administrators of the community. Each administrator is associated with the community through its membership in the `communityAdmins` set.\n\nThe function creates these objects and sets their properties based on the input parameters provided. The resulting `Community` instance represents a fictional community with houses and users, as well as the relationships between them.","complex_type":true},"name":"getTestCommunity","code":"public static Community getTestCommunity(String communityId, String communityName, String communityDistrict, int adminsCount, int housesCount) {\n      Community testCommunity = new Community(\n          new HashSet<>(),\n          new HashSet<>(),\n          communityName,\n          communityId,\n          communityDistrict,\n          new HashSet<>()\n      );\n      Set<CommunityHouse> communityHouses = getTestHouses(housesCount);\n      communityHouses.forEach(house -> house.setCommunity(testCommunity));\n      Set<User> communityAdmins = getTestUsers(adminsCount);\n      communityAdmins.forEach(user -> user.getCommunities().add(testCommunity));\n\n      testCommunity.setHouses(communityHouses);\n      testCommunity.setAdmins(communityAdmins);\n      return testCommunity;\n    }","location":{"start":122,"insert":122,"offset":" ","indent":4,"comment":null},"item_type":"method","length":18},{"id":"21909cd2-28ae-88af-f044-7a004a0468de","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"provides utility methods for creating and manipulating amenities in a housing platform. The class offers two main methods: `getTestAmenity()` for creating a single amenity instance, and `getTestAmenities()` for generating a set of amenities. These methods are used to create and populate the amenities database.","name":"AmenityHelpers","code":"public static class AmenityHelpers {\n\n    public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }\n\n    public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n\n  }","location":{"start":142,"insert":142,"offset":" ","indent":2,"comment":null},"item_type":"class","length":21},{"id":"361a7bcb-dff4-3382-db49-5a0cc40927fe","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","21909cd2-28ae-88af-f044-7a004a0468de"],"type":"function","description":"creates a new `Amenity` object with specified `amenityId` and `amenityDescription`, and also assigns it to a community object retrieved from a helper class.","params":[{"name":"amenityId","type_name":"String","description":"identifier of the amenity being created, which is used to uniquely identify the amenity within the given community.","complex_type":false},{"name":"amenityDescription","type_name":"String","description":"description of the amenity being created.","complex_type":false}],"returns":{"type_name":"Amenity","description":"a new instance of the `Amenity` class with specified `amenityId`, `amenityDescription`, and `community`.\n\n* `withAmenityId`: A string representing the unique identifier for the amenity.\n* `withDescription`: A string describing the amenity.\n* `withCommunity`: A reference to a test community object that the amenity belongs to.","complex_type":true},"name":"getTestAmenity","code":"public static Amenity getTestAmenity(String amenityId, String amenityDescription) {\n      return new Amenity()\n          .withAmenityId(amenityId)\n          .withDescription(amenityDescription)\n          .withCommunity(CommunityHelpers.getTestCommunity());\n    }","location":{"start":144,"insert":144,"offset":" ","indent":4,"comment":null},"item_type":"method","length":6},{"id":"d6a7ec8c-e930-dfbf-e548-7c440760cb2a","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","21909cd2-28ae-88af-f044-7a004a0468de"],"type":"function","description":"generates a set of `Amenity` objects with unique IDs, names, and descriptions, limited to a specified count using a streaming API.","params":[{"name":"count","type_name":"int","description":"number of amenities to be generated and returned by the `getTestAmenities()` method.","complex_type":false}],"returns":{"type_name":"Set","description":"a set of `Amenity` objects generated randomly with unique IDs, names, and descriptions.\n\n* The output is a `Set` of `Amenity` objects, indicating that each call to the function will return a unique set of amenities.\n* The `Stream` used in the function generates a new `Amenity` object for each iteration, using a combination of an `identity()` function and a `limit()` operation to specify the number of amenities to generate.\n* Each generated `Amenity` object is assigned a unique `amenityId`, `name`, and `description`, which are generated using random values.","complex_type":true},"name":"getTestAmenities","code":"public static Set<Amenity> getTestAmenities(int count) {\n      return Stream\n          .generate(() -> new Amenity()\n              .withAmenityId(generateUniqueId())\n              .withName(\"default-amenity-name\")\n              .withDescription(\"default-amenity-description\")\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":151,"insert":151,"offset":" ","indent":4,"comment":null},"item_type":"method","length":10},{"id":"71f4feea-52da-67a8-e842-c570aa2432a1","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"is a utility class that provides various methods to generate and manipulate test data for users in a system. The class provides methods to generate sets of users with customizable fields such as names, emails, passwords, and admin status. Additionally, the class offers methods to create test users with specific properties.","name":"UserHelpers","code":"public static class UserHelpers {\n\n    public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }\n  }","location":{"start":164,"insert":164,"offset":" ","indent":2,"comment":null},"item_type":"class","length":17},{"id":"8989099b-a59b-629a-8246-669eea7dae85","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","71f4feea-52da-67a8-e842-c570aa2432a1"],"type":"function","description":"iterates over a range of numbers, generates new user objects using a template, and collects the results in a set with a maximum size of `count`.","params":[{"name":"count","type_name":"int","description":"number of test users to be generated by the `getTestUsers` function.","complex_type":false}],"returns":{"type_name":"SetUser","description":"a set of `User` objects, each with unique properties, generated within a limited range based on an incrementing index.\n\n* The output is a `Set` of `User` objects.\n* Each `User` object represents an individual test user.\n* The `User` objects are generated using a recursive approach, where each new user is created by modifying the previous one.\n* The `User` objects have various attributes, including a unique name, email address, and password.\n* The `User` objects also have a `HashSet` of other users that they belong to (i.e., their \"followers\").\n* The `getTestUsers` function returns at most `count` `User` objects.","complex_type":true},"name":"getTestUsers","code":"public static Set<User> getTestUsers(int count) {\n      return Stream.iterate(0, n -> n + 1)\n          .map(index -> new User(\n              \"default-user-name\" + index,\n              generateUniqueId(),\n              \"default-user-email\" + index,\n              false,\n              \"default-user-password\" + index,\n              new HashSet<>(),\n              new HashSet<>())\n          )\n          .limit(count)\n          .collect(Collectors.toSet());\n    }","location":{"start":166,"insert":166,"offset":" ","indent":4,"comment":null},"item_type":"method","length":14},{"id":"6ec474cc-7fb7-2a93-cf4e-dfa79acf6910","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"is a utility class that provides helpers for creating and manipulating email properties, including host, username, password, port, protocol, debug, and dev mode. Additionally, it provides methods for creating email template properties and localization properties. Overall, the class offers useful functionality for working with email settings in a Java application.","name":"MailPropertiesHelper","code":"public static class MailPropertiesHelper {\n\n    public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }\n\n    public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }\n\n    public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }\n  }","location":{"start":182,"insert":182,"offset":" ","indent":2,"comment":null},"item_type":"class","length":31},{"id":"29a1f1c7-4bc1-2684-0740-79d67da07729","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","6ec474cc-7fb7-2a93-cf4e-dfa79acf6910"],"type":"function","description":"creates a new `MailProperties` instance with various properties set to test values, including host, username, password, port, protocol, debug, and dev mode.","params":[],"returns":{"type_name":"MailProperties","description":"a `MailProperties` object with predefined properties for testing purposes.\n\n* `host`: The hostname or IP address of the mail server.\n* `username`: The username to use when connecting to the mail server.\n* `password`: The password for the specified username.\n* `port`: The port number used to connect to the mail server (zero means default).\n* `protocol`: The protocol used to connect to the mail server (e.g., \"smtp\").\n* `debug`: A boolean indicating whether debugging mode is enabled.\n* `devMode`: A boolean indicating whether the mail server is in development mode.","complex_type":true},"name":"getTestMailProperties","code":"public static MailProperties getTestMailProperties() {\n      MailProperties testMailProperties = new MailProperties();\n      testMailProperties.setHost(\"test host\");\n      testMailProperties.setUsername(\"test username\");\n      testMailProperties.setPassword(\"test password\");\n      testMailProperties.setPort(0);\n      testMailProperties.setProtocol(\"test protocol\");\n      testMailProperties.setDebug(false);\n      testMailProperties.setDevMode(false);\n      return testMailProperties;\n    }","location":{"start":184,"insert":184,"offset":" ","indent":4,"comment":null},"item_type":"method","length":11},{"id":"7f15fcc1-52d1-bcaf-2541-778789b75388","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","6ec474cc-7fb7-2a93-cf4e-dfa79acf6910"],"type":"function","description":"creates a new `EmailTemplateProperties` object with customizable properties for testing purposes.","params":[],"returns":{"type_name":"EmailTemplateProperties","description":"an EmailTemplateProperties object with customized properties.\n\n* Path: The path to the email template file.\n* Encoding: The encoding used for the email template.\n* Mode: The mode in which the email template is used.\n* Cache: A Boolean value indicating whether the email template should be cached or not.","complex_type":true},"name":"getTestMailTemplateProperties","code":"public static EmailTemplateProperties getTestMailTemplateProperties() {\n      EmailTemplateProperties testMailTemplate = new EmailTemplateProperties();\n      testMailTemplate.setPath(\"test path\");\n      testMailTemplate.setEncoding(\"test encoding\");\n      testMailTemplate.setMode(\"test mode\");\n      testMailTemplate.setCache(false);\n      return testMailTemplate;\n    }","location":{"start":196,"insert":196,"offset":" ","indent":4,"comment":null},"item_type":"method","length":8},{"id":"e10fd6b5-7e84-31bd-8342-99181d2ca7d2","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","6ec474cc-7fb7-2a93-cf4e-dfa79acf6910"],"type":"function","description":"creates a new `EmailTemplateLocalizationProperties` object with customized properties for testing purposes, including a path, encoding, and cache seconds.","params":[],"returns":{"type_name":"EmailTemplateLocalizationProperties","description":"an instance of `EmailTemplateLocalizationProperties` with customized properties for testing purposes.\n\n* The `path` attribute is set to \"test path\".\n* The `encoding` attribute is set to \"test encoding\".\n* The `cacheSeconds` attribute is set to 0.","complex_type":true},"name":"getTestLocalizationMailProperties","code":"public static EmailTemplateLocalizationProperties getTestLocalizationMailProperties() {\n      EmailTemplateLocalizationProperties testTemplatesLocalization = new EmailTemplateLocalizationProperties();\n      testTemplatesLocalization.setPath(\"test path\");\n      testTemplatesLocalization.setEncoding(\"test encodig\");\n      testTemplatesLocalization.setCacheSeconds(0);\n      return testTemplatesLocalization;\n    }","location":{"start":205,"insert":205,"offset":" ","indent":4,"comment":null},"item_type":"method","length":7},{"id":"a061903e-8716-ae9b-ba44-c3ea2bd48b46","ancestors":["b0941e51-a399-0684-e346-26c542e12c06"],"type":"function","description":"provides utility methods for working with payments in an application. The class includes methods for creating test payment data and handling null fields. Additionally, the class provides a method for creating a payment instance with default values.","name":"PaymentHelpers","code":"public static class PaymentHelpers {\n\n    public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }\n    public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }\n  }","location":{"start":214,"insert":214,"offset":" ","indent":2,"comment":null},"item_type":"class","length":27},{"id":"058c42eb-aaa8-25a6-f54a-5c0d68a2e77b","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","a061903e-8716-ae9b-ba44-c3ea2bd48b46"],"type":"function","description":"builds a `PaymentDto` object with various parameters such as charge amount, payment type, description, recurring status, due date, and user and member information.","params":[{"name":"charge","type_name":"BigDecimal","description":"amount of money to be charged or deducted from the user's account when creating a new payment.\n\nThe BigDecimal object `charge` represents the amount to be charged or paid, with a precision of up to 10 decimal places.","complex_type":true},{"name":"type","type_name":"String","description":"payment type of the Dto, which can be either `RECURRING`, `ONCE`, or `OTHER`.","complex_type":false},{"name":"description","type_name":"String","description":"description of the payment in the PaymentDto object that is being built.","complex_type":false},{"name":"recurring","type_name":"boolean","description":"whether the payment is recurring or not.","complex_type":false},{"name":"dueDate","type_name":"LocalDate","description":"date when the payment is due, which is converted to a string and included in the PaymentDto object.\n\n* `toString()` method is used to convert the `LocalDate` object into a string representation, which can be used in further processing or serialization.","complex_type":true},{"name":"admin","type_name":"UserDto","description":"user who made the payment.\n\n* `admin`: A `UserDto` object representing the administrator who created or updated the payment. It contains attributes such as `id`, `username`, `email`, and `role`.","complex_type":true},{"name":"member","type_name":"HouseMemberDto","description":"HouseMemberDto object containing information about the member whose payment is being processed.\n\n* `admin`: The `UserDto` object represents the administrator who made the payment. It contains information such as username, email address, and any other relevant details.\n* `member`: The `HouseMemberDto` object represents the member for whom the payment is being made. It contains information such as name, address, and any other relevant details related to membership in a household.","complex_type":true}],"returns":{"type_name":"PaymentDto","description":"a `PaymentDto` object containing various attributes related to a payment.\n\n* charge: A BigDecimal object representing the amount to be charged.\n* type: A string representing the type of payment (e.g., \"invoice\", \"payment\").\n* description: A string providing a brief description of the payment.\n* recurring: A boolean indicating whether the payment is recurring or not.\n* dueDate: A LocalDate object representing the date when the payment is due.\n* admin: A UserDto object representing the administrator who created/modified the payment.\n* member: A HouseMemberDto object representing the member for whom the payment is made.","complex_type":true},"name":"getTestPaymentDto","code":"public static PaymentDto getTestPaymentDto(BigDecimal charge, String type, String description, boolean recurring, LocalDate dueDate, UserDto admin, HouseMemberDto member) {\n\n      return PaymentDto.builder()\n          .charge(charge)\n          .type(type)\n          .description(description)\n          .recurring(recurring)\n          .dueDate(dueDate.toString())\n          .admin(admin)\n          .member(member)\n          .build();\n    }","location":{"start":216,"insert":216,"offset":" ","indent":4,"comment":null},"item_type":"method","length":12},{"id":"8b9175bc-9950-d0b6-ac4a-0c85bc6fdf9b","ancestors":["b0941e51-a399-0684-e346-26c542e12c06","a061903e-8716-ae9b-ba44-c3ea2bd48b46"],"type":"function","description":"generates a payment object with all fields null except for the 'recurring' field which is false.","params":[],"returns":{"type_name":"Payment","description":"a Payment object with all fields null except for the recurring field, which is false.\n\n* `payment`: The Payment object itself is null.\n* `amount`: The amount field is null.\n* `currency`: The currency field is null.\n* `description`: The description field is null.\n* `recurring`: The recurring field is false, indicating that the payment is not a recurring payment.\n* `paymentDate`: The payment date field is null.\n* `nextPaymentDate`: The next payment date field is null.\n* `paymentMethod`: The payment method field is null.","complex_type":true},"name":"getTestPaymentNullFields","code":"public static Payment getTestPaymentNullFields() {\n      //Only 'recurring' field will be not null, but false\n      return new Payment(\n          null,\n          null,\n          null,\n          null,\n          false,\n          null,\n          null,\n          null);\n    }","location":{"start":228,"insert":228,"offset":" ","indent":4,"comment":null},"item_type":"method","length":12}]}}}