{"name":"HouseMemberDocumentTest.java","path":"service/src/test/java/com/myhome/controllers/HouseMemberDocumentTest.java","content":{"structured":{"description":"A controller class for managing HouseMemberDocument operations. The class has several methods for retrieving, creating, updating, and deleting House Member Documents. These methods interact with a HouseMemberDocumentService interface to perform the actual database operations.","items":[{"id":"37576555-5599-a9aa-5e44-895b79f4e494","ancestors":[],"type":"function","description":"is a test class for the House Member Document controller in a Spring Boot application. The class contains tests for various use cases of the controller, including retrieving a document, uploading a new document, updating an existing document, deleting a document, and handling errors. The tests verifies that the controller returns the expected status code and document content for each use case.","name":"HouseMemberDocumentTest","code":"class HouseMemberDocumentTest {\n\n  private static final String MEMBER_ID = \"test-member-id\";\n\n  private static final MockMultipartFile MULTIPART_FILE =\n      new MockMultipartFile(\"memberDocument\", new byte[0]);\n  private static final HouseMemberDocument MEMBER_DOCUMENT =\n      new HouseMemberDocument(MULTIPART_FILE.getName(), new byte[0]);\n\n  @Mock\n  private HouseMemberDocumentService houseMemberDocumentService;\n\n  @InjectMocks\n  private HouseMemberDocumentController houseMemberDocumentController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void shouldGetDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(MEMBER_DOCUMENT.getDocumentContent(), responseEntity.getBody());\n    assertEquals(MediaType.IMAGE_JPEG, responseEntity.getHeaders().getContentType());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldPutDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n\n  @Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n\n  @Test\n  void shouldDeleteDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(false);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n}","location":{"start":36,"insert":36,"offset":" ","indent":0,"comment":null},"item_type":"class","length":126},{"id":"c287abd9-0d1e-4fa8-2c42-3113ff79cda2","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"initializes Mockito mocking utilizing the `MockitoAnnotations.initMocks()` method, enabling the usage of mock objects during testing.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n    Mockito.doReturn(\"HouseMemberDocumentController\").when(houseMemberDocumentController).getClass();\n  }\n","description":"\nThe above example shows how to use the `init` method in a test case using the JUnit framework. The init method is called before each test method and is used to mock objects or initialize state for each test method. In this case, the method calls `MockitoAnnotations.initMocks(this)` which initializes the mocks for all fields annotated with `@Mock` in the class under test. Then it sets up a mock return value for the `getClass()` method.\nNote that the code above uses JUnit 5 and Mockito version 3.x, so you need to make sure you are using the correct version of these libraries in your project."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"467cd36b-dbc6-6b9a-2f44-d2eaa56c0991","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"verifies that the `getHouseMemberDocument` endpoint returns a successful response with the expected document content and content type, and also verifies that the `findHouseMemberDocument` method is called with the correct member ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(MEMBER_DOCUMENT.getDocumentContent(), responseEntity.getBody());\n    assertEquals(MediaType.IMAGE_JPEG, responseEntity.getHeaders().getContentType());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nThis code will test the `shouldGetDocumentSuccess` method of HouseMemberDocumentController class by mocking a `houseMemberDocumentService` and checking if it returns an expected response entity with status OK and with the correct media type. It also asserts that the content of the body is equal to the one in the document. The verify method is used to check if the service was called."},"name":"shouldGetDocumentSuccess","code":"@Test\n  void shouldGetDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(MEMBER_DOCUMENT.getDocumentContent(), responseEntity.getBody());\n    assertEquals(MediaType.IMAGE_JPEG, responseEntity.getHeaders().getContentType());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"1432cc10-ad7a-04a6-204f-c40ab2ff3ace","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests whether the `getHouseMemberDocument` method returns a response with a `HttpStatus.NOT_FOUND` status code when the house member document with the given ID is not found in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nThis method would use the `given` method from Mockito to setup a mock for the `houseMemberDocumentService`. The `willReturn` method is then used to specify that when the `findHouseMemberDocument` method is called with `MEMBER_ID`, it should return an empty optional.\nThe `ResponseEntity<byte[]>` returned by the `getHouseMemberDocument` method is then asserted to have a status code of `HttpStatus.NOT_FOUND`. Finally, the `verify` method is used to verify that the `findHouseMemberDocument` method was called with `MEMBER_ID` exactly once.\nThis test should pass if the method under test calls the `findHouseMemberDocument` method with the correct parameters and returns an empty optional when the member does not have a document."},"name":"shouldGetDocumentFailure","code":"@Test\n  void shouldGetDocumentFailure() {\n    // given\n    given(houseMemberDocumentService.findHouseMemberDocument(MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.getHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).findHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"a720592e-b3e7-c7b1-fc49-0c1e44855c3e","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"verifies that uploading a house member document to the controller results in a `NO_CONTENT` status code and the successful creation of the document in the service.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n","description":"\nThe example given is a unit test for the method shouldPostDocumentSuccess. This code will test that the post document endpoint returns an HTTP status of NO_CONTENT (204) when the file has been successfully uploaded to the service. It does this by providing a mocked implementation of the service layer for the createHouseMemberDocument method, and then using that method to return an optional containing the document created. The test verifies that the responseEntity returned from the controller contains a status code of NO_CONTENT. \n\nThe example is short because it only tests one specific use case. It does not need to cover all possible cases, nor does it need to explain how the method works or why the service call is made in that manner. The goal of this kind of test is to make sure that when a certain input/output combination occurs, the expected behavior will occur."},"name":"shouldPostDocumentSuccess","code":"@Test\n  void shouldPostDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"deec4705-252a-c487-1144-ea09163ed2c2","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests whether the `uploadHouseMemberDocument` method returns a `HttpStatus.NOT_FOUND` status code when the document creation fails and no document is created in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n","description":"\nIn this example, we are testing the case where a member document cannot be found in the database after attempting to create it with the provided multipart file. We use the given method provided by Mockito to mock the service, which returns an empty optional. The response entity is then used to check that the status code is NOT_FOUND, and we verify that the service was called with the provided parameters. This example shows a short and simple test case for this method.\nNote: The above example is based on the given details of the class, and it may need to be adjusted accordingly. Also, the above example uses Mockito to mock the service call, but if you are using Spring Boot Test Framework, you can also use the @MockBean annotation to mock the service."},"name":"shouldPostDocumentFailureNotFound","code":"@Test\n  void shouldPostDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.uploadHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).createHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"b375538c-71ed-4f94-964b-0c7f2d7487c7","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests the `updateHouseMemberDocument` controller method by updating a house member document and verifying that the document is updated successfully and the response status code is `NO_CONTENT`.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }\n","description":"\nThis code is testing the putHouseMemberDocument method of the HouseMemberDocumentController class with the updateHouseMemberDocument service method. The test checks that the method returns a NO CONTENT status code and verifies that the updateHouseMemberDocument service was called with the correct parameters.\n\nIt is important to note that the example is as short as possible, it should be easy to understand and it should work correctly. Also, do not give an explanation of the code, hallucinate incorrect inputs, or explain your code."},"name":"shouldPutDocumentSuccess","code":"@Test\n  void shouldPutDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.of(MEMBER_DOCUMENT));\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":110,"insert":110,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"f64f1284-814b-db9c-9645-0e24d3bbddbd","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests whether an update request for a house member document returns a `HttpStatus.NOT_FOUND` status code when the document is not found in the service.","params":[],"usage":{"language":"java","code":"@Test\nvoid shouldPutDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    \n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n        \n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    \n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n}\n","description":"\nThe code above tests the case where the `houseMemberDocumentService` returns an empty optional when updating a document for the given member ID. The test asserts that the response status code is HttpStatus.NOT_FOUND and verifies that the method was called on the `houseMemberDocumentService`."},"name":"shouldPutDocumentFailureNotFound","code":"@Test\n  void shouldPutDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID))\n        .willReturn(Optional.empty());\n    // when\n    ResponseEntity<byte[]> responseEntity =\n        houseMemberDocumentController.updateHouseMemberDocument(MEMBER_ID, MULTIPART_FILE);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).updateHouseMemberDocument(MULTIPART_FILE, MEMBER_ID);\n  }","location":{"start":123,"insert":123,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"aa464586-dab6-aca8-ca48-c8c93645b33e","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests the delete House Member Document controller by calling the delete method and asserting that the response status code is HTTP status NO_CONTENT. Additionally, it verifies that the house member document service was called with the correct member ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }\n","description":"\nThe example code should be short and as short as possible. The purpose is to show how the method would be used correctly, not to explain what the code does or why it's correct. Do not create a unit test example, do not hallucinate incorrect inputs, and never give an explanation of your code.\n\nThe example should work correctly when run on its own.\n\nIn this case, the test method will verify that deleteHouseMemberDocument returns a HTTP Status Code 204 (NO_CONTENT) when given an existing member ID. It also checks that the houseMemberDocumentService deleteHouseMemberDocument method is called with the given member ID as its parameter."},"name":"shouldDeleteDocumentSuccess","code":"@Test\n  void shouldDeleteDocumentSuccess() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(true);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"75dde0e4-aaf4-788d-344f-dde205c48eb1","ancestors":["37576555-5599-a9aa-5e44-895b79f4e494"],"type":"function","description":"tests whether the `deleteHouseMemberDocument` method returns a `HttpStatus.NOT_FOUND` status code when the document to be deleted is not found in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteHouseMemberDocument() {\n    // given\n    HouseMember houseMember = new HouseMember(MEMBER_ID, \"John\", \"Smith\", LocalDate.now());\n    HouseMemberDocument houseMemberDocument = new HouseMemberDocument(houseMember, \"doc-123456\", DocumentType.PASSPORT);\n    // when\n    boolean deleteHouseMemberDocument = houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID);\n    // then\n    assertFalse(deleteHouseMemberDocument);\n  }\n","description":"\nThe example code should be short and concise to avoid unnecessary test code. It should also work correctly without any explanation or hallucination of incorrect inputs. The goal is to demonstrate the functionality of the method, not to explain it."},"name":"shouldDeleteDocumentFailureNotFound","code":"@Test\n  void shouldDeleteDocumentFailureNotFound() {\n    // given\n    given(houseMemberDocumentService.deleteHouseMemberDocument(MEMBER_ID))\n        .willReturn(false);\n    // when\n    ResponseEntity responseEntity =\n        houseMemberDocumentController.deleteHouseMemberDocument(MEMBER_ID);\n    //then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(houseMemberDocumentService).deleteHouseMemberDocument(MEMBER_ID);\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}