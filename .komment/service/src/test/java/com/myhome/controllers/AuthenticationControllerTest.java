{"name":"AuthenticationControllerTest.java","path":"service/src/test/java/com/myhome/controllers/AuthenticationControllerTest.java","content":{"structured":{"description":"An AuthenticationController class that tests a login functionality using Spring Boot and Mockito framework. The test class initializes the authentication service with mock objects and then performs a successful login attempt by passing a default login request to the authentication controller's `login` method, which returns a response entity containing the token and user ID. The test also verifies that the expected HTTP status code is returned and that the correct headers are present in the response entity.","items":[{"id":"57d86c40-15f2-fc9a-bf40-fe7ec3f41819","ancestors":[],"type":"function","description":"is a unit test for the AuthenticationController class, which is responsible for handling login requests. The test class sets up mock dependencies and verifies that the authentication controller returns the correct response when given a valid login request.","name":"AuthenticationControllerTest","code":"public class AuthenticationControllerTest {\n\n  private static final String TEST_ID = \"1\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n  private static final String TOKEN = \"token\";\n\n  @Mock\n  private AuthenticationService authenticationService;\n  @InjectMocks\n  private AuthenticationController authenticationController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }\n\n  private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0,"comment":null},"item_type":"class","length":46},{"id":"1497b0f7-b076-0187-dd47-e5db8270ff3e","ancestors":["57d86c40-15f2-fc9a-bf40-fe7ec3f41819"],"type":"function","description":"initializes Mockito mocking for the current class, enabling mocking of dependencies and behaviors.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n}\n","description":""},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":31,"insert":31,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"08cd9b07-f9ec-2dbd-dc40-e4275ba74834","ancestors":["57d86c40-15f2-fc9a-bf40-fe7ec3f41819"],"type":"function","description":"tests the authentication controller's `login` method by providing a valid login request and verifying the response status code, headers, and the call to the authentication service's `login` method.","params":[],"usage":{"language":"java","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n","description":""},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2,"comment":null},"item_type":"method","length":20},{"id":"34cba34e-b65d-7d9a-7c47-da92a3f9e512","ancestors":["57d86c40-15f2-fc9a-bf40-fe7ec3f41819"],"type":"function","description":"creates a new `LoginRequest` instance with email `TEST_EMAIL` and password `TEST_PASSWORD`.","params":[],"returns":{"type_name":"LoginRequest","description":"a `LoginRequest` object with predefined email and password values.\n\n* The function returns a new `LoginRequest` object.\n* The `email` property of the returned object is set to `TEST_EMAIL`.\n* The `password` property of the returned object is set to `TEST_PASSWORD`.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    public static void main(String[] args) {\n        LoginRequest request = new LoginRequest();\n        request.setEmail(\"email@mail.com\");\n        request.setPassword(\"password\");\n    }\n}\n","description":""},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"9c9b518c-9ddb-4085-4e49-93ede5b87064","ancestors":["57d86c40-15f2-fc9a-bf40-fe7ec3f41819"],"type":"function","description":"returns an instance of `AuthenticationData` with predefined values for `TOKEN` and `TEST_ID`.","params":[],"returns":{"type_name":"AuthenticationData","description":"an instance of `AuthenticationData` with `TOKEN` and `TEST_ID` properties.\n\n* `TOKEN`: A string representing the authentication token.\n* `TEST_ID`: An integer identifier for testing purposes.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    private AuthenticationController authenticationController;\n \n    public MyClass() {\n        authenticationController = new AuthenticationController(); // Inject the AuthenticationController in constructor injection or setter\n    }\n     \n    public void myMethod() {\n        // Create a LoginRequest object with email and password\n        LoginRequest loginRequest = new LoginRequest().email(\"user@example.com\").password(\"12345678\");\n        \n        // Call the getDefaultAuthenticationData method to get AuthenticationData \n        AuthenticationData authenticationData = authenticationController.getDefaultAuthenticationData(loginRequest);\n         \n        // Use the authentication data in other parts of the code\n    }\n}\n","description":""},"name":"getDefaultAuthenticationData","code":"private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3}]}}}