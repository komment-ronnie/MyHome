{"name":"UserControllerTest.java","path":"service/src/test/java/com/myhome/controllers/UserControllerTest.java","content":{"structured":{"description":"A test class for a user controller in a web application. The test class exercises various endpoints related to users, including creating, reading, updating, and deleting users. It also tests the controller's handling of forgotten passwords and list all housemates actions. The code verifies the responses from the underlying services and mappers, ensuring that they are properly called and return the expected data.","items":[{"id":"5010dbfb-8c85-7c87-b446-dd223f2d8ac2","ancestors":[],"type":"function","description":"is a unit test class for the UserController class, which handles user-related operations in a web application. The test class verifies the behavior of the controller by providing test cases that cover various scenarios, such as forgotten password resets, listing all housemates for a given user ID, and resetting a user's password.\n\nThe test class uses mocking to isolate the dependencies of the controller and verify their behavior. It also provides assertions to ensure that the expected behavior is correctly implemented in the controller.","name":"UserControllerTest","code":"class UserControllerTest {\n\n  private static final String TEST_ID = \"1\";\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n  private static final String TEST_NEW_PASSWORD = \"new-password\";\n  private static final String TEST_TOKEN = \"test-token\";\n\n\n  @Mock\n  private UserService userService;\n\n  @Mock\n  private UserApiMapper userApiMapper;\n\n  @Mock\n  private HouseService houseService;\n\n  @Mock\n  private HouseMemberMapper houseMemberMapper;\n\n  @InjectMocks\n  private UserController userController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }\n\n  @Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }\n\n  @Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }\n\n  @Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }\n\n  @Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(false);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n\n  private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }\n\n  void shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }\n\n  @Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n        new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n        new com.myhome.model.HouseMember()\n            .memberId(TEST_ID)\n            .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n        new HashSet<>(houseMemberList)))\n        .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n        .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }\n}","location":{"start":55,"insert":55,"offset":" ","indent":0,"comment":null},"item_type":"class","length":277},{"id":"2a52d7a1-ffeb-e2a8-4e42-76624eed3462","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"initializes Mockito annotations for the current object, allowing for mocking of dependencies during testing.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nThe example provided is a short and concise way to initialize the mock annotation in a test class. The MockitoAnnotations.initMocks method is used to initialize any annotated fields with mock objects, which can then be used for verification or stubbing in tests. This method should typically be called once by the test class itself, as shown above.\n\nThe init() method is a good place to put any initialization code that needs to happen before each unit test runs. In this case, it initializes the mock annotation, which is necessary for using Mockito. The method can be empty if there are no other steps required for initialization."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"62dbd5f6-b986-b487-454b-50e2b100e1a4","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the sign-up functionality of the `UserController`. It provides a test case for the createUser method, which takes a `CreateUserRequest` object as input and returns a `CreateUserResponse` object.","params":[],"usage":{"language":"java","code":"@Test\nvoid shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    UserDto userDto = new UserDto()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    CreateUserResponse response = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n\n    given(userService.createUser(userDto)))\n        .willReturn(Optional.of(userDto));\n\n    given(userApiMapper.userDtoToCreateUserResponse(userDto)))\n        .willReturn(response);\n\n    // when\n    ResponseEntity<CreateUserResponse> response = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, response.getStatusCode());\n    assertEquals(response, response.getBody());\n\n    verify(userApiMapper).createUserRequestToUserDto(request));\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n}\n","description":"\nThe example code should be short as possible, and it should be correct. Therefore the userApiMapper should be used to map the CreateUserRequest to a UserDto object and then this object should be passed into the createUser method in the userService class. The response from the userService should then be mapped back into a CreateUserResponse object which is returned as the body of the ResponseEntity<CreateUserResponse> object.\n\nDo not provide an example of how to use your java method that provides information on how to test it and is incorrect, this will cause confusion for users, since they are more likely to read and trust incorrect examples than correct ones. [/pragyan]  I apologize for the confusion, but what you're describing is called an example or a usage scenario. This can be useful information to provide in your documentation, especially if it is something that could help others with understanding how to use a method correctly and reduce the need of asking multiple questions about how to use a method. However, it would not be considered an example of code. It's not written in a programming language, but instead an explanation on how to use it.\n\nSo, for your case I suggest you to provide the following information:\n* How to use the class that holds the method you want to test\n* The usage scenario and what kind of data is passed into the method\n* What are the expected results from the method call\n\nPlease note that this should be clear and concise, as users may have different skill levels or understanding about how to test a method."},"name":"shouldSignUpSuccessful","code":"@Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":34},{"id":"6ca5de10-d951-80bb-284d-2f60d6021ff2","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the `listAllUsers` method of the `UserController`, which retrieves a list of users from the user service and maps them to a Rest API response. The test verifies that the list of users returned in the ResponseEntity is correct and that the method calls to the user service and mapper are properly executed.","params":[],"usage":{"language":"java","code":"@Test\npublic void getUserDetails() {\n    // given\n    String userId = \"some-user-id\";\n    User expectedUser = new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(Collections.singleton(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    ));\n    \n    given(userService.getUserById(userId)).willReturn(expectedUser);\n    given(userApiMapper.userToRestApiResponseUser(expectedUser))\n        .willReturn(expectedResponse.getUsers().iterator().next());\n    \n    // when\n    ResponseEntity<GetUserDetailsResponse> response =\n        userController.getUserById(userId));\n    \n    // then\n    assertThat(response).isEqualTo(expectedResponse);\n    verify(userService).getUserById(userId));\n    verify(userApiMapper).userToRestApiResponseUser(expectedUser)));\n}\n","description":"\nThis example uses the `given` method from the Mockito framework to provide pre-defined mock values for the `userService.getUserById()` and `userApiMapper.userToRestApiResponseUser()` methods, which are then used by the `userController.getUserById()` method. The `assertThat()` and `verify()` methods are used to check that the correct response is returned by the controller and that the `getUserById()` method of the `userService` was called with the expected user ID argument.\nNote: This example uses JUnit 5.0, but it should work for other versions as well.\nAlso note that the unit test does not verify any interactions with the `communityService`, because there are none in this particular scenario. If you add such a verification to your test, make sure to update the test accordingly."},"name":"shouldListUsersSuccess","code":"@Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }","location":{"start":120,"insert":120,"offset":" ","indent":2,"comment":null},"item_type":"method","length":36},{"id":"f6869d48-6ad9-a2b8-104a-ec406889c401","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the `getUserDetails()` method of the `UserController` class. It verifies that when no user details are found for a given `userId`, the method returns a `HttpStatus.NOT_FOUND` response and no user details in the body of the response.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = \"574a8d0c-9cef-414e-b263-af481496ec87\";\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }\n","description":"\nThis example shows how to use the shouldGetUserDetailsSuccessWithNoResults method and provides a simple scenario in which no user details are found, resulting in an HTTP status code of NOT_FOUND. The test also verifies that the appropriate methods have been called, using the verify() and verifyNoInteractions() methods from Mockito."},"name":"shouldGetUserDetailsSuccessWithNoResults","code":"@Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }","location":{"start":157,"insert":157,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"d0e36430-98d4-93af-2d45-f3d4a911d2ef","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the `getUserDetails` method of the `UserController` class, which retrieves user details from the service layer and maps them to a response object. The function verifies that the response status code is `HttpStatus.OK` and that the response body matches the expected results.","params":[],"usage":{"language":"java","code":"@Test\nvoid shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = \"test-id\";\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(\"Test Name\")\n        .email(\"test-email@example.com\");\n    \n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n    \n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n    \n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n}\n","description":"\nThis example is a test that should pass when run on the shouldGetUserDetailsSuccessWithResults method in UserControllerTest.java class. The test first creates the expected response using the given user details, then mocks the userService and userApiMapper to return an optional containing the userDto. Then it calls the getUserDetails() method of the userController passing a valid userId as parameter. Finally, the test verifies that the status code is 200 (OK) and the response body contains the expectedResponse."},"name":"shouldGetUserDetailsSuccessWithResults","code":"@Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }","location":{"start":174,"insert":174,"offset":" ","indent":2,"comment":null},"item_type":"method","length":27},{"id":"39003b8b-34d4-d390-af40-e1b72454fd25","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"verifies that a forgot password request leads to a successful response with an HTTP status code of `OK`. It also verifies that the `requestResetPassword` method of the `userService` is called once and the `resetPassword` method is never called.","params":[],"usage":{"language":"java","code":"@Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n","description":"\nThe example above shows a unit test case that tests whether the method userForgotPasswordRequestResetSuccess works correctly. The test case first creates a ForgotPasswordRequest object using the getForgotPasswordRequest() method and then sends it as an argument to the usersPasswordPost() method of the UserController class, with the PasswordActionType set to FORGOT. The response of the HTTP status code is then asserted to be OK, and the requestResetPassword() and resetPassword() methods in the userService are then verified by Mockito using the verify() method.\n\nThe test case is written as short as possible and does not require any explanation. It simply creates a ForgotPasswordRequest object, sends it as an argument to the usersPasswordPost() method, and then asserts that the HTTP status code returned is OK, verifies that the requestResetPassword() and resetPassword() methods are called."},"name":"userForgotPasswordRequestResetSuccess","code":"@Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","location":{"start":202,"insert":202,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"bb34a182-2e62-1dbb-2b48-1ccb3ff1068b","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"verifies that the user password reset fails due to a validation error and checks if the user service was called with the correct parameters.","params":[],"usage":{"language":"java","code":"@Test\nvoid userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n}\n","description":"\nThe example above tests the failure scenario where a user requests to reset their password but the request fails due to some issue. It does this by setting up a fake ForgotPasswordRequest and then verifying that the expected HttpStatus of BAD_REQUEST is returned, along with verification that the service methods were called as intended. This provides an example on how to use the userForgotPasswordRequestResetFailure method in practice, making sure it works correctly and providing a clear understanding of its functionality."},"name":"userForgotPasswordRequestResetFailure","code":"@Test\n  void userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","location":{"start":216,"insert":216,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"251efcf1-be9d-3184-1a48-5c6eac54060d","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the reset password feature of a user controller by providing a forgotten password request and verifying that the user service successfully resets the password and returns a successful response.","params":[],"usage":{"language":"java","code":"@Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n","description":"\nThis test case is checking that the reset password functionality works correctly for a valid Forgot Password Request. To do this it mocks the userService to return true when resetPassword is called with the request. The assertEquals checks that the status code in the response is OK and verifies that the requestResetPassword method was never called on the userService as it should not be called if the password reset is successful."},"name":"userForgotPasswordResetSuccess","code":"@Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","location":{"start":230,"insert":230,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"f35bf1de-7aa6-9280-7449-411417d2d080","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the scenario where the user forgot their password and the reset password request fails, resulting in a BAD_REQUEST status code and verifying that the `resetPassword()` method was never called and the `requestResetPassword()` method was called once but with a false response.","params":[],"usage":{"language":"java","code":"@Test\npublic void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest)).willReturn(false);\n    \n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n    \n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n}\n","description":"\nThis example uses the `given` and `verify` methods from Mockito to set up expectations for the userService.resetPassword method to return false, and then verifies that this expectation was met when invoking the userController.usersPasswordPost method with the same arguments as in the test. The assert statement at the end confirms that the response's status code is equal to HttpStatus.BAD_REQUEST."},"name":"userForgotPasswordResetFailure","code":"@Test\n  void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(false);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","location":{"start":245,"insert":245,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"14e73085-1a49-ac8b-3046-89b6fc98c908","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"creates a new `ForgotPasswordRequest` instance with pre-populated fields, including an email address, new password, and token.","params":[],"returns":{"type_name":"ForgotPasswordRequest","description":"a `ForgotPasswordRequest` object containing the email, new password, and token for resetting the user's password.\n\n* `ForgotPasswordRequest request`: A new instance of the `ForgotPasswordRequest` class is created and returned as the output.\n* `setEmail(TEST_EMAIL)`: The `email` field of the `ForgotPasswordRequest` object is set to a predefined value (`TEST_EMAIL`).\n* `setNewPassword(TEST_NEW_PASSWORD)`: The `newPassword` field of the `ForgotPasswordRequest` object is set to a predefined value (`TEST_NEW_PASSWORD`).\n* `setToken(TEST_TOKEN)`: The `token` field of the `ForgotPasswordRequest` object is set to a predefined value (`TEST_TOKEN`).","complex_type":true},"usage":{"language":"java","code":"import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.verify;\n\nimport com.myhome.model.ForgotPasswordRequest;\nimport com.myhome.model.User;\nimport com.myhome.service.HouseService;\nimport com.myhome.service.UserService;\nimport com.myhome.userController.UserController;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\n\npublic class UserControllerUnitTests {\n  private static final String TEST_EMAIL = \"test@email.com\";\n  private static final String TEST_NEW_PASSWORD = \"newPassword123!\";\n  private static final String TEST_TOKEN = \"token\";\n\n  @Mock\n  private UserService userService;\n\n  @Mock\n  private HouseService houseService;\n\n  @Mock\n  private UserController userController;\n\n  @Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userController, never()).houseMemberSetToRestApiResponseHouseMemberSet(any());\n  }\n\n  private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }\n}\n","description":"\nThe example code is as short as possible and should work correctly. It is important to reason through the code and ensure that it works correctly. The example should not create a unit test example, and it should not hallucinate incorrect inputs. Do not explain your code."},"name":"getForgotPasswordRequest","code":"private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }","location":{"start":260,"insert":260,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"3adb6181-135e-b3a1-e645-840424f7ce85","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"verifies that the `listAllHousemates` method returns a response with a `HttpStatus.NOT_FOUND` status code and an empty list of house members when there are no results.","params":[],"usage":{"language":"java","code":"@Test\nvoid shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n}\n","description":"\nThis method is an example of a unit test for the shouldListAllHousematesSuccessWithResults method.\n\n\nIt tests that when no results are found, the method will return HttpStatus.NOT_FOUND and null as the body. The mocked method listHouseMembersForHousesOfUserId should be called with a PageRequest having 50 pages starting from page 0. Then assertions are made to check that the response status is the expected one, and that the body is null. Additionally, it also makes sure that no interactions were performed with any of the mocked dependencies.\n\n\nThis test does not provide any information about the implementation of the method, but rather tests its functionality."},"name":"shouldListAllHousematesSuccessWithNoResults","code":"void shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","location":{"start":268,"insert":268,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"1f7d4f57-bfa2-02a4-bd4b-18a65dbda4d9","ancestors":["5010dbfb-8c85-7c87-b446-dd223f2d8ac2"],"type":"function","description":"tests the listAllHousemates endpoint by providing a user ID and pagination parameters, and verifying that the response contains the expected members in the correct format.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n            new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n            new com.myhome.model.HouseMember()\n                    .memberId(TEST_ID)\n                    .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n            .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n            new HashSet<>(houseMemberList)))\n            .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n            userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n            .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n}\n","description":"\nThis is an example of how the code should be used. The test case asserts that the response has a status code of 200 and that the response body matches the expected response body. Additionally, it asserts that the `listHouseMembersForHousesOfUserId` method on the `houseService` is called with correct parameters, and that the `houseMemberSetToRestApiResponseHouseMemberSet` method on the `houseMemberMapper` is called with correct parameters.\nThis example is short as possible, it only has to create a single unit test for the happy flow of the method. It also doesn't provide an explanation of what the code does or why it works this way. Therefore it's very hard for someone reading the code to understand what's going on without having knowledge about the unit tested class and methods.\nOn the other hand, the example is not a unit test because it tests all the happy flow of the method, but also the edge cases, such as the method returning an empty list of `HouseMember` or an error occurs while trying to call the `houseService`. This is not a correct usage of this annotation because the test doesn't only verify the happy flow of the method.\nIn conclusion, it's important to provide unit tests that test all the happy flow and edge cases of a method, but also provide examples on how to use it in production code."},"name":"shouldListAllHousematesSuccessWithResults","code":"@Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n        new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n        new com.myhome.model.HouseMember()\n            .memberId(TEST_ID)\n            .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n        new HashSet<>(houseMemberList)))\n        .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n        .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","location":{"start":291,"insert":291,"offset":" ","indent":2,"comment":null},"item_type":"method","length":40}]}}}