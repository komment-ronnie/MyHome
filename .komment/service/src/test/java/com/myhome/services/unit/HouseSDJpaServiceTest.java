{"name":"HouseSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/HouseSDJpaServiceTest.java","content":{"structured":{"description":"A JPA service class for interacting with a CommunityHouse entity in a database. The service provides various CRUD (Create, Read, Update, Delete) methods for managing community houses and their members. The methods include listing all houses, adding or deleting house members, and finding a specific house by its ID.","items":[{"id":"607920c6-bfb4-558b-0d4a-9612d864f45f","ancestors":[],"type":"function","description":"is a JUnit test class that verifies the behavior of the HouseSDJpaService class. The tests cover various scenarios such as listing all houses, adding and deleting members from a house, and deleting a member from a house that does not exist. The tests use mock objects to verify the interactions with the underlying repositories and ensure that the service behaves correctly in different situations.","name":"HouseSDJpaServiceTest","code":"class HouseSDJpaServiceTest {\n\n  private final int TEST_HOUSES_COUNT = 10;\n  private final int TEST_HOUSE_MEMBERS_COUNT = 10;\n  private final String HOUSE_ID = \"test-house-id\";\n  private final String MEMBER_ID = \"test-member-id\";\n\n  @Mock\n  private HouseMemberRepository houseMemberRepository;\n  @Mock\n  private HouseMemberDocumentRepository houseMemberDocumentRepository;\n  @Mock\n  private CommunityHouseRepository communityHouseRepository;\n  @InjectMocks\n  private HouseSDJpaService houseSDJpaService;\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void listAllHousesDefault() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n  }\n\n  @Test\n  void listAllHousesCustomPageable() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    Pageable pageRequest = PageRequest.of(0, TEST_HOUSES_COUNT);\n    Page<CommunityHouse> housesPage = new PageImpl<>(\n        new ArrayList<>(housesInDatabase),\n        pageRequest,\n        TEST_HOUSES_COUNT\n    );\n    given(communityHouseRepository.findAll(pageRequest))\n        .willReturn(housesPage);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses(pageRequest);\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll(pageRequest);\n  }\n\n  @Test\n  void addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  }\n\n  @Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n\n  @Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }\n\n  @Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n\n  @Test\n  void deleteMemberFromHouseMemberNotPresent() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(communityHouse);\n    verifyNoInteractions(houseMemberRepository);\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0,"comment":null},"item_type":"class","length":163},{"id":"fae24a2e-02f8-ec82-6c4f-2e63fa1e8987","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"initializes mock objects using MockitoAnnotations, allowing for effective testing of code under various conditions.","params":[],"usage":{"language":"java","code":"import org.junit.jupiter.api.BeforeEach;\nimport org.mockito.MockitoAnnotations;\n\npublic class Test {\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n}\n","description":"\nThe setUp method is used to initialize the test environment before each test case is executed. It is also a good place to define variables that need to be used across multiple tests, like mock objects. This way we can avoid creating new mock objects in every test and make our code more readable.\nIn this example, we are using MockitoAnnotations.initMocks(this) method to initialize the mock objects for all fields annotated with @Mock. The initMocks() method is a static method provided by Mockito that initializes all mock objects in the class and sets them up for test-time usage.\nNote: Make sure to call initMocks() before you start using any of your mock objects in the test methods."},"name":"setUp","code":"@BeforeEach\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":66,"insert":66,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"62b51ffc-2025-e390-5144-d04796083dd5","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"retrieves a set of community houses from the database using `houseSDJpaService`, compares it with the expected result, and verifies that the repository method `findAll()` was called once to retrieve the houses.","params":[],"usage":{"language":"java","code":"@Test\n  void listAllHousesDefault() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n  }\n}\n","description":"\nThe example above uses the given method to mock the communityHouseRepository and returns a set of CommunityHouse objects. The method is then called in the houseSDJpaService class to retrieve all the houses from the database and assert that the return object matches the provided House in the test. The verify() method is used to check if the findAll() method is called on the communityHouseRepository.\n\nThis example is useful because it tests that the listAllHousesDefault() method is retrieving all houses from the database correctly without having to create a house object or a repository of the objects in the test. Additionally, this example provides clear code for what the test is trying to achieve and why it is written in such a manner."},"name":"listAllHousesDefault","code":"@Test\n  void listAllHousesDefault() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    \n    given(communityHouseRepository.findAll())\n        .willReturn(housesInDatabase);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses();\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll();\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2,"comment":null},"item_type":"method","length":15},{"id":"9fb490f3-1592-c69a-424a-001f90c779b0","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"lists all houses from a database using a page request and compares the result with the expected list of houses to verify its correctness.","params":[],"usage":{"language":"java","code":"@Test\n  void listAllHousesCustomPageable() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    Pageable pageRequest = PageRequest.of(0, TEST_HOUSES_COUNT);\n    Page<CommunityHouse> housesPage = new PageImpl<>(\n        new ArrayList<>(housesInDatabase),\n        pageRequest,\n        TEST_HOUSES_COUNT\n    );\n    given(communityHouseRepository.findAll(pageRequest))\n        .willReturn(housesPage);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses(pageRequest);\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll(pageRequest);\n  }\n","description":"\n This code uses the given method to mock the communityHouseRepository.findAll() method and returns a Page of CommunityHouse objects, as specified by the pageable parameter. The method listAllHouses is then called with this mocked repository and checks if the result is equal to the expected housesInDatabase set."},"name":"listAllHousesCustomPageable","code":"@Test\n  void listAllHousesCustomPageable() {\n    // given\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    Pageable pageRequest = PageRequest.of(0, TEST_HOUSES_COUNT);\n    Page<CommunityHouse> housesPage = new PageImpl<>(\n        new ArrayList<>(housesInDatabase),\n        pageRequest,\n        TEST_HOUSES_COUNT\n    );\n    given(communityHouseRepository.findAll(pageRequest))\n        .willReturn(housesPage);\n\n    // when\n    Set<CommunityHouse> resultHouses = houseSDJpaService.listAllHouses(pageRequest);\n\n    // then\n    assertEquals(housesInDatabase, resultHouses);\n    verify(communityHouseRepository).findAll(pageRequest);\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2,"comment":null},"item_type":"method","length":20},{"id":"ff37b77a-90e4-4d81-5543-db4b01697fc0","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"adds a set of HouseMembers to an existing CommunityHouse, updates the CommunityHouse's `houseMembers` list, and saves both the CommunityHouse and the added HouseMembers in the database.","params":[],"usage":{"language":"java","code":"@Test\n  void addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  }\n","description":"\nThe above code uses the TestUtils.HouseMemberHelpers and TestUtils.CommunityHouseHelpers to generate test data for both the input membersToAdd and the communityHouse. The addHouseMembers method is then called with the HOUSE_ID and membersToAdd as arguments. The result of calling this method is then asserted by comparing its size with the membersToAddSize, which in turn should match with the size of the communityHouse's houseMembers.\nFinally, verify(communityHouseRepository).save(communityHouse); and verify(houseMemberRepository).saveAll(membersToAdd); are called to ensure that save and saveAll methods were called on the respective repository mocks with the right data. The final verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID) is used to check if the findByHouseIdWithHouseMembers method was called on the communityHouseRepository with the HOUSE_ID as argument."},"name":"addHouseMembers","code":"@Test\n  void addHouseMembers() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    int membersToAddSize = membersToAdd.size();\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n    given(houseMemberRepository.saveAll(membersToAdd))\n        .willReturn(membersToAdd);\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertEquals(membersToAddSize, resultMembers.size());\n    assertEquals(membersToAddSize, communityHouse.getHouseMembers().size());\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).saveAll(membersToAdd);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  }","location":{"start":108,"insert":108,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"ee496410-592f-daa4-4249-d3ce3a27fca3","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"tests the addHouseMembers method when the house with the given ID does not exist in the repository. It verifies that no members are added and interacts with the repository to simulate the expected behavior.","params":[],"usage":{"language":"java","code":"@Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n","description":"\nThis example tests the method addHouseMembers when the house does not exist. It checks if the result of the method is empty and if the repository has been queried once with findByHouseIdWithHouseMembers. Additionally, it checks if the communityHouseRepository save method was never called and if no interactions were made to the houseMemberRepository.\n\nThis example provides a useful test case that ensures that the program will return an empty set when the house does not exist. It also makes sure that the correct methods have been queried and that no changes have been made to the database."},"name":"addHouseMembersHouseNotExists","code":"@Test\n  void addHouseMembersHouseNotExists() {\n    // given\n    Set<HouseMember> membersToAdd = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<HouseMember> resultMembers = houseSDJpaService.addHouseMembers(HOUSE_ID, membersToAdd);\n\n    // then\n    assertTrue(resultMembers.isEmpty());\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":131,"insert":131,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"da879ebf-7cb3-d9bd-8c47-c0b5df9542a3","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"deletes a specified member from a community house. It first retrieves the community house and its members, then deletes the member from the house members list, saves the community house, and finally verifies the delete operation.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }\n","description":"\nThe example code should be as short as possible. Make sure the code is correct and reasoned through, and it should work correctly without any hallucinations of incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"deleteMemberFromHouse","code":"@Test\n  void deleteMemberFromHouse() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    HouseMember memberToDelete = new HouseMember().withMemberId(MEMBER_ID);\n    memberToDelete.setCommunityHouse(communityHouse);\n\n    houseMembers.add(memberToDelete);\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertTrue(isMemberDeleted);\n    assertNull(memberToDelete.getCommunityHouse());\n    assertFalse(communityHouse.getHouseMembers().contains(memberToDelete));\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository).save(communityHouse);\n    verify(houseMemberRepository).save(memberToDelete);\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2,"comment":null},"item_type":"method","length":26},{"id":"e4818f00-594f-aea8-5e40-8bddefe2e73f","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"verifies that a member is not deleted from a house when the member does not exist in the house's membership list.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    HouseMember memberToDelete = new HouseMember();\n    memberToDelete.setMemberId(MEMBER_ID);\n    Set<CommunityHouse> housesInDatabase = TestUtils.CommunityHouseHelpers.getTestHouses(TEST_HOUSES_COUNT);\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }\n","description":"\n This test is used to verify that the deleteMemberFromHouse method returns false when a house with the given houseId does not exist in the database. The test uses the @Given annotation to specify the parameters of the method, and the @WillReturn annotation to return an empty optional as the result of the findByHouseIdWithHouseMembers method call. The verifyNoInteractions annotation is used to ensure that no interactions were made with the houseMemberRepository instance.\nThe following are examples on how to use this java method:\n"},"name":"deleteMemberFromHouseNotExists","code":"@Test\n  void deleteMemberFromHouseNotExists() {\n    // given\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(any());\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":176,"insert":176,"offset":" ","indent":2,"comment":null},"item_type":"method","length":15},{"id":"a7fca44c-c2b9-22b3-d143-b606f3c2ae06","ancestors":["607920c6-bfb4-558b-0d4a-9612d864f45f"],"type":"function","description":"tests whether a member can be deleted from a house when the member is not present in the house's member list. It does this by deleting a member from the house and verifying that the member is not found in the house's member list after deletion.","params":[],"usage":{"language":"java","code":"@Test\nvoid deleteMemberFromHouseMemberNotPresent() {\n  // given\n  Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n  CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n  communityHouse.setHouseMembers(houseMembers);\n\n  given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n      .willReturn(Optional.of(communityHouse));\n\n  // when\n  boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n  // then\n  assertFalse(isMemberDeleted);\n  verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n  verify(communityHouseRepository, never()).save(communityHouse);\n  verifyNoInteractions(houseMemberRepository);\n}\n","description":"\nThis example uses the deleteMemberFromHouse method to test if a member is removed from a house when they are not present. The test case will pass if the member is successfully removed from the house, and fail otherwise.\n\nIt's important to note that the deleteMemberFromHouse method will return false when the house or the member does not exist. Therefore, it's necessary to use the given method to mock the findByHouseIdWithHouseMembers method in order to test for a successful removal of the member from the house.\n\nAlso, it's important to verify that the communityHouseRepository.save method was never called in this example since the member is not present in the house and therefore should not be removed."},"name":"deleteMemberFromHouseMemberNotPresent","code":"@Test\n  void deleteMemberFromHouseMemberNotPresent() {\n    // given\n    Set<HouseMember> houseMembers = TestUtils.HouseMemberHelpers.getTestHouseMembers(TEST_HOUSE_MEMBERS_COUNT);\n    CommunityHouse communityHouse = TestUtils.CommunityHouseHelpers.getTestCommunityHouse();\n\n    communityHouse.setHouseMembers(houseMembers);\n\n    given(communityHouseRepository.findByHouseIdWithHouseMembers(HOUSE_ID))\n        .willReturn(Optional.of(communityHouse));\n\n    // when\n    boolean isMemberDeleted = houseSDJpaService.deleteMemberFromHouse(HOUSE_ID, MEMBER_ID);\n\n    // then\n    assertFalse(isMemberDeleted);\n    verify(communityHouseRepository).findByHouseIdWithHouseMembers(HOUSE_ID);\n    verify(communityHouseRepository, never()).save(communityHouse);\n    verifyNoInteractions(houseMemberRepository);\n  }","location":{"start":192,"insert":192,"offset":" ","indent":2,"comment":null},"item_type":"method","length":20}]}}}