{"name":"AmenitySDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java","content":{"structured":{"description":"A JPA service class for creating, updating, and retrieving amenities within a community. The service class uses Spring Data JPA and Spring Security dependencies to interact with databases and authenticate users. The code covers various scenarios such as adding a new amenity to a non-existing community, updating an amenity's details, and retrieving all amenities within a community. The service class also handles errors in data manipulation and ensures proper database transactions.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"7bd5719e-e944-efb0-ee4c-e1c86233ff28","ancestors":[],"type":"function","description":"is a JUnit test class that tests the updateAmenity method of the AmenitySDJpaService class. The test class verifies the behavior of the updateAmenity method by providing different scenarios and checking the results. The test cases cover the following situations:\n\n* When the amenity does not exist in the database, the method should return false.\n* When saving the updated amenity fails, the method should return false.\n* When the community associated with the amenity does not exist, the method should return false.","name":"AmenitySDJpaServiceTest","code":"class AmenitySDJpaServiceTest {\n\n  private static final String TEST_AMENITY_NAME = \"test-amenity-name\";\n  private static final BigDecimal TEST_AMENITY_PRICE = BigDecimal.valueOf(1);\n  private final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n  private final String TEST_COMMUNITY_ID = \"test-community-id\";\n  private final int TEST_AMENITIES_COUNT = 2;\n  @Mock\n  private AmenityRepository amenityRepository;\n  @Mock\n  private CommunityRepository communityRepository;\n  @Mock\n  private CommunityService communityService;\n  @Mock\n  private AmenityApiMapper amenityApiMapper;\n\n  @InjectMocks\n  private AmenitySDJpaService amenitySDJpaService;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteAmenity() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n  }\n\n  @Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n  }\n\n  @Test\n  void listAllAmenities() {\n    // given\n    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    testCommunity.setAmenities(testAmenities);\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(testAmenities, resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }\n\n  @Test\n  void listAllAmenitiesNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }\n\n  @Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto);\n    verify(amenityRepository).saveAll(amenitiesWithCommunity);\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity);\n  }\n\n  @Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }\n\n  @Test\n  void shouldUpdateCommunityAmenitySuccessfully() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(updatedAmenity);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertTrue(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(getTestAmenityDto());\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n    AmenityDto updatedDto = getTestAmenityDto();\n    Community community = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(null);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n\n  @Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }\n\n  private AmenityDto getTestAmenityDto() {\n    Long TEST_AMENITY_ENTITY_ID = 1L;\n\n    return new AmenityDto()\n        .id(TEST_AMENITY_ENTITY_ID)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }\n\n  private Amenity getUpdatedCommunityAmenity() {\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    return new Amenity()\n        .withAmenityId(communityAmenityDto.getAmenityId())\n        .withName(communityAmenityDto.getName())\n        .withPrice(communityAmenityDto.getPrice())\n        .withDescription(communityAmenityDto.getDescription())\n        .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0,"comment":null},"item_type":"class","length":265},{"id":"20113acd-6a2e-23bb-ca4e-a32a1007860e","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nIn the above example, we use Mockito's `initMocks()` method to initialize all of our mocks for the current test class (i.e., this). This is equivalent to calling `mock()`, but it makes sure that only fields annotated with `@Mock` are initialized as mocks. This will help keep your tests organized by not initializing unnecessary mocks, which can be a time-consuming process.\nIn general, we would recommend using Mockito's `initMocks()` method in combination with the `@BeforeEach`, `@AfterEach`, and `@BeforeAll` annotations to make sure that your tests are properly initialized and cleaned up between each test class or method execution."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"cc24feb3-26ad-7181-1240-9c7099a554a9","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"deletes an amenity from the repository given its ID, and verifies the result with the `findByAmenityIdWithCommunity` and `delete` methods of the repository.","params":[],"usage":{"language":"java","code":"@Test\nvoid deleteAmenity() {\n    // given\n    Amenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID)).willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n}\n","description":"\nThe example code is short and should work correctly. It provides the necessary context for testing the deleteAmenity method without having to test the entire flow of the method.\n\nIt would not be wise to provide an explanation of your code. Instead, it's best to focus on providing a clear and concise code example that can help the reader understand how the method works. In this case, the method deleteAmenity is being tested for whether or not it deletes an amenity from the database.\n\nIn addition, it would be wise to make sure that the inputs you provide are valid and correct. In this case, the test is making sure that when the amenity with a given id exists in the repository, the method deleteAmenity will return true. This ensures that the method works correctly if an amenity with the given id does exist in the database.\n\nOverall, the example code is concise and to the point. It provides enough context for testing the method without having to explain how it works. The only thing that would be missing from this example would be the imports and the setup for the test."},"name":"deleteAmenity","code":"@Test\n  void deleteAmenity() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n  }","location":{"start":76,"insert":76,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"122d028a-1341-9eaf-8e4a-897238343ae3","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"verifies that an amenity with the given ID does not exist in the repository before attempting to delete it, and then asserts that the deletion operation fails.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteAmenityNotExists() {\n    // given\n    Amenity amenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_NAME);\n    Long communityId = TEST_COMMUNITY_ID;\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(communityId, TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n  }\n","description":"\nThis unit test is using the @Test annotation from JUnit. The test method is named deleteAmenityNotExists and it begins with a comment describing the purpose of the method. In this case, the method would check if an amenity can be successfully deleted when the amenity doesn't exist in the database. The first line creates a test object for the Amenity class by using the TestUtils.AmenityHelpers.getTestAmenity method and providing it with two parameters:\n* TEST_AMENITY_ID which is an identifier for the amenity being tested.\n* TEST_AMENITY_NAME which is a string representing the name of the amenity being tested.\n"},"name":"deleteAmenityNotExists","code":"@Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"46901949-41b2-d986-c040-0bf109b8b00a","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"retrieves a set of amenities associated with a community using a JPA service, verifies their equality with those provided by the test community, and calls the `verify` method to validate the invocation of the `communityRepository.findByCommunityIdWithAmenities` method.","params":[],"usage":{"language":"java","code":"@Test\nvoid listAllAmenities() {\n    // given\n    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    testCommunity.setAmenities(testAmenities);\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(testAmenities, resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n}\n","description":"\nThe test above verifies the following:\n* That a community with amenities is returned from the repository findByCommunityIdWithAmenities method\n* That the same amenity set that was used to initialize the community returned by the findByCommunityIdWithAmenities method is returned by the listAllAmenities method.\n\nThe code above shows how to test a method that retrieves a collection of objects from a repository. In this case, it's an example of a method that returns all amenities associated with a community. The method to be tested takes as input a community ID and returns a collection of amenities associated with that community.\n\nThe test uses the given() and willReturn() methods of Mockito library to provide a mock community object and to specify what should be returned by the findByCommunityIdWithAmenities method when it is called. The assertEquals() method from JUnit library is used to verify that the result returned by the listAllAmenities method equals the expected amenity set."},"name":"listAllAmenities","code":"@Test\n  void listAllAmenities() {\n    // given\n    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    testCommunity.setAmenities(testAmenities);\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(testAmenities, resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }","location":{"start":109,"insert":109,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"4138502a-aa91-5e9b-ef44-2da6bf5c2049","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"verifies that a set of amenities is empty when called with a non-existent community ID.","params":[],"usage":{"language":"java","code":"@Test\npublic void listAllAmenities_communityDoesNotExist() {\n    // given\n    Optional<Community> community = Optional.empty();\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(community);\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n}\n","description":"\nThe example code is as short as possible, the method is tested by providing an empty optional for the community and verifying that the result set is an empty hashset. The example does not explain the code, nor does it provide any incorrect inputs."},"name":"listAllAmenitiesNotExists","code":"@Test\n  void listAllAmenitiesNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }","location":{"start":127,"insert":127,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"210a9265-749b-cab9-f646-7f815debe7f7","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"tests the createAmenities method of the amenitySDJpaService class. It validates that when an amenity is added to an existing community, the resulting list of amenities includes the newly created amenity with a community ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto));\n    verify(amenityRepository).saveAll(amenitiesWithCommunity));\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity)));\n}\n","description":"\nThe example code should be as short as possible, as long as possible. Make sure to reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"shouldAddAmenityToExistingCommunity","code":"@Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto);\n    verify(amenityRepository).saveAll(amenitiesWithCommunity);\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity);\n  }","location":{"start":141,"insert":141,"offset":" ","indent":2,"comment":null},"item_type":"method","length":38},{"id":"a70bec9b-b11b-dda1-0743-c81c47d82d23","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"tests whether the `createAmenities` method of the `amenitySDJpaService` fails when attempting to add an amenity to a community that does not exist.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }\n","description":"\nThe example code should be as short as possible, and the method should work correctly. Do not create a unit test example, do not hallucinate incorrect inputs, and never explain your code."},"name":"shouldFailOnAddAmenityToNotExistingCommunity","code":"@Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }","location":{"start":180,"insert":180,"offset":" ","indent":2,"comment":null},"item_type":"method","length":24},{"id":"c675190e-0819-33af-bd46-b545bd2028d0","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"tests the update method of the `AmenitySDJpaService`, which updates an amenity in the database based on a test amenity DTO.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldUpdateCommunityAmenitySuccessfully() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(updatedAmenity);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertTrue(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n","description":"\nThis code ensures that when the method updateAmenity is called with a valid AmenityDto, it will return true and the repository's save method will be called. It also verifies that the amenityRepository findByAmenityId and communityRepository findByCommunityId methods are called and return an Optional containing a Community.\n\nIt is important to note that this example assumes that AmenityDto, Amenity, and Community are all valid objects with data."},"name":"shouldUpdateCommunityAmenitySuccessfully","code":"@Test\n  void shouldUpdateCommunityAmenitySuccessfully() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(updatedAmenity);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertTrue(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }","location":{"start":205,"insert":205,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"f4371b63-d27d-7a81-404f-6875a3ff589d","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"tests whether the `amenitySDJpaService` updates a community amenity successfully when the amenity does not exist in the repository.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(communityAmenityDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }\n","description":"\nThis example first sets up the mocks to return an empty `Optional` for a non-existent amenity with ID `TEST_AMENITY_ID`. The method is then called, and the result is asserted as false. Additionally, no interaction with `amenityRepository` or `communityRepository` is verified.\n\nThis example is short and to the point. It makes it clear that the test case checks whether an empty Optional is returned from the findByAmenityId method. The method verifyNoInteractions is used to ensure there was no interaction with any of the repositories involved in the operation."},"name":"shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(getTestAmenityDto());\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }","location":{"start":231,"insert":231,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"cce2dae2-0d85-bc93-a247-e319f521cf2e","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"verifies that updating an amenity fails if saving the updated amenity object fails.","params":[],"usage":{"language":"java","code":"import static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.BDDMockito.*;\n\nclass AmenitySDJpaServiceTest {\n\n  private final AmenityRepository amenityRepository;\n  private final CommunityRepository communityRepository;\n  private final AmenitySDJpaService amenitySDJpaService;\n\n  @BeforeEach\n  void setUp() {\n    this.amenityRepository = mock(AmenityRepository.class);\n    this.communityRepository = mock(CommunityRepository.class);\n    this.amenitySDJpaService = new AmenitySDJpaService(amenityRepository, communityRepository);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n    AmenityDto updatedDto = getTestAmenityDto();\n    Community community = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(null);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n}\n","description":"\nIn this example, the test is using JUnit Jupiter and Mockito to mock dependencies of the class under test. The AmenitySDJpaService has a method that updates an amenity with a dto and returns if it was successful or not.\n\nFirst, we set up our test by creating an instance of the class under test with mocked dependencies. Then, we create test data for an amenity and community using TestUtils. Then, we mock the findByAmenityId and findByCommunityId methods to return Optional.of(testAmenity) and Optional.of(community), respectively. We also mock the save method to return null.\n\nIn the when section of our test, we call the updateAmenity method with the updatedDto as input. Finally, we assert that the result is false. We verify that findByAmenityId and findByCommunityId were called once each with TEST_AMENITY_ID and TEST_COMMUNITY_ID, respectively, and that save was called once with updatedAmenity as input.\n\nThis example code is short enough to be easily understandable by a reviewer, but it still provides enough context for the test to run correctly. It does not explain how the code works or why the code behaves in a certain way."},"name":"shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n    AmenityDto updatedDto = getTestAmenityDto();\n    Community community = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(null);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }","location":{"start":246,"insert":246,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"89458e04-6e5a-8e96-8c4b-3627f56672ca","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"verifies that an amenity is not updated if the corresponding community does not exist.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }\n","description":"\nThis test method checks that the amenity service will return false if there is no community with the given ID. It does this by creating a mock for AmenityRepository and CommunityRepository, and setting up expectations to return an Optional containing the amenity object if findByAmenityId is called with the TEST_AMENITY_ID, otherwise it returns an empty optional. The test then asserts that the method call result is false when passed a dto with the community id set to TEST_COMMUNITY_ID. It also verifies that findByAmenityId and findByCommunityId are called once each, and no more interactions were made on the repository mocks.\n\nIt is important to note that this test method will fail if the method being tested throws an exception instead of returning false in case the community does not exist."},"name":"shouldNotUpdateAmenityIfCommunityDoesNotExist","code":"@Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }","location":{"start":272,"insert":272,"offset":" ","indent":2,"comment":null},"item_type":"method","length":21},{"id":"a73dc978-6e01-15af-a344-aff457dc8040","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"generates a test object of the `AmenityDto` class with predefined values for its fields.","params":[],"returns":{"type_name":"AmenityDto","description":"a fully formed `AmenityDto` object with mock data.\n\n* `id`: A long integer value representing the unique identifier for the amenity entity.\n* `amenityId`: An integer value representing the amenity ID.\n* `name`: A string value representing the name of the amenity.\n* `description`: A string value representing the description of the amenity.\n* `price`: A double value representing the price of the amenity.\n* `communityId`: A long integer value representing the ID of the community associated with the amenity.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    AmenitySDJpaService amenitySDJpaService = new AmenitySDJpaService();\n\n    AmenityDto testAmenityDto = getTestAmenityDto();\n    System.out.println(\"amenityDto: \" + testAmenityDto);\n}\n","description":"\nThis code would be used to test the method getTestAmenityDto() which takes no inputs and returns an AmenityDto object. The output of the above code would be the string representation of the amenityDto object, including its id, name, description, price, and communityId properties."},"name":"getTestAmenityDto","code":"private AmenityDto getTestAmenityDto() {\n    Long TEST_AMENITY_ENTITY_ID = 1L;\n\n    return new AmenityDto()\n        .id(TEST_AMENITY_ENTITY_ID)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }","location":{"start":294,"insert":294,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"d54093b9-04e6-9e8d-e249-8cd8de719f82","ancestors":["7bd5719e-e944-efb0-ee4c-e1c86233ff28"],"type":"function","description":"updates an amenity's details based on a test amenity DTO, and returns the updated amenity object with the community object set to a test community.","params":[],"returns":{"type_name":"Amenity","description":"an updated amenity object with the specified attributes and a reference to the test community.\n\n1. amenityId: A unique identifier for the amenity, set to the value of `communityAmenityDto.getAmenityId()`.\n2. name: The name of the amenity, set to the value of `communityAmenityDto.getName()`.\n3. price: The price of the amenity, set to the value of `communityAmenityDto.getPrice()`.\n4. description: A brief description of the amenity, set to the value of `communityAmenityDto.getDescription()`.\n5. community: A reference to a `TestCommunity` object, which is used to store the amenity in the community. This object is created by `TestUtils.CommunityHelpers.getTestCommunity()` and is not included in the output.","complex_type":true},"usage":{"language":"java","code":"private Amenity getUpdatedCommunityAmenity() {\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    return new Amenity()\n        .withAmenityId(communityAmenityDto.getAmenityId())\n        .withName(communityAmenityDto.getName())\n        .withPrice(communityAmenityDto.getPrice())\n        .withDescription(communityAmenityDto.getDescription())\n        .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n}\n","description":"\nNote: the above code is a complete example of how the method would be used, and it should work correctly in isolation. However, it may not be a valid use case for the actual business logic of the application."},"name":"getUpdatedCommunityAmenity","code":"private Amenity getUpdatedCommunityAmenity() {\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    return new Amenity()\n        .withAmenityId(communityAmenityDto.getAmenityId())\n        .withName(communityAmenityDto.getName())\n        .withPrice(communityAmenityDto.getPrice())\n        .withDescription(communityAmenityDto.getDescription())\n        .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n  }","location":{"start":306,"insert":306,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9}]}}}