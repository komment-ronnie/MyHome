{"name":"SecurityTokenSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/SecurityTokenSDJpaServiceTest.java","content":{"structured":{"description":"A SecurityTokenSDJpaService class that creates and manages security tokens for password resets and email confirmations. The service uses Spring Data JPA and Mockito for dependency injection and mocking, respectively. The code tests the createPasswordResetToken, createPasswordResetToken, and createEmailConfirmToken methods of the SecurityTokenSDJpaService class through three test methods.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"6fde5053-b6ad-698d-de46-1aaa0794fae3","ancestors":[],"type":"function","description":"is a JUnit test class for testing the SecurityTokenSDJpaService class. The test class sets up mocks for SecurityTokenRepository and injects the service under test. The tests cover the creation of security tokens for password reset, email confirmation, and resetting the password. Each test verifies that the created token has the expected type, lifetime, and owner, and that the token is saved in the repository.","name":"SecurityTokenSDJpaServiceTest","code":"public class SecurityTokenSDJpaServiceTest {\n\n  private final Duration TEST_TOKEN_LIFETIME_SECONDS = Duration.ofDays(1);\n\n  @Mock\n  private SecurityTokenRepository securityTokenRepository;\n\n  @InjectMocks\n  private SecurityTokenSDJpaService securityTokenSDJpaService;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"passResetTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"emailConfirmTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n  }\n\n  @Test\n  void createSecurityToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    SecurityTokenType testTokenType = SecurityTokenType.RESET;\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), testTokenType);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }\n\n  @Test\n  void createPasswordResetToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.RESET);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }\n\n  @Test\n  void createEmailConfirmToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createEmailConfirmToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.EMAIL_CONFIRM);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }\n\n}","location":{"start":27,"insert":27,"offset":" ","indent":0,"comment":null},"item_type":"class","length":90},{"id":"a584526c-9274-a195-d143-fef3780bf481","ancestors":["6fde5053-b6ad-698d-de46-1aaa0794fae3"],"type":"function","description":"initializes MockitoAnnotations and sets fields on a `securityTokenSDJpaService` object to simulate token lifetimes for testing purposes.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"passResetTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"emailConfirmTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n  }\n","description":""},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"passResetTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n    ReflectionTestUtils.setField(securityTokenSDJpaService, \"emailConfirmTokenTime\",\n        TEST_TOKEN_LIFETIME_SECONDS);\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8},{"id":"ee750c84-771e-cd82-a747-ac0f8e189d3a","ancestors":["6fde5053-b6ad-698d-de46-1aaa0794fae3"],"type":"function","description":"creates a new security token for a user based on their user ID, SecurityTokenType, and generates a unique token owner. It also checks if the creation date is before the expiry date and lifetime matches a predefined value. Finally, it verifies the save operation was performed correctly.","params":[],"usage":{"language":"java","code":"@Test\n  void createSecurityToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    SecurityTokenType testTokenType = SecurityTokenType.RESET;\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), testTokenType);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }\n","description":"\nIn this example code, we are testing the createPasswordResetToken method of SecurityTokenSDJpaService class. The given user is created with a unique id and then passed to the createPasswordResetToken method. The expected result is that the method returns a SecurityToken object with the correct token type (RESET), expiry date set correctly, and owner as the user object. We also verify that the save method of the security token repository has been called with any argument using the verify() method from Mockito.\nThe example code should be short and concise enough to explain the functionality of the method without providing unnecessary details or explanations. It should also reason through the code and make sure it is correct in all aspects before posting."},"name":"createSecurityToken","code":"@Test\n  void createSecurityToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    SecurityTokenType testTokenType = SecurityTokenType.RESET;\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), testTokenType);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":23},{"id":"cbc640dc-a893-8bac-d148-3fbef40a2e02","ancestors":["6fde5053-b6ad-698d-de46-1aaa0794fae3"],"type":"function","description":"generates a security token for a user, sets its properties, and saves it to the repository.","params":[],"usage":{"language":"java","code":"@Test\n  void createPasswordResetToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.RESET);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }\n","description":"\nThe test case demonstrates how the createPasswordResetToken method can be used to create a new password reset token for the given user. It first creates a unique user object and then invokes the createPasswordResetToken method on the securityTokenSDJpaService instance, passing in the user as an argument. The test verifies that the created token has the correct type (RESET), is valid within the predefined time frame, and has the correct owner. Finally, it verifies that the save method of the securityTokenRepository was called with any argument."},"name":"createPasswordResetToken","code":"@Test\n  void createPasswordResetToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createPasswordResetToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.RESET);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"083fbaf5-a998-4b9b-4c4b-7a244af98934","ancestors":["6fde5053-b6ad-698d-de46-1aaa0794fae3"],"type":"function","description":"generates an email confirmation token for a user and saves it to the repository, checking its validity and ownership.","params":[],"usage":{"language":"java","code":"// given\nUser user = new User();\nuser.setUserId(TestUtils.General.generateUniqueId());\nwhen(securityTokenRepository.save(any()))\n    .then(returnsFirstArg());\n\n// when\nSecurityToken actualSecurityToken = securityTokenSDJpaService.createEmailConfirmToken(user);\nLocalDate creationDate = actualSecurityToken.getCreationDate();\nLocalDate expiryDate = actualSecurityToken.getExpiryDate();\nDuration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n// then\nassertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.EMAIL_CONFIRM);\nassertTrue(creationDate.isBefore(expiryDate));\nassertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\nassertEquals(user, actualSecurityToken.getTokenOwner());\nassertNotNull(actualSecurityToken.getToken());\nverify(securityTokenRepository).save(any());\n","description":"\nThe example code should as short as possible as possible. Make sure to reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code."},"name":"createEmailConfirmToken","code":"@Test\n  void createEmailConfirmToken() {\n    // given\n    User user = new User();\n    user.setUserId(TestUtils.General.generateUniqueId());\n    when(securityTokenRepository.save(any()))\n        .then(returnsFirstArg());\n\n    // when\n    SecurityToken actualSecurityToken = securityTokenSDJpaService.createEmailConfirmToken(user);\n    LocalDate creationDate = actualSecurityToken.getCreationDate();\n    LocalDate expiryDate = actualSecurityToken.getExpiryDate();\n    Duration lifetime = Duration.between(creationDate.atStartOfDay(), expiryDate.atStartOfDay());\n\n    // then\n    assertEquals(actualSecurityToken.getTokenType(), SecurityTokenType.EMAIL_CONFIRM);\n    assertTrue(creationDate.isBefore(expiryDate));\n    assertEquals(lifetime, TEST_TOKEN_LIFETIME_SECONDS);\n    assertEquals(user, actualSecurityToken.getTokenOwner());\n    assertNotNull(actualSecurityToken.getToken());\n    verify(securityTokenRepository).save(any());\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22}]}}}