{"name":"AuthenticationSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/AuthenticationSDJpaServiceTest.java","content":{"structured":{"description":"An `AuthenticationSDJpaService` class that implements Spring Data JPA authentication functionality. It contains a `UserSDJpaService`, `AppJwtEncoderDecoder`, and `PasswordEncoder` dependencies injected through constructor injection. The class provides methods for logging in users, validating credentials, and generating JWT tokens.","items":[{"id":"40883677-1d44-fdb5-f840-77fa14dcba8f","ancestors":[],"type":"function","description":"is a JUnit test class for testing the AuthenticationSDJpaService class. It verifies the functionality of the class in various scenarios such as successful login, user not found, and incorrect credentials. The test class uses mock objects to stub out the dependencies of the class, including UserSDJpaService, AppJwtEncoderDecoder, and PasswordEncoder.","name":"AuthenticationSDJpaServiceTest","code":"public class AuthenticationSDJpaServiceTest {\n\n  private final String USER_ID = \"test-user-id\";\n  private final String USERNAME = \"test-user-name\";\n  private final String USER_EMAIL = \"test-user-email\";\n  private final String USER_PASSWORD = \"test-user-password\";\n  private final String REQUEST_PASSWORD = \"test-request-password\";\n  private final Duration TOKEN_LIFETIME = Duration.ofDays(1);\n  private final String SECRET = \"secret\";\n\n  @Mock\n  private final UserSDJpaService userSDJpaService = mock(UserSDJpaService.class);\n  @Mock\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder = mock(AppJwtEncoderDecoder.class);\n  @Mock\n  private final PasswordEncoder passwordEncoder = mock(PasswordEncoder.class);\n  private final AuthenticationSDJpaService authenticationSDJpaService =\n      new AuthenticationSDJpaService(TOKEN_LIFETIME, SECRET, userSDJpaService, appJwtEncoderDecoder,\n          passwordEncoder);\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n\n  @Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  @Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }\n\n  private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }\n\n  private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0,"comment":null},"item_type":"class","length":95},{"id":"5f791f8b-0131-beb3-2340-d0c0a330a55f","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"verifies that a login request with a valid email and password can be successfully authenticated, resulting in an JWT token being generated and returned to the client.","params":[],"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) throws Exception {\n    // given\n    LoginRequest request = new LoginRequest();\n    UserDto userDto = new UserDto();\n    AppJwt appJwt = new AppJwt();\n    String encodedJwt = \"\";\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n    \n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n    \n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n}\n","description":"\nThe example code should be as short as possible as possible. Make sure to reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code."},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"14cec415-1083-25bb-224d-73161bfcce24","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"verifies that a `UserNotFoundException` is thrown when an email address not found in the database is provided for login authentication.","params":[],"usage":{"language":"java","code":"@Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class, () -> authenticationSDJpaService.login(request));\n  }\n","description":"\nIn this example, a LoginRequest object is created and given an email value using the getDefaultLoginRequest method. The given method mocks the findUserByEmail method in the userSDJpaService class to return Optional.empty(). The login method of the authenticationSDJpaService class is then called with the request as its parameter. The assertThrows method is used to check if an exception of UserNotFoundException type is thrown, which indicates that no user was found for the given email address."},"name":"loginUserNotFound","code":"@Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"11f083b8-893f-d89b-e242-5832de424c30","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"tests whether the login credentials provided by the user are valid or not. It does so by simulating the login process and verifying that the password does not match the encrypted password stored in the database.","params":[],"usage":{"language":"java","code":"// given\nLoginRequest request = getDefaultLoginRequest();\nUserDto userDto = getDefaultUserDtoRequest();\ngiven(userSDJpaService.findUserByEmail(request.getEmail()))\n    .willReturn(Optional.of(userDto));\ngiven(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n    .willReturn(false);\n\n// when and then\nassertThrows(CredentialsIncorrectException.class,\n    () -> authenticationSDJpaService.login(request));\n","description":"\nThis code is using the test framework to mock a user service that would otherwise find a user by email and check if the password matches.  It returns false when it matches.  The test then uses this function in its assertThrows method to determine if an exception will be thrown or not.  If an exception is thrown, the test passes, if not, the test fails."},"name":"loginCredentialsAreIncorrect","code":"@Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"4c1cf632-f1c8-0794-ea48-762826cae76b","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"generates a default login request with an email address of `USER_EMAIL` and a password of `REQUEST_PASSWORD`.","params":[],"returns":{"type_name":"LoginRequest","description":"a new `LoginRequest` object containing email and password parameters.\n\n* `email`: This property is assigned with the value of `USER_EMAIL`, which represents the email address of the user.\n* `password`: This property is assigned with the value of `REQUEST_PASSWORD`, which represents the password for the user.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n  public static void main(String[] args) {\n    // create a new LoginRequest object with the USER_EMAIL and REQUEST_PASSWORD defined above\n    LoginRequest request = getDefaultLoginRequest();\n    System.out.println(\"Email: \" + request.getEmail());\n    System.out.println(\"Password: \" + request.getPassword());\n  }\n}\n","description":""},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }","location":{"start":100,"insert":100,"offset":" ","indent":2,"comment":null},"item_type":"method","length":3},{"id":"105b6d97-003e-c980-934b-82b96308363a","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"constructs a default `UserDto` object with user-specific details and an empty set of community IDs.","params":[],"returns":{"type_name":"UserDto","description":"a `UserDto` object with predefined values for `userId`, `name`, `email`, `encryptedPassword`, and `communityIds`.\n\n* `userId`: The user ID of the default user DTO.\n* `name`: The name of the default user DTO.\n* `email`: The email address of the default user DTO.\n* `encryptedPassword`: The encrypted password of the default user DTO.\n* `communityIds`: A set of community IDs associated with the default user DTO.","complex_type":true},"usage":{"language":"java","code":"UserDto user = getDefaultUserDtoRequest();\n","description":"\nThis example shows how the method is used to create a UserDto object with the USER_ID, NAME, EMAIL, ENCRYPTED_PASSWORD, and COMMUNITY_IDS fields set."},"name":"getDefaultUserDtoRequest","code":"private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"992a10a2-247c-6a91-6345-786648af5645","ancestors":["40883677-1d44-fdb5-f840-77fa14dcba8f"],"type":"function","description":"generates an AppJwt token with a specified expiration time based on the current date and user ID.","params":[{"name":"userDto","type_name":"UserDto","description":"user's details, including their ID, which are used to create a new JWT token with a specified expiration time.\n\n* `userId`: The user ID of the token recipient, represented as a long value.\n* `expirationTime`: A `LocalDateTime` object representing the expiration time of the token, calculated by adding the `TOKEN_LIFETIME` duration to the current date and time.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"an AppJwt token with a generated expiration time based on the current date and time, along with the user ID and other relevant details.\n\n1. `userId`: The user ID associated with the JWT token.\n2. `expiration`: The expiration time of the JWT token in LocalDateTime format, calculated by adding the `TOKEN_LIFETIME` to the current date and time.\n3. `build()`: This method is used to create a new instance of the `AppJwt` class with the provided properties.","complex_type":true},"usage":{"language":"java","code":"UserDto userDto = UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\nAppJwt jwtToken = getDefaultJwtToken(userDto);\n","description":""},"name":"getDefaultJwtToken","code":"private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}