{"name":"MailSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/MailSDJpaServiceTest.java","content":{"structured":{"description":"A MailSDJpaService class that sends emails using Spring Data JPA, Thymeleaf, and JavaMailSender. The service takes a user object as input and calls various methods to send password recovery codes, password successfull changed notifications, account confirmed notifications, and account created notifications. The methods use email templates engine, mail sender, and resource bundle message source to generate the emails.","items":[{"id":"794ba7b2-ea7c-d88d-364c-c71611b7cd02","ancestors":[],"type":"function","description":"is a testing class for the MailSDJpaService class, which is responsible for sending emails through JavaMail API. The test class provides mock objects for JavaMailSender, ITemplateEngine, and ResourceBundleMessageSource, and sets up a mock HTTP request to simulate email sending. The tests verify that email sending methods throw expected exceptions when encountering issues with the mail server or email template processing.","name":"MailSDJpaServiceTest","code":"class MailSDJpaServiceTest {\n\n  @Mock\n  private JavaMailSender mailSender;\n  @Mock\n  private ITemplateEngine emailTemplateEngine;\n  @Mock\n  private ResourceBundleMessageSource messageSource;\n  private MockHttpServletRequest mockRequest;\n\n  private MailSDJpaService mailSDJpaService;\n\n  private MailProperties mailProperties = TestUtils.MailPropertiesHelper.getTestMailProperties();\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n\n    mockRequest = new MockHttpServletRequest();\n    mockRequest.setContextPath(\"http://localhost:8080\");\n    ServletRequestAttributes attrs = new ServletRequestAttributes(mockRequest);\n    RequestContextHolder.setRequestAttributes(attrs);\n\n    mailSDJpaService = new MailSDJpaService(emailTemplateEngine, mailSender, messageSource, mailProperties);\n  }\n\n  @Test\n  void sendPasswordRecoverCodeMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordRecoverCode(user, \"test-token\");\n\n    // then\n    assertFalse(mailSent);\n  }\n\n  @Test\n  void sendPasswordSuccessfullyChangedMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordSuccessfullyChanged(user);\n\n    // then\n    assertFalse(mailSent);\n  }\n\n  @Test\n  void sendEmailConfirmedMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountConfirmed(user);\n\n    // then\n    assertFalse(mailSent);\n  }\n\n  @Test\n  void sendEmailCreatedMailException() {\n    // given\n    SecurityToken token = new SecurityToken();\n    token.setToken(\"token\");\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountCreated(user, token);\n\n    // then\n    assertFalse(mailSent);\n  }\n\n  private User getTestUser() {\n    User user = new User();\n    user.setEmail(\"test-email\");\n    return user;\n  }\n\n}","location":{"start":31,"insert":31,"offset":" ","indent":0,"comment":null},"item_type":"class","length":107},{"id":"4a966d3e-4223-4c96-4743-ee54211d8e45","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"initializes the Mockito annotations, creates a mock HTTP request object, and sets up the RequestContextHolder with the mock request attributes. It also creates an instance of the `MailSDJpaService`.","params":[],"usage":{"language":"java","code":"import static org.mockito.MockitoAnnotations.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.thymeleaf.ITemplateEngine;\n\npublic class MailServiceTest {\n  @Mock\n  private ITemplateEngine emailTemplateEngine;\n  @Mock\n  private ResourceBundleMessageSource messageSource;\n  @InjectMocks\n  private MailSDJpaService mailSDJpaService;\n\n  @BeforeEach\n  public void init() {\n    MockitoAnnotations.initMocks(this);\n    mockRequest = new MockHttpServletRequest();\n    mockRequest.setContextPath(\"http://localhost:8080\");\n    ServletRequestAttributes attrs = new ServletRequestAttributes(mockRequest);\n    RequestContextHolder.setRequestAttributes(attrs);\n  }\n}\n","description":""},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n\n    mockRequest = new MockHttpServletRequest();\n    mockRequest.setContextPath(\"http://localhost:8080\");\n    ServletRequestAttributes attrs = new ServletRequestAttributes(mockRequest);\n    RequestContextHolder.setRequestAttributes(attrs);\n\n    mailSDJpaService = new MailSDJpaService(emailTemplateEngine, mailSender, messageSource, mailProperties);\n  }","location":{"start":45,"insert":45,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"a82b88cb-609d-6abe-9c44-f9c6ea1f77ce","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"tests whether an exception is thrown when attempting to send a password recover code via email using the `mailSender` service. It does so by mocking the `emailTemplateEngine` and `mailSender` services to throw a `MailSendException`, and then asserting that the `mailSent` variable is set to `false`.","params":[],"usage":{"language":"java","code":"@Test\n  void sendPasswordRecoverCodeMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordRecoverCode(user, \"test-token\");\n\n    // then\n    assertFalse(mailSent);\n  }\n","description":"\nThe example is a unit test that demonstrates the usage of method sendPasswordRecoverCodeMailException. It provides a mocked MimeMessage, User object, and sets up the expected behavior of emailTemplateEngine and mailSender to throw a MailSendException when the send() method is called. The test then asserts that sending the password recover code mail will return false."},"name":"sendPasswordRecoverCodeMailException","code":"@Test\n  void sendPasswordRecoverCodeMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordRecoverCode(user, \"test-token\");\n\n    // then\n    assertFalse(mailSent);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"44818cf4-063b-f3bc-db41-6d530a67060c","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"tests whether a MailSendException is thrown when sending an email for password successfully changed notification.","params":[],"usage":{"language":"java","code":"@Test\nvoid sendPasswordSuccessfullyChangedMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session) null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n            .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n            .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n    \n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordSuccessfullyChanged(user);\n    \n    // then\n    assertFalse(mailSent);\n}\n","description":""},"name":"sendPasswordSuccessfullyChangedMailException","code":"@Test\n  void sendPasswordSuccessfullyChangedMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendPasswordSuccessfullyChanged(user);\n\n    // then\n    assertFalse(mailSent);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"4ddd8a8f-1960-7d83-4f46-5ee2ab16c390","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"tests whether an exception is thrown when attempting to send a confirmed mail for an account using the `mailSender`.","params":[],"usage":{"language":"java","code":"@Test\n  void sendEmailConfirmedMailException() {\n    // given\n    User user = new User();\n    user.setEmail(\"test-email\");\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountConfirmed(user);\n\n    // then\n    assertFalse(mailSent);\n  }\n","description":"\nIn this example, a new User object is created with an email address \"test-email\". The sendAccountConfirmed method of the MailSDJpaService class is then called with the user object as its argument. The assertion checks whether the mail was sent successfully or not, and in this case it returns false.\nNote that this example is a unit test and does not provide any input to the method as it is intended only to show how the method would be used in this context."},"name":"sendEmailConfirmedMailException","code":"@Test\n  void sendEmailConfirmedMailException() {\n    // given\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountConfirmed(user);\n\n    // then\n    assertFalse(mailSent);\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2,"comment":null},"item_type":"method","length":17},{"id":"e3c475fb-87cb-fbaa-814d-a6574a4ec97b","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"tests the mailSDJpaService's sendAccountCreated method by throwing a MailSendException when creating an email message.","params":[],"usage":{"language":"java","code":"import com.myhome.domain.SecurityToken;\nimport com.myhome.domain.User;\nimport com.myhome.services.springdatajpa.MailSDJpaService;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.thymeleaf.ITemplateEngine;\n\npublic class MailSDJpaServiceTest {\n\n  @InjectMocks\n  private MailSDJpaService mailSDJpaService;\n\n  @Mock\n  private JavaMailSender mailSender;\n\n  @Mock\n  private ITemplateEngine emailTemplateEngine;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void sendEmailCreatedMailException() {\n    // given\n    SecurityToken token = new SecurityToken();\n    token.setToken(\"token\");\n    User user = new User();\n    user.setEmail(\"test-email\");\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(new MimeMessage((Session)null));\n    doThrow(MailSendException.class).when(mailSender).send(any(MimeMessage.class));\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountCreated(user, token);\n\n    // then\n    assertFalse(mailSent);\n  }\n}\n","description":"\nThe example code is a unit test that will verify the functionality of method sendEmailCreatedMailException. The code uses Mockito to mock the dependencies of the method, such as JavaMailSender and ITemplateEngine. It also uses given to simulate a situation where the email was not sent correctly and thus return false for mailSent."},"name":"sendEmailCreatedMailException","code":"@Test\n  void sendEmailCreatedMailException() {\n    // given\n    SecurityToken token = new SecurityToken();\n    token.setToken(\"token\");\n    MimeMessage mimeMessage = new MimeMessage((Session)null);\n    User user = getTestUser();\n    given(emailTemplateEngine.process(eq(\"\"), any(Context.class)))\n        .willReturn(\"HTML\");\n    given(mailSender.createMimeMessage())\n        .willReturn(mimeMessage);\n    doThrow(MailSendException.class).when(mailSender).send(mimeMessage);\n\n    // when\n    boolean mailSent = mailSDJpaService.sendAccountCreated(user, token);\n\n    // then\n    assertFalse(mailSent);\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2,"comment":null},"item_type":"method","length":19},{"id":"7aaa1d3e-fdac-9aaf-4d4e-b2b8d18077a7","ancestors":["794ba7b2-ea7c-d88d-364c-c71611b7cd02"],"type":"function","description":"creates a new `User` object with an email address of \"test-email\". The function returns the created `User` object.","params":[],"returns":{"type_name":"User","description":"a `User` object with an email address of \"test-email\".\n\n* `email`: The email address of the user, set to `\"test-email\"`.\n* `User`: The class type of the user object, indicating its attributes and methods.","complex_type":true},"usage":{"language":"java","code":"User user = getTestUser();\nuser.setEmail(\"test-email\");\n","description":""},"name":"getTestUser","code":"private User getTestUser() {\n    User user = new User();\n    user.setEmail(\"test-email\");\n    return user;\n  }","location":{"start":131,"insert":131,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5}]}}}