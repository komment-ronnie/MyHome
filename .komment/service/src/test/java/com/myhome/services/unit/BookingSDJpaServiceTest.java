{"name":"BookingSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/BookingSDJpaServiceTest.java","content":{"structured":{"description":"A class BookingSDJpaServiceTest that contains tests for a BookingSDJpaService class. The tests verify various scenarios involving deletion of bookings and amenity bookings items in a Spring Data JPA repository. The code usesMockito for mocking dependencies and verifying behavior of the booking service under test.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.AmenityBookingItem Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.AmenityBookingItem</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-30 5.5,-30 5.5,0 173.5,0 173.5,-30\"/>\n<text text-anchor=\"start\" x=\"13.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"3fbd41bc-3921-85ab-9b4d-26328598257b","ancestors":[],"type":"function","description":"is a test class for the BookingSDJpaService class, which is responsible for managing bookings in a database using JPA. The test class provides tests for various scenarios related to deleting bookings, including when the booking exists, does not exist, and has an amenity that does not exist. The tests verify the behavior of the BookingSDJpaService class using mocks and assertions.","name":"BookingSDJpaServiceTest","code":"public class BookingSDJpaServiceTest {\n\n  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n  private static final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private static final String TEST_AMENITY_ID_2 = \"test-amenity-id-2\";\n  private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n\n  @Mock\n  private AmenityBookingItemRepository bookingItemRepository;\n\n  @InjectMocks\n  private BookingSDJpaService bookingSDJpaService;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }\n\n  @Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n\n  @Test\n  void deleteBookingAmenityNotExists() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION));\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId());\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n\n  private AmenityBookingItem getTestBookingItem() {\n    return new AmenityBookingItem()\n        .withAmenityBookingItemId(TEST_BOOKING_ID);\n  }\n}","location":{"start":22,"insert":22,"offset":" ","indent":0,"comment":null},"item_type":"class","length":76},{"id":"14618d2d-0412-19bf-1746-e13e65c3f22c","ancestors":["3fbd41bc-3921-85ab-9b4d-26328598257b"],"type":"function","description":"initializes Mockito Annotations for the class, enabling mocking of dependencies.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nThis code uses the @BeforeEach annotation, which indicates that this method should run before each test case is executed. The method then calls the initMocks method on the MockitoAnnotations class, which initializes any mock objects in the test class."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4},{"id":"8aa75da9-e177-0b97-e04e-5252908b9896","ancestors":["3fbd41bc-3921-85ab-9b4d-26328598257b"],"type":"function","description":"tests the deletion of a booking item from the repository. It provides a test booking item, sets its amenity, and then calls the `deleteBooking` method to delete the booking item. The function verifies that the booking item was deleted by checking the repository and calling additional verify methods.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }\n","description":"\nIn the above example, the test is testing deleteBookingItem method by giving a mock booking item and verifying it."},"name":"deleteBookingItem","code":"@Test\n  void deleteBookingItem() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION));\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertTrue(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository).delete(testBookingItem);\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2,"comment":null},"item_type":"method","length":18},{"id":"38264d72-d371-4295-7d47-2b9c3f995215","ancestors":["3fbd41bc-3921-85ab-9b4d-26328598257b"],"type":"function","description":"verifies that a booking cannot be deleted if it does not exist in the repository. It does this by asserting that the delete operation fails and verifying that the find operation also fails.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }\n","description":"\nIn this example, we are testing the method deleteBookingNotExists by giving a booking ID that does not exist in the database. We then assert that the returned boolean value is false and verify that the findByAmenityBookingItemId() method of the bookingItemRepository was called with the expected booking ID. Finally, we verify that the delete() method of the bookingItemRepository was never called."},"name":"deleteBookingNotExists","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":14},{"id":"f9e91a5a-8fa3-748e-054a-d4892ffd16b0","ancestors":["3fbd41bc-3921-85ab-9b4d-26328598257b"],"type":"function","description":"verifies that a booking cannot be deleted if the amenity associated with it does not exist. It uses mocking to verify the behavior of the `bookingSDJpaService` and the `bookingItemRepository`.","params":[],"usage":{"language":"java","code":"@Test\npublic void testDeleteBookingAmenityNotExist() {\n    //Given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n            .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION));\n    \n    //When\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    //Then\n    assertFalse(bookingDeleted);\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n}\n","description":""},"name":"deleteBookingAmenityNotExists","code":"@Test\n  void deleteBookingAmenityNotExists() {\n    // given\n    AmenityBookingItem testBookingItem = getTestBookingItem();\n\n    given(bookingItemRepository.findByAmenityBookingItemId(TEST_BOOKING_ID))\n        .willReturn(Optional.of(testBookingItem));\n    testBookingItem.setAmenity(TestUtils.AmenityHelpers\n        .getTestAmenity(TEST_AMENITY_ID_2, TEST_AMENITY_DESCRIPTION));\n    // when\n    boolean bookingDeleted = bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertFalse(bookingDeleted);\n    assertNotEquals(TEST_AMENITY_ID, testBookingItem.getAmenity().getAmenityId());\n    verify(bookingItemRepository).findByAmenityBookingItemId(TEST_BOOKING_ID);\n    verify(bookingItemRepository, never()).delete(any());\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2,"comment":null},"item_type":"method","length":18},{"id":"d94f6917-ae8f-b4b8-424d-8a769bd628e9","ancestors":["3fbd41bc-3921-85ab-9b4d-26328598257b"],"type":"function","description":"creates a new instance of `AmenityBookingItem` with a predefined ID for testing purposes.","params":[],"returns":{"type_name":"AmenityBookingItem","description":"a new instance of the `AmenityBookingItem` class with a pre-defined ID.\n\n* `AmenityBookingItemId`: This field represents a unique identifier for the booking item, which is set to `TEST_BOOKING_ID`.\n* No other attributes or properties are provided in the function's output.","complex_type":true},"usage":{"language":"java","code":"public class BookingServiceTest {\n    @Test\n    void testGetTestBookingItem() {\n        AmenityBookingItem bookingItem = new BookingSDJpaService().getTestBookingItem();\n        assertEquals(TEST_BOOKING_ID, bookingItem.getAmenityBookingItemId());\n    }\n}\n","description":"\nThe example above shows how the getTestBookingItem method can be used to create an AmenityBookingItem object with a specific ID. The testGetTestBookingItem() method in the BookingServiceTest class uses this method to create an instance of AmenityBookingItem and then asserts that its amenity booking item ID is equal to the expected ID, which is defined as TEST_BOOKING_ID."},"name":"getTestBookingItem","code":"private AmenityBookingItem getTestBookingItem() {\n    return new AmenityBookingItem()\n        .withAmenityBookingItemId(TEST_BOOKING_ID);\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2,"comment":null},"item_type":"method","length":4}]}}}