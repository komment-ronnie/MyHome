{"name":"SecretJwtEncoderDecoderTest.java","path":"service/src/test/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoderTest.java","content":{"structured":{"description":"a test class to verify the functionality of SecretJwtEncoderDecoder class. The class has four tests:\n\n* In the first test, the class encodes an AppJwt object using a valid secret key and returns the encoded JWT.\n* In the second test, an exception is thrown when trying to encode an AppJwt object with an invalid secret key.\n* In the third test, the class decodes an encoded JWT using a valid secret key and verifies that the resulting AppJwt object has the expected user ID, expiration time, and other properties.\n* In the fourth test, an exception is thrown when trying to decode an expired JWT using a valid secret key.","items":[{"id":"1ccc0f27-a171-4283-8443-6573f5007a55","ancestors":[],"type":"function","description":"is a unit test class for testing the SecretJwtEncoderDecoder class. The tests cover various scenarios such as successful jwt encoding and decoding, invalid secret key, expired jwt, and others. The tests verify the functionality of the SecretJwtEncoderDecoder class and ensure it works correctly in different situations.","name":"SecretJwtEncoderDecoderTest","code":"class SecretJwtEncoderDecoderTest {\n  private static final String TEST_USER_ID = \"test-user-id\";\n\n  private static final String EXPIRED_JWT = \"eyJhbGciOiJIUzUxMiJ9.\"\n      + \"eyJzdWIiOiJ0ZXN0LXVzZXItaWQiLCJleHAiOjE1OTYwOTg4MDF9.\"\n      + \"jnvLiLzobwW2XKz0iuNHZu3W_XO3FNDJoDySxQv_9oUsTPGPcy83_9ETMZRsUBLB9YzkZ0ZtSfP05g4RVKuFhg\";\n\n  private static final String INVALID_SECRET = \"secret\";\n  private static final String VALID_SECRET = \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\";\n\n  @Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }\n\n  @Test\n  void jwtEncodeFailWithException() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // when and then\n    Assertions.assertThrows(WeakKeyException.class,\n        () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n  }\n\n  @Test\n  void jwtDecodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt =\n        AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\n    String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\n\n    // when\n    AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n\n    // then\n    Assertions.assertNotNull(decodedJwt);\n    Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID);\n    Assertions.assertNotNull(decodedJwt.getExpiration());\n  }\n\n  @Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class,\n        () -> jwtEncoderDecoder.decode(EXPIRED_JWT, VALID_SECRET));\n  }\n}","location":{"start":26,"insert":26,"offset":" ","indent":0,"comment":null},"item_type":"class","length":64},{"id":"e07ca746-9abb-889a-f34e-7138d836ffc5","ancestors":["1ccc0f27-a171-4283-8443-6573f5007a55"],"type":"function","description":"tests the successful encoding of a JWT using the `SecretJwtEncoderDecoder`.","params":[],"usage":{"language":"java","code":"@Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }\n","description":"\nThis test is checking if the encode method of SecretJwtEncoderDecoder works correctly by creating an AppJwt object with a valid userId and expiration date and encoding it with a secret key. It then asserts that the encoded jwt is not null."},"name":"jwtEncodeSuccess","code":"@Test\n  void jwtEncodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // then\n    Assertions.assertNotNull(jwtEncoderDecoder.encode(appJwt, VALID_SECRET));\n  }","location":{"start":40,"insert":40,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"8f683a08-a435-1ba6-6948-897a05dd6f19","ancestors":["1ccc0f27-a171-4283-8443-6573f5007a55"],"type":"function","description":"tests whether an exception is thrown when a secret key is invalid during JWT encoding using the `SecretJwtEncoderDecoder`.","params":[],"usage":{"language":"java","code":"@Test\n  void jwtEncodeFailWithException() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // when and then\n    Assertions.assertThrows(WeakKeyException.class,\n        () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n  }\n","description":"\nThis test case is testing the encode method in SecretJwtEncoderDecoder class with an invalid secret key and expecting it to throw a WeakKeyException."},"name":"jwtEncodeFailWithException","code":"@Test\n  void jwtEncodeFailWithException() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt = AppJwt.builder().expiration(LocalDateTime.now()).userId(TEST_USER_ID).build();\n\n    // when and then\n    Assertions.assertThrows(WeakKeyException.class,\n        () -> jwtEncoderDecoder.encode(appJwt, INVALID_SECRET));\n  }","location":{"start":52,"insert":52,"offset":" ","indent":2,"comment":null},"item_type":"method","length":10},{"id":"78550cf5-0cfe-6095-be4f-b08a519511a3","ancestors":["1ccc0f27-a171-4283-8443-6573f5007a55"],"type":"function","description":"tests the decode functionality of the `SecretJwtEncoderDecoder`. It provides an encoded JWT, decodes it successfully with the valid secret key, and verifies that the resulting `AppJwt` object has the expected user ID and expiration time.","params":[],"usage":{"language":"java","code":"@Test\n  void jwtDecodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt =\n        AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\n    String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\n\n    // when\n    AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n\n    // then\n    Assertions.assertNotNull(decodedJwt);\n    Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID);\n    Assertions.assertNotNull(decodedJwt.getExpiration());\n  }\n","description":"\nThis example will test the decode method of SecretJwtEncoderDecoder class using a valid secret key. The AppJwt object is created using the builder pattern and then encoded into a JWT string using encode method, which takes the appJwt object as an argument and the VALID_SECRET as an argument. Then the decodedJwt variable is assigned to the decode method of SecretJwtEncoderDecoder class, which takes the encodedJwt string and the VALID_SECRET as an argument. Finally, the tests are executed using assertions to check that the decoded JWT object contains the same userId as the appJwt object and has a not null expiration field."},"name":"jwtDecodeSuccess","code":"@Test\n  void jwtDecodeSuccess() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    AppJwt appJwt =\n        AppJwt.builder().userId(TEST_USER_ID).expiration(LocalDateTime.now().plusHours(1)).build();\n    String encodedJwt = jwtEncoderDecoder.encode(appJwt, VALID_SECRET);\n\n    // when\n    AppJwt decodedJwt = jwtEncoderDecoder.decode(encodedJwt, VALID_SECRET);\n\n    // then\n    Assertions.assertNotNull(decodedJwt);\n    Assertions.assertEquals(decodedJwt.getUserId(), TEST_USER_ID);\n    Assertions.assertNotNull(decodedJwt.getExpiration());\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"48e660b1-a444-8a88-2442-bc45e11a3068","ancestors":["1ccc0f27-a171-4283-8443-6573f5007a55"],"type":"function","description":"tests whether an exception is thrown when decoding an expired JWT using the `SecretJwtEncoderDecoder`.","params":[],"usage":{"language":"java","code":"@Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n    String expiredJwt = \"eyJhbGciOiJIUzUxMiJ9.\"\n      + \"eyJzdWIiOiJ0ZXN0LXVzZXItaWQiLCJleHAiOjE1OTYwOTg4MDF9.\"\n      + \"jnvLiLzobwW2XKz0iuNHZu3W_XO3FNDJoDySxQv_9oUsTPGPcy83_9ETMZRsUBLB9YzkZ0ZtSfP05g4RVKuFhg\";\n    String validSecret = \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\"\n      + \"secretsecretsecretsecretsecretsecretsecretsecret\";\n    AppJwt decodedJwt = null;\n    \n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class, () -> {\n      decodedJwt = jwtEncoderDecoder.decode(expiredJwt, validSecret);\n    });\n  }\n","description":""},"name":"jwtDecodeFailWithExpiredJwt","code":"@Test\n  void jwtDecodeFailWithExpiredJwt() {\n    // given\n    SecretJwtEncoderDecoder jwtEncoderDecoder = new SecretJwtEncoderDecoder();\n\n    // when and then\n    Assertions.assertThrows(ExpiredJwtException.class,\n        () -> jwtEncoderDecoder.decode(EXPIRED_JWT, VALID_SECRET));\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9}]}}}