{"name":"PageInfo.java","path":"api/src/main/java/com/myhome/utils/PageInfo.java","content":{"structured":{"description":"A class `PageInfo` that contains information about a page of data. The class has five instance fields: currentPage, pageLimit, totalPages, and totalElements, which are initialized using a constructor. A static method `of` is also provided to create a new `PageInfo` object based on a `Pageable` object and the corresponding page of data. This code likely forms part of a Spring Data-based application, as it makes use of Lombok, a popular tool for generating boilerplate code, and the `Pageable` interface, which is a part of Spring Data's domain layer.","items":[{"id":"95c62023-ff05-1c92-ee49-461bfc3c4cf4","ancestors":[],"type":"function","description":"is a data structure that represents the current page and total pages of a paginated dataset, along with the total number of elements in the dataset. It provides a convenient way to pass around this information when working with large datasets.","name":"PageInfo","code":"@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}","location":{"start":11,"insert":11,"offset":" ","indent":0,"comment":null},"item_type":"class","length":19},{"id":"158f2881-341b-a588-794d-55e0d8698eb3","ancestors":["95c62023-ff05-1c92-ee49-461bfc3c4cf4"],"type":"function","description":"transforms a `Pageable` object and a `Page` object into a `PageInfo` object, providing information on the current page number, size, total pages, and total elements.","params":[{"name":"pageable","type_name":"Pageable","description":"pageable object that contains information about the pagination of the data, which is used to calculate the page number, size, and total pages and elements of the resultant page info.\n\n* `getPageNumber(): int`: The page number of the current page being processed.\n* `getPageSize(): int`: The number of elements in a single page of the data set.\n* `getTotalPages(): int`: The total number of pages in the data set.\n* `getTotalElements(): int`: The total number of elements in the data set.","complex_type":true},{"name":"page","type_name":"Page<?>","description":"current page of elements being processed, which is used to calculate the total pages and elements in the PageInfo object returned by the function.\n\n* `pageNumber`: The page number that contains the elements being processed.\n* `pageSize`: The number of elements in each page.\n* `totalPages`: The total number of pages in the entire dataset.\n* `totalElements`: The total number of elements in the dataset.","complex_type":true}],"returns":{"type_name":"PageInfo","description":"a `PageInfo` object containing information about the current page of a paginated result.\n\n* pageable.getPageNumber(): The number of the current page being displayed.\n* pageable.getPageSize(): The number of elements per page in the paginated list.\n* page.getTotalPages(): The total number of pages available for display.\n* page.getTotalElements(): The total number of elements in the paginated list.","complex_type":true},"name":"of","code":"public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }","location":{"start":21,"insert":21,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8}]}}}