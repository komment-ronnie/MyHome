{"name":"UserController.java","path":"user-service/src/main/java/com/prathab/userservice/controllers/UserController.java","content":{"structured":{"description":"A `UserController` class that serves as a REST controller for user actions. The class includes methods for handling sign-up requests and returning response entities. The `signUp()` method consumes and validates a `CreateUserRequest` object, creates a new user using the `createUser()` method of the `UserService` class, and returns a `CreateUserResponse` object in the response entity.","items":[{"id":"cf7df6e6-e4b3-5b8f-604f-6f8811c124c2","ancestors":[],"type":"function","description":"is a RESTful controller that facilitates user actions. It has three main methods: status(), signUp() and CreateUserResponse(). The class uses log4j for logging purposes and depends on the Spring Core, Spring Web, and Spring Data JPA frameworks.","name":"UserController","code":"@RestController\n@Slf4j\npublic class UserController {\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final Environment environment;\n\n  public UserController(UserService userService,\n      UserApiMapper userApiMapper, Environment environment) {\n    this.userService = userService;\n    this.userApiMapper = userApiMapper;\n    this.environment = environment;\n  }\n\n  @GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n\n  @PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }\n}","location":{"start":37,"insert":37,"offset":" ","indent":0,"comment":{"start":33,"end":36}},"item_type":"class","length":35},{"id":"46339d02-da29-69a7-7c4e-96b618801b5b","ancestors":["cf7df6e6-e4b3-5b8f-604f-6f8811c124c2"],"type":"function","description":"logs trace messages and returns the string \"Working\".","params":[],"returns":{"type_name":"String","description":"\"Working\".","complex_type":false},"usage":{"language":"java","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }\n","description":""},"name":"status","code":"@GetMapping(\"/users/status\")\n  public String status() {\n    log.trace(\"Running on port{} with jwt_secret{}\",\n        environment.getProperty(\"local.server.port\"),\n        environment.getProperty(\"token.secret\"));\n    return \"Working\";\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"8c623f0c-23ff-b18c-704f-a86999617faf","ancestors":["cf7df6e6-e4b3-5b8f-604f-6f8811c124c2"],"type":"function","description":"receives a `CreateUserRequest` object from the client, creates a new user entity using the provided request details, and returns a `CreateUserResponse` object with the newly created user data.","params":[{"name":"request","type_name":"CreateUserRequest","description":"`CreateUserRequest` object passed from the client, which contains the user's information to be created in the system.\n\n* `@Valid`: Indicates that the `request` object must be valid according to the validation rules defined in the Java classes annotated with `@Valid`.\n* `@RequestBody`: Annotates the `request` parameter as a JSON or XML body of the HTTP request.\n* `CreateUserRequest`: The class type of the `request` parameter, which contains the data required to create a new user.\n* `userApiMapper`: A class that maps the `CreateUserResponse` object to a `UserDto` class.\n* `userService`: A class that creates a new user in the system.\n* `createdUserDto`: The transformed `UserDto` object created by the `userService`.\n* `createdUserResponse`: The transformed `CreateUserResponse` object created by the `userApiMapper`.","complex_type":true}],"returns":{"type_name":"CreateUserResponse","description":"a `ResponseEntity` with a `HttpStatus.CREATED` status and a `CreateUserResponse` body containing the newly created user details.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response to a HTTP request. It has a status code and a body, which contains the actual response data.\n* `status`: This is the status code of the response, which in this case is `HttpStatus.CREATED`.\n* `body`: This is the response data itself, which is a `CreateUserResponse` object.\n* `CreateUserResponse`: This is a class that contains the data returned by the function, including the user ID, user name, and email address.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void signUp_validRequestBody() {\n    // Arrange\n    var createUserRequest = new CreateUserRequest();\n    createUserRequest.setEmail(\"johndoe@gmail.com\");\n    createUserRequest.setPassword(\"password123\");\n    createUserRequest.setUsername(\"johndoe\");\n\n    // Act\n    var responseEntity = userController.signUp(createUserRequest);\n\n    // Assert\n    assertThat(responseEntity).isNotNull();\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n}\n","description":"\nIn this example, a CreateUserRequest object is created and filled with the necessary information. Then, it is passed as an argument to the signUp method in UserController. The responseEntity from the signUp method is then asserted to be not null and have a status code of HttpStatus.CREATED. This test demonstrates that the signUp method can create a user successfully if given a valid request body."},"name":"signUp","code":"@PostMapping(\n      path = \"/users\",\n      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},\n      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n  )\n  public ResponseEntity<CreateUserResponse> signUp(@Valid @RequestBody CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    var requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    var createdUserDto = userService.createUser(requestUserDto);\n    var createdUserResponse = userApiMapper.userDtoToCreateUserResponse(createdUserDto);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdUserResponse);\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}